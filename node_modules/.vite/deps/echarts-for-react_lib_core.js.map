{
  "version": 3,
  "sources": ["../../echarts-for-react/src/helper/pick.ts", "../../echarts-for-react/src/helper/is-function.ts", "../../echarts-for-react/src/helper/is-string.ts", "../../echarts-for-react/src/helper/is-equal.ts", "../../echarts-for-react/src/core.tsx"],
  "sourcesContent": ["/**\n * 保留 object 中的部分内容\n * @param obj\n * @param keys\n */\nexport function pick(obj: Record<string, unknown>, keys: string[]): Record<string, unknown> {\n  const r = {};\n  keys.forEach((key) => {\n    r[key] = obj[key];\n  });\n  return r;\n}\n", "export function isFunction(v: any): boolean {\n  return typeof v === 'function';\n}\n", "export function isString(v: any): boolean {\n  return typeof v === 'string';\n}\n", "import isEqual from 'fast-deep-equal';\n\nexport { isEqual };\n", "import type { ECharts } from 'echarts';\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\nimport { EChartsReactProps, EChartsInstance } from './types';\n\n/**\n * core component for echarts binding\n */\nexport default class EChartsReactCore extends PureComponent<EChartsReactProps> {\n  /**\n   * echarts render container\n   */\n  public ele: HTMLElement;\n\n  /**\n   * if this is the first time we are resizing\n   */\n  private isInitialResize: boolean;\n\n  /**\n   * echarts library entry\n   */\n  protected echarts: any;\n\n  constructor(props: EChartsReactProps) {\n    super(props);\n\n    this.echarts = props.echarts;\n    this.ele = null;\n    this.isInitialResize = true;\n  }\n\n  componentDidMount() {\n    this.renderNewEcharts();\n  }\n\n  // update\n  componentDidUpdate(prevProps: EChartsReactProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    const { shouldSetOption } = this.props;\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    }\n\n    // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n    if (\n      !isEqual(prevProps.theme, this.props.theme) ||\n      !isEqual(prevProps.opts, this.props.opts) ||\n      !isEqual(prevProps.onEvents, this.props.onEvents)\n    ) {\n      this.dispose();\n\n      this.renderNewEcharts(); // 重建\n      return;\n    }\n\n    // when these props are not isEqual, update echarts\n    const pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n\n    /**\n     * when style or class name updated, change size.\n     */\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    this.dispose();\n  }\n\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n  public getEchartsInstance(): ECharts {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  }\n\n  /**\n   * dispose echarts and clear size-sensor\n   */\n  private dispose() {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      this.echarts.dispose(this.ele);\n    }\n  }\n\n  /**\n   * render a new echarts instance\n   */\n  private renderNewEcharts() {\n    const { onEvents, onChartReady } = this.props;\n\n    // 1. new echarts instance\n    const echartsInstance = this.updateEChartsOption();\n\n    // 2. bind events\n    this.bindEvents(echartsInstance, onEvents || {});\n\n    // 3. on chart ready\n    if (isFunction(onChartReady)) onChartReady(echartsInstance);\n\n    // 4. on resize\n    if (this.ele) {\n      bind(this.ele, () => {\n        this.resize();\n      });\n    }\n  }\n\n  // bind the events\n  private bindEvents(instance, events: EChartsReactProps['onEvents']) {\n    function _bindEvent(eventName: string, func: Function) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, (param) => {\n          func(param, instance);\n        });\n      }\n    }\n\n    // loop and bind\n    for (const eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  }\n\n  /**\n   * render the echarts\n   */\n  private updateEChartsOption(): EChartsInstance {\n    const { option, notMerge = false, lazyUpdate = false, showLoading, loadingOption = null } = this.props;\n    // 1. get or initial the echarts object\n    const echartInstance = this.getEchartsInstance();\n    // 2. set the echarts option\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    // 3. set loading mask\n    if (showLoading) echartInstance.showLoading(loadingOption);\n    else echartInstance.hideLoading();\n\n    return echartInstance;\n  }\n\n  /**\n   * resize wrapper\n   */\n  private resize() {\n    // 1. get the echarts object\n    const echartsInstance = this.getEchartsInstance();\n\n    // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n\n    // 3. update variable for future calls\n    this.isInitialResize = false;\n  }\n\n  render(): JSX.Element {\n    const { style, className = '' } = this.props;\n    // default height = 300\n    const newStyle = { height: 300, ...style };\n\n    return (\n      <div\n        ref={(e: HTMLElement) => {\n          this.ele = e;\n        }}\n        style={newStyle}\n        className={`echarts-for-react ${className}`}\n      />\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["EChartsReactCore", "eventName"]
}
