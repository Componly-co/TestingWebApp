"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadToS3 = void 0;
var fs_1 = require("fs");
var promises_1 = require("fs/promises");
var path_1 = require("path");
var client_s3_1 = require("@aws-sdk/client-s3");
var dotenv_1 = require("dotenv");
var mime_1 = __importDefault(require("mime"));
var utils_1 = require("./utils");
(0, dotenv_1.config)();
function getFiles(dir) {
    return __awaiter(this, void 0, void 0, function () {
        var dirents, files, output;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, (0, promises_1.readdir)(dir, { withFileTypes: true })];
                case 1:
                    dirents = _a.sent();
                    return [4, Promise.all(dirents.map(function (dirent) {
                            var res = (0, path_1.join)(dir, dirent.name);
                            return dirent.isDirectory() ? getFiles(res) : res;
                        }))];
                case 2:
                    files = _a.sent();
                    output = files.flat();
                    return [2, output];
            }
        });
    });
}
function uploadToS3(storybookBuildFolder, bucketPath) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var files, region, bucketName, s3Client, uploads;
        var _this = this;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4, getFiles(storybookBuildFolder)];
                case 1:
                    files = _c.sent();
                    region = "us-east-1";
                    bucketName = "storybook-parser";
                    s3Client = new client_s3_1.S3Client({
                        region: region,
                        credentials: {
                            accessKeyId: (_a = process.env.AWS_S3_ACCESS_KEY_ID) !== null && _a !== void 0 ? _a : "",
                            secretAccessKey: (_b = process.env.AWS_S3_SECRET_ACCESS_KEY) !== null && _b !== void 0 ? _b : "",
                        },
                    });
                    return [4, (0, utils_1.findFileInBucket)({
                            bucketPath: bucketPath,
                            bucketName: bucketName,
                            s3Client: s3Client,
                        })];
                case 2:
                    _c.sent();
                    uploads = files.map(function (filePath) { return __awaiter(_this, void 0, void 0, function () {
                        var key, newKey, awsFileKey, mimeType;
                        return __generator(this, function (_a) {
                            key = (0, path_1.relative)(storybookBuildFolder, filePath);
                            newKey = (0, path_1.join)(bucketPath, key);
                            awsFileKey = newKey.split(path_1.sep).join(path_1.posix.sep);
                            mimeType = mime_1.default.getType((0, path_1.extname)(filePath));
                            return [2, s3Client.send(new client_s3_1.PutObjectCommand(__assign({ Key: awsFileKey, Bucket: bucketName, Body: (0, fs_1.createReadStream)(filePath) }, (typeof mimeType === "string" ? { ContentType: mimeType } : {}))))];
                        });
                    }); });
                    return [4, Promise.all(uploads)];
                case 3:
                    _c.sent();
                    return [2];
            }
        });
    });
}
exports.uploadToS3 = uploadToS3;
