import { spawn } from "child_process";
import { access, readFile } from "fs/promises";
import { join } from "path";
import { createId } from "@paralleldrive/cuid2";
import chalk from "chalk";
import { uploadToS3 } from "./s3";
import type { StoryJSON, StoryURLOutput } from "@componlyco/schemas";

interface StoryURLInput {
  storybookBuildFolder: string;
  baseURL?: string | null;
  viewMode?: "story" | "docs";
  toolbar?: boolean;
  clientName?: string | null;
  staticDomain?: string | null;
}

async function isStoriesJSONPresent(storybookBuildFolder: string): Promise<boolean> {
  let isStoriesPresent = false;
  const targetPath = join(storybookBuildFolder, "stories.json");
  try {
    await access(targetPath);
    isStoriesPresent = true;
  } catch {
    isStoriesPresent = false;
  }
  return isStoriesPresent;
}

async function extractScript(storybookBuildFolder: string): Promise<void> {
  return new Promise((res) => {
    const destinationFile = join(storybookBuildFolder, "stories.json");
    const spawnedProcess = spawn("npx", ["storybook", "extract", storybookBuildFolder, destinationFile], {
      shell: true,
    });
    spawnedProcess.on("spawn", () => {
      console.log(chalk.yellow(`Starting extraction in ${storybookBuildFolder}.`));
    });
    spawnedProcess.stdout.on("data", (data: Buffer) => {
      const output = data.toString();
      if (output.includes("ENOENT")) {
        console.log(chalk.red(`Unable to find ${storybookBuildFolder}.`));
      } else {
        console.log(chalk.yellow(output));
      }
    });
    spawnedProcess.stderr.on("data", (error) => {
      const { code, message } = error as NodeJS.ErrnoException;
      if (code === "ENOENT") {
        console.log(chalk.red(`Unable to find ${storybookBuildFolder}.`));
      } else {
        console.log(chalk.yellow(message));
      }
    });
    spawnedProcess.on("close", () => {
      res();
    });
  });
}

export async function extractStories(storybookBuildFolder: string): Promise<void> {
  const isPresent = await isStoriesJSONPresent(storybookBuildFolder);
  if (isPresent === false) {
    try {
      await extractScript(storybookBuildFolder);
    } catch {
      console.log(chalk.red(`Unable to extract "stories.json" from ${storybookBuildFolder}.`));
    }
  }
}

export async function getStoryURLs({
  storybookBuildFolder,
  baseURL,
  viewMode,
  toolbar,
  clientName,
  staticDomain,
}: StoryURLInput): Promise<StoryURLOutput> {
  let urls: Record<string, string[]> | undefined;
  let meta: StoryJSON | undefined;
  let uploadedURL = baseURL;

  if (uploadedURL === undefined) {
    try {
      const bucketPath = clientName ?? createId();
      await uploadToS3(storybookBuildFolder, bucketPath);
      uploadedURL = `${bucketPath}.${staticDomain ?? "storybook.manufacanalytics.com"}`;
      console.log("Successfully uploaded.");
    } catch (err) {
      console.log(chalk.red("Unable to upload the Storybook build on AWS S3."));
    }
  }

  if (uploadedURL !== undefined) {
    // TODO: Fix lint error on directly using 'uploadedURL' in line '99 && 100'.
    try {
      const storiesJSON = await readFile(join(storybookBuildFolder, "stories.json"), "utf-8");
      meta = JSON.parse(storiesJSON) as StoryJSON;
      const viewModeString = viewMode !== undefined ? `&viewMode=${viewMode}` : "";
      urls = Object.keys(meta.stories).reduce<Record<string, string[]>>((acc, storyID) => {
        const component = storyID.split("--")[0];
        return {
          ...acc,
          [component]: [
            ...(acc[component] ?? []),
            toolbar === true
              ? `${uploadedURL ?? ""}/?path=${storyID}&full=1&shortcuts=false&singleStory=true${viewModeString}` // 'path=' should provide the accurate path to deployed stories
              : `${uploadedURL ?? ""
              }/iframe.html?id=${storyID}&full=1&shortcuts=false&singleStory=true${viewModeString}`,
          ],
        };
      }, {});
    } catch {
      console.log(chalk.red(`"stories.json" file not found inside ${storybookBuildFolder}.`));
    }
  }
  return { urls, meta };
}
