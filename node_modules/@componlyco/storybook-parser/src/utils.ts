import { DeleteObjectsCommand, ListObjectsV2Command } from "@aws-sdk/client-s3";
import chalk from "chalk";
import type { DeleteObjectsCommandInput, ListObjectsV2CommandOutput, S3Client } from "@aws-sdk/client-s3";

interface FindFileParams {
  bucketPath: string;
  bucketName: string;
  s3Client: S3Client;
}

interface DeleteFileParams {
  objects: ListObjectsV2CommandOutput;
  bucketName: string;
  s3Client: S3Client;
}

async function deleteFilesFromS3Bucket({ objects, bucketName, s3Client }: DeleteFileParams) {
  try {
    const deleteParams: DeleteObjectsCommandInput = {
      Bucket: bucketName,
      Delete: {
        Objects:
          objects.Contents?.map(({ Key }) => ({
            Key,
          })) ?? [],
      },
    };

    await s3Client.send(new DeleteObjectsCommand(deleteParams));
  } catch {
    console.log(chalk.red("Unable to delete the existing files in the AWS S3 bucket."));
  }
}

export async function findFileInBucket({ bucketPath, bucketName, s3Client }: FindFileParams) {
  const s3Objects = await s3Client.send(
    new ListObjectsV2Command({
      Bucket: bucketName,
      Prefix: bucketPath,
    })
  );
  if (s3Objects.Contents === undefined) {
    //  If rootFolder does not  exist in S3 bucket
    console.log(chalk.green(`Uploading ${bucketPath} in AWS S3 bucket.`));
  } else {
    //  If file path exist in S3 bucket delete all the pre-existing files
    console.log(chalk.yellow(`Overwriting ${bucketPath} in AWS S3 bucket.`));
    await deleteFilesFromS3Bucket({ objects: s3Objects, bucketName, s3Client });
  }
}
