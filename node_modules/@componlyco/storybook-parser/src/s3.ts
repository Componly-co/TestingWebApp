/* eslint-disable turbo/no-undeclared-env-vars */
import { createReadStream } from "fs";
import { readdir } from "fs/promises";
import { join, relative, sep, posix, extname } from "path";
import { PutObjectCommand, S3Client } from "@aws-sdk/client-s3";
import { config } from "dotenv";
import mime from "mime";
import { findFileInBucket } from "./utils";

config();

async function getFiles(dir: string): Promise<string[]> {
  const dirents = await readdir(dir, { withFileTypes: true });
  const files = await Promise.all(
    dirents.map((dirent) => {
      const res = join(dir, dirent.name);
      return dirent.isDirectory() ? getFiles(res) : res;
    })
  );
  const output = files.flat();
  return output;
}

/**
 * Ref: https://docs.aws.amazon.com/AmazonS3/latest/userguide/example_s3_PutObject_section.html
 * @param { string } storybookBuildFolder
 * @param { string } bucketPath
 */
export async function uploadToS3(storybookBuildFolder: string, bucketPath: string): Promise<void> {
  const files = await getFiles(storybookBuildFolder);
  const region = "us-east-1";
  const bucketName = "storybook-parser";
  const s3Client = new S3Client({
    region,
    credentials: {
      accessKeyId: process.env.AWS_S3_ACCESS_KEY_ID ?? "",
      secretAccessKey: process.env.AWS_S3_SECRET_ACCESS_KEY ?? "",
    },
  });

  await findFileInBucket({
    bucketPath,
    bucketName,
    s3Client,
  });

  const uploads = files.map(async (filePath) => {
    const key = relative(storybookBuildFolder, filePath);
    const newKey = join(bucketPath, key);

    const awsFileKey = newKey.split(sep).join(posix.sep);
    const mimeType = mime.getType(extname(filePath));

    return s3Client.send(
      new PutObjectCommand({
        Key: awsFileKey,
        Bucket: bucketName,
        Body: createReadStream(filePath),
        ...(typeof mimeType === "string" ? { ContentType: mimeType } : {}),
      })
    );
  });
  await Promise.all(uploads);
}
