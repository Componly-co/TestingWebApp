import { z as zod } from "zod";
export declare const ParseSchema: zod.ZodObject<{
    project: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
    projectType: zod.ZodOptional<zod.ZodNullable<zod.ZodNativeEnum<{
        readonly React: "react";
        readonly Stencil: "stencil";
        readonly Angular: "angular";
        readonly Vue: "vue";
    }>>>;
    storybook: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
    designSystems: zod.ZodOptional<zod.ZodNullable<zod.ZodArray<zod.ZodObject<{
        id: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
        url: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
        relativePaths: zod.ZodOptional<zod.ZodNullable<zod.ZodArray<zod.ZodString, "many">>>;
        alias: zod.ZodString;
        tags: zod.ZodOptional<zod.ZodNullable<zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
        }, "strip", zod.ZodTypeAny, {
            description?: string | null | undefined;
            name: string;
        }, {
            description?: string | null | undefined;
            name: string;
        }>, "many">>>;
    }, "strip", zod.ZodTypeAny, {
        id?: string | null | undefined;
        url?: string | null | undefined;
        relativePaths?: string[] | null | undefined;
        tags?: {
            description?: string | null | undefined;
            name: string;
        }[] | null | undefined;
        alias: string;
    }, {
        id?: string | null | undefined;
        url?: string | null | undefined;
        relativePaths?: string[] | null | undefined;
        tags?: {
            description?: string | null | undefined;
            name: string;
        }[] | null | undefined;
        alias: string;
    }>, "many">>>;
    ignorePatterns: zod.ZodOptional<zod.ZodNullable<zod.ZodArray<zod.ZodString, "many">>>;
}, "strip", zod.ZodTypeAny, {
    designSystems?: {
        id?: string | null | undefined;
        url?: string | null | undefined;
        relativePaths?: string[] | null | undefined;
        tags?: {
            description?: string | null | undefined;
            name: string;
        }[] | null | undefined;
        alias: string;
    }[] | null | undefined;
    storybook?: string | null | undefined;
    project?: string | null | undefined;
    ignorePatterns?: string[] | null | undefined;
    projectType?: "react" | "stencil" | "angular" | "vue" | null | undefined;
}, {
    designSystems?: {
        id?: string | null | undefined;
        url?: string | null | undefined;
        relativePaths?: string[] | null | undefined;
        tags?: {
            description?: string | null | undefined;
            name: string;
        }[] | null | undefined;
        alias: string;
    }[] | null | undefined;
    storybook?: string | null | undefined;
    project?: string | null | undefined;
    ignorePatterns?: string[] | null | undefined;
    projectType?: "react" | "stencil" | "angular" | "vue" | null | undefined;
}>;
export type ParseParams = zod.infer<typeof ParseSchema>;
export declare const ParseDesignTokenSchema: zod.ZodObject<{
    designTokenGlobs: zod.ZodOptional<zod.ZodNullable<zod.ZodArray<zod.ZodString, "many">>>;
    project: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
    ignorePatterns: zod.ZodOptional<zod.ZodNullable<zod.ZodArray<zod.ZodString, "many">>>;
}, "strip", zod.ZodTypeAny, {
    project?: string | null | undefined;
    ignorePatterns?: string[] | null | undefined;
    designTokenGlobs?: string[] | null | undefined;
}, {
    project?: string | null | undefined;
    ignorePatterns?: string[] | null | undefined;
    designTokenGlobs?: string[] | null | undefined;
}>;
export type ParseDesignTokenParams = zod.infer<typeof ParseDesignTokenSchema>;
//# sourceMappingURL=parse.d.ts.map