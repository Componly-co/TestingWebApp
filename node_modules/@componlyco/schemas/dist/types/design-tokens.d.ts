import { z as zod } from "zod";
declare const TokenSchema: zod.ZodObject<{
    value: zod.ZodOptional<zod.ZodNullable<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>>;
    name: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
    comment: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
    themeable: zod.ZodOptional<zod.ZodNullable<zod.ZodBoolean>>;
    attributes: zod.ZodOptional<zod.ZodNullable<zod.ZodRecord<zod.ZodString, zod.ZodUnknown>>>;
    groups: zod.ZodOptional<zod.ZodNullable<zod.ZodArray<zod.ZodString, "many">>>;
}, "strip", zod.ZodTypeAny, {
    name?: string | null | undefined;
    value?: string | number | null | undefined;
    comment?: string | null | undefined;
    themeable?: boolean | null | undefined;
    attributes?: Record<string, unknown> | null | undefined;
    groups?: string[] | null | undefined;
}, {
    name?: string | null | undefined;
    value?: string | number | null | undefined;
    comment?: string | null | undefined;
    themeable?: boolean | null | undefined;
    attributes?: Record<string, unknown> | null | undefined;
    groups?: string[] | null | undefined;
}>;
type DesignToken = zod.infer<typeof TokenSchema>;
export type DesignTokens = {
    [key: string]: DesignToken | DesignTokens;
};
export declare const DesignTokensSchema: zod.ZodSchema<DesignTokens>;
export declare const DesignTokenGroups: {
    readonly Color: "color";
    readonly Spacing: "spacing";
    readonly Stroke: "stroke";
    readonly Opacity: "opacity";
    readonly Gradient: "gradient";
    readonly Typo: "typo";
    readonly Shadow: "shadow";
    readonly Elevation: "elevation";
};
export type DesignTokenGroups = (typeof DesignTokenGroups)[keyof typeof DesignTokenGroups];
export {};
//# sourceMappingURL=design-tokens.d.ts.map