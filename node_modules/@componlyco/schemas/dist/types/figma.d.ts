import { z } from 'zod';
export declare const FigmaStyleSchema: z.ZodObject<{
    id: z.ZodString;
    key: z.ZodString;
    name: z.ZodString;
    styleType: z.ZodString;
    remote: z.ZodBoolean;
    description: z.ZodOptional<z.ZodString>;
    count: z.ZodNumber;
    designSystem: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    description?: string | undefined;
    designSystem?: string | undefined;
    name: string;
    id: string;
    count: number;
    key: string;
    styleType: string;
    remote: boolean;
}, {
    description?: string | undefined;
    designSystem?: string | undefined;
    name: string;
    id: string;
    count: number;
    key: string;
    styleType: string;
    remote: boolean;
}>;
export type FigmaStyle = z.infer<typeof FigmaStyleSchema>;
export declare const FigmaUsageSchema: z.ZodObject<{
    node: z.ZodString;
    page: z.ZodString;
    frame: z.ZodString;
    link: z.ZodString;
}, "strip", z.ZodTypeAny, {
    node: string;
    page: string;
    frame: string;
    link: string;
}, {
    node: string;
    page: string;
    frame: string;
    link: string;
}>;
export type FigmaUsage = z.infer<typeof FigmaUsageSchema>;
export declare const FigmaPropSchema: z.ZodObject<{
    name: z.ZodString;
    count: z.ZodNumber;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: string;
    count: number;
}, {
    name: string;
    type: string;
    count: number;
}>;
export type FigmaProp = z.infer<typeof FigmaPropSchema>;
export declare const FigmaVariantSchema: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodUnion<[z.ZodString, z.ZodBoolean]>;
    count: z.ZodNumber;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: string;
    value: string | boolean;
    count: number;
}, {
    name: string;
    type: string;
    value: string | boolean;
    count: number;
}>;
export type FigmaVariant = z.infer<typeof FigmaVariantSchema>;
export declare const FigmaInstanceSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    count: z.ZodNumber;
    componentId: z.ZodNullable<z.ZodString>;
    props: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodString;
        count: z.ZodNumber;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        count: number;
    }, {
        name: string;
        type: string;
        count: number;
    }>>>;
    variants: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodString;
        value: z.ZodUnion<[z.ZodString, z.ZodBoolean]>;
        count: z.ZodNumber;
        type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: string;
        value: string | boolean;
        count: number;
    }, {
        name: string;
        type: string;
        value: string | boolean;
        count: number;
    }>>>;
    styles: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        key: z.ZodString;
        name: z.ZodString;
        styleType: z.ZodString;
        remote: z.ZodBoolean;
        description: z.ZodOptional<z.ZodString>;
        count: z.ZodNumber;
        designSystem: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }>>>;
    designSystem: z.ZodNullable<z.ZodString>;
    usage: z.ZodArray<z.ZodObject<{
        node: z.ZodString;
        page: z.ZodString;
        frame: z.ZodString;
        link: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        node: string;
        page: string;
        frame: string;
        link: string;
    }, {
        node: string;
        page: string;
        frame: string;
        link: string;
    }>, "many">;
    debt: z.ZodArray<z.ZodAny, "many">;
    frame: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    frame?: boolean | undefined;
    name: string;
    id: string;
    props: Record<string, {
        name: string;
        type: string;
        count: number;
    }> | null;
    count: number;
    designSystem: string | null;
    componentId: string | null;
    variants: Record<string, {
        name: string;
        type: string;
        value: string | boolean;
        count: number;
    }> | null;
    styles: Record<string, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }> | null;
    usage: {
        node: string;
        page: string;
        frame: string;
        link: string;
    }[];
    debt: any[];
}, {
    frame?: boolean | undefined;
    name: string;
    id: string;
    props: Record<string, {
        name: string;
        type: string;
        count: number;
    }> | null;
    count: number;
    designSystem: string | null;
    componentId: string | null;
    variants: Record<string, {
        name: string;
        type: string;
        value: string | boolean;
        count: number;
    }> | null;
    styles: Record<string, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }> | null;
    usage: {
        node: string;
        page: string;
        frame: string;
        link: string;
    }[];
    debt: any[];
}>;
export type FigmaInstance = z.infer<typeof FigmaInstanceSchema>;
export declare const FigmaDesignSystemSchema: z.ZodObject<{
    alias: z.ZodString;
}, "strip", z.ZodTypeAny, {
    alias: string;
}, {
    alias: string;
}>;
export type FigmaDesignSystem = z.infer<typeof FigmaDesignSystemSchema>;
export declare const FigmaDesignSystemComponentsSchema: z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    components: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        props: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            values: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            values?: string[] | undefined;
            name: string;
        }, {
            values?: string[] | undefined;
            name: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        props?: {
            values?: string[] | undefined;
            name: string;
        }[] | undefined;
        name: string;
    }, {
        props?: {
            values?: string[] | undefined;
            name: string;
        }[] | undefined;
        name: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    components: {
        props?: {
            values?: string[] | undefined;
            name: string;
        }[] | undefined;
        name: string;
    }[];
}, {
    name: string;
    components: {
        props?: {
            values?: string[] | undefined;
            name: string;
        }[] | undefined;
        name: string;
    }[];
}>, "many">;
export type FigmaDesignSystemComponents = z.infer<typeof FigmaDesignSystemComponentsSchema>;
export declare const FigmaScanSchema: z.ZodObject<{
    instances: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        count: z.ZodNumber;
        componentId: z.ZodNullable<z.ZodString>;
        props: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            count: number;
        }, {
            name: string;
            type: string;
            count: number;
        }>>>;
        variants: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodString;
            value: z.ZodUnion<[z.ZodString, z.ZodBoolean]>;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }>>>;
        styles: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
            id: z.ZodString;
            key: z.ZodString;
            name: z.ZodString;
            styleType: z.ZodString;
            remote: z.ZodBoolean;
            description: z.ZodOptional<z.ZodString>;
            count: z.ZodNumber;
            designSystem: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }>>>;
        designSystem: z.ZodNullable<z.ZodString>;
        usage: z.ZodArray<z.ZodObject<{
            node: z.ZodString;
            page: z.ZodString;
            frame: z.ZodString;
            link: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            node: string;
            page: string;
            frame: string;
            link: string;
        }, {
            node: string;
            page: string;
            frame: string;
            link: string;
        }>, "many">;
        debt: z.ZodArray<z.ZodAny, "many">;
        frame: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        frame?: boolean | undefined;
        name: string;
        id: string;
        props: Record<string, {
            name: string;
            type: string;
            count: number;
        }> | null;
        count: number;
        designSystem: string | null;
        componentId: string | null;
        variants: Record<string, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }> | null;
        styles: Record<string, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }> | null;
        usage: {
            node: string;
            page: string;
            frame: string;
            link: string;
        }[];
        debt: any[];
    }, {
        frame?: boolean | undefined;
        name: string;
        id: string;
        props: Record<string, {
            name: string;
            type: string;
            count: number;
        }> | null;
        count: number;
        designSystem: string | null;
        componentId: string | null;
        variants: Record<string, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }> | null;
        styles: Record<string, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }> | null;
        usage: {
            node: string;
            page: string;
            frame: string;
            link: string;
        }[];
        debt: any[];
    }>>;
    styles: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        key: z.ZodString;
        name: z.ZodString;
        styleType: z.ZodString;
        remote: z.ZodBoolean;
        description: z.ZodOptional<z.ZodString>;
        count: z.ZodNumber;
        designSystem: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }>>;
    designSystems: z.ZodArray<z.ZodObject<{
        alias: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        alias: string;
    }, {
        alias: string;
    }>, "many">;
    timestamp: z.ZodString;
    fileName: z.ZodString;
    fileKey: z.ZodString;
    dsComponents: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        components: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            props: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                values: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                values?: string[] | undefined;
                name: string;
            }, {
                values?: string[] | undefined;
                name: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }, {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        components: {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }[];
    }, {
        name: string;
        components: {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    designSystems: {
        alias: string;
    }[];
    styles: Record<string, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }>;
    instances: Record<string, {
        frame?: boolean | undefined;
        name: string;
        id: string;
        props: Record<string, {
            name: string;
            type: string;
            count: number;
        }> | null;
        count: number;
        designSystem: string | null;
        componentId: string | null;
        variants: Record<string, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }> | null;
        styles: Record<string, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }> | null;
        usage: {
            node: string;
            page: string;
            frame: string;
            link: string;
        }[];
        debt: any[];
    }>;
    timestamp: string;
    fileName: string;
    fileKey: string;
    dsComponents: {
        name: string;
        components: {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }[];
    }[];
}, {
    designSystems: {
        alias: string;
    }[];
    styles: Record<string, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }>;
    instances: Record<string, {
        frame?: boolean | undefined;
        name: string;
        id: string;
        props: Record<string, {
            name: string;
            type: string;
            count: number;
        }> | null;
        count: number;
        designSystem: string | null;
        componentId: string | null;
        variants: Record<string, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }> | null;
        styles: Record<string, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }> | null;
        usage: {
            node: string;
            page: string;
            frame: string;
            link: string;
        }[];
        debt: any[];
    }>;
    timestamp: string;
    fileName: string;
    fileKey: string;
    dsComponents: {
        name: string;
        components: {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }[];
    }[];
}>;
export type FigmaScan = z.infer<typeof FigmaScanSchema>;
export declare const FigmaScansSchema: z.ZodArray<z.ZodObject<{
    instances: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        count: z.ZodNumber;
        componentId: z.ZodNullable<z.ZodString>;
        props: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodString;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            count: number;
        }, {
            name: string;
            type: string;
            count: number;
        }>>>;
        variants: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
            name: z.ZodString;
            value: z.ZodUnion<[z.ZodString, z.ZodBoolean]>;
            count: z.ZodNumber;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }>>>;
        styles: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodObject<{
            id: z.ZodString;
            key: z.ZodString;
            name: z.ZodString;
            styleType: z.ZodString;
            remote: z.ZodBoolean;
            description: z.ZodOptional<z.ZodString>;
            count: z.ZodNumber;
            designSystem: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }>>>;
        designSystem: z.ZodNullable<z.ZodString>;
        usage: z.ZodArray<z.ZodObject<{
            node: z.ZodString;
            page: z.ZodString;
            frame: z.ZodString;
            link: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            node: string;
            page: string;
            frame: string;
            link: string;
        }, {
            node: string;
            page: string;
            frame: string;
            link: string;
        }>, "many">;
        debt: z.ZodArray<z.ZodAny, "many">;
        frame: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        frame?: boolean | undefined;
        name: string;
        id: string;
        props: Record<string, {
            name: string;
            type: string;
            count: number;
        }> | null;
        count: number;
        designSystem: string | null;
        componentId: string | null;
        variants: Record<string, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }> | null;
        styles: Record<string, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }> | null;
        usage: {
            node: string;
            page: string;
            frame: string;
            link: string;
        }[];
        debt: any[];
    }, {
        frame?: boolean | undefined;
        name: string;
        id: string;
        props: Record<string, {
            name: string;
            type: string;
            count: number;
        }> | null;
        count: number;
        designSystem: string | null;
        componentId: string | null;
        variants: Record<string, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }> | null;
        styles: Record<string, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }> | null;
        usage: {
            node: string;
            page: string;
            frame: string;
            link: string;
        }[];
        debt: any[];
    }>>;
    styles: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        key: z.ZodString;
        name: z.ZodString;
        styleType: z.ZodString;
        remote: z.ZodBoolean;
        description: z.ZodOptional<z.ZodString>;
        count: z.ZodNumber;
        designSystem: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }>>;
    designSystems: z.ZodArray<z.ZodObject<{
        alias: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        alias: string;
    }, {
        alias: string;
    }>, "many">;
    timestamp: z.ZodString;
    fileName: z.ZodString;
    fileKey: z.ZodString;
    dsComponents: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        components: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            props: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                values: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                values?: string[] | undefined;
                name: string;
            }, {
                values?: string[] | undefined;
                name: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }, {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        name: string;
        components: {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }[];
    }, {
        name: string;
        components: {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    designSystems: {
        alias: string;
    }[];
    styles: Record<string, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }>;
    instances: Record<string, {
        frame?: boolean | undefined;
        name: string;
        id: string;
        props: Record<string, {
            name: string;
            type: string;
            count: number;
        }> | null;
        count: number;
        designSystem: string | null;
        componentId: string | null;
        variants: Record<string, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }> | null;
        styles: Record<string, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }> | null;
        usage: {
            node: string;
            page: string;
            frame: string;
            link: string;
        }[];
        debt: any[];
    }>;
    timestamp: string;
    fileName: string;
    fileKey: string;
    dsComponents: {
        name: string;
        components: {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }[];
    }[];
}, {
    designSystems: {
        alias: string;
    }[];
    styles: Record<string, {
        description?: string | undefined;
        designSystem?: string | undefined;
        name: string;
        id: string;
        count: number;
        key: string;
        styleType: string;
        remote: boolean;
    }>;
    instances: Record<string, {
        frame?: boolean | undefined;
        name: string;
        id: string;
        props: Record<string, {
            name: string;
            type: string;
            count: number;
        }> | null;
        count: number;
        designSystem: string | null;
        componentId: string | null;
        variants: Record<string, {
            name: string;
            type: string;
            value: string | boolean;
            count: number;
        }> | null;
        styles: Record<string, {
            description?: string | undefined;
            designSystem?: string | undefined;
            name: string;
            id: string;
            count: number;
            key: string;
            styleType: string;
            remote: boolean;
        }> | null;
        usage: {
            node: string;
            page: string;
            frame: string;
            link: string;
        }[];
        debt: any[];
    }>;
    timestamp: string;
    fileName: string;
    fileKey: string;
    dsComponents: {
        name: string;
        components: {
            props?: {
                values?: string[] | undefined;
                name: string;
            }[] | undefined;
            name: string;
        }[];
    }[];
}>, "many">;
export type FigmaScans = z.infer<typeof FigmaScansSchema>;
//# sourceMappingURL=figma.d.ts.map