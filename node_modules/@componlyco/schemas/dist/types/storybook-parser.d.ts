import { z as zod } from "zod";
declare const StoryPreviewSchema: zod.ZodObject<{
    id: zod.ZodString;
    name: zod.ZodString;
    title: zod.ZodString;
    importPath: zod.ZodString;
    kind: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
    story: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
    parameters: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{
        fileName: zod.ZodString;
        docsOnly: zod.ZodOptional<zod.ZodNullable<zod.ZodBoolean>>;
        framework: zod.ZodString;
        __id: zod.ZodString;
        __isArgsStory: zod.ZodBoolean;
    }, "strip", zod.ZodTypeAny, {
        docsOnly?: boolean | null | undefined;
        framework: string;
        fileName: string;
        __id: string;
        __isArgsStory: boolean;
    }, {
        docsOnly?: boolean | null | undefined;
        framework: string;
        fileName: string;
        __id: string;
        __isArgsStory: boolean;
    }>>>;
}, "strip", zod.ZodTypeAny, {
    kind?: string | null | undefined;
    story?: string | null | undefined;
    parameters?: {
        docsOnly?: boolean | null | undefined;
        framework: string;
        fileName: string;
        __id: string;
        __isArgsStory: boolean;
    } | null | undefined;
    name: string;
    id: string;
    title: string;
    importPath: string;
}, {
    kind?: string | null | undefined;
    story?: string | null | undefined;
    parameters?: {
        docsOnly?: boolean | null | undefined;
        framework: string;
        fileName: string;
        __id: string;
        __isArgsStory: boolean;
    } | null | undefined;
    name: string;
    id: string;
    title: string;
    importPath: string;
}>;
export type StoryPreview = zod.infer<typeof StoryPreviewSchema>;
declare const StoryJSONSchema: zod.ZodObject<{
    v: zod.ZodNumber;
    stories: zod.ZodRecord<zod.ZodString, zod.ZodObject<{
        id: zod.ZodString;
        name: zod.ZodString;
        title: zod.ZodString;
        importPath: zod.ZodString;
        kind: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
        story: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
        parameters: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{
            fileName: zod.ZodString;
            docsOnly: zod.ZodOptional<zod.ZodNullable<zod.ZodBoolean>>;
            framework: zod.ZodString;
            __id: zod.ZodString;
            __isArgsStory: zod.ZodBoolean;
        }, "strip", zod.ZodTypeAny, {
            docsOnly?: boolean | null | undefined;
            framework: string;
            fileName: string;
            __id: string;
            __isArgsStory: boolean;
        }, {
            docsOnly?: boolean | null | undefined;
            framework: string;
            fileName: string;
            __id: string;
            __isArgsStory: boolean;
        }>>>;
    }, "strip", zod.ZodTypeAny, {
        kind?: string | null | undefined;
        story?: string | null | undefined;
        parameters?: {
            docsOnly?: boolean | null | undefined;
            framework: string;
            fileName: string;
            __id: string;
            __isArgsStory: boolean;
        } | null | undefined;
        name: string;
        id: string;
        title: string;
        importPath: string;
    }, {
        kind?: string | null | undefined;
        story?: string | null | undefined;
        parameters?: {
            docsOnly?: boolean | null | undefined;
            framework: string;
            fileName: string;
            __id: string;
            __isArgsStory: boolean;
        } | null | undefined;
        name: string;
        id: string;
        title: string;
        importPath: string;
    }>>;
}, "strip", zod.ZodTypeAny, {
    stories: Record<string, {
        kind?: string | null | undefined;
        story?: string | null | undefined;
        parameters?: {
            docsOnly?: boolean | null | undefined;
            framework: string;
            fileName: string;
            __id: string;
            __isArgsStory: boolean;
        } | null | undefined;
        name: string;
        id: string;
        title: string;
        importPath: string;
    }>;
    v: number;
}, {
    stories: Record<string, {
        kind?: string | null | undefined;
        story?: string | null | undefined;
        parameters?: {
            docsOnly?: boolean | null | undefined;
            framework: string;
            fileName: string;
            __id: string;
            __isArgsStory: boolean;
        } | null | undefined;
        name: string;
        id: string;
        title: string;
        importPath: string;
    }>;
    v: number;
}>;
export type StoryJSON = zod.infer<typeof StoryJSONSchema>;
export declare const StoryURLOutputSchema: zod.ZodObject<{
    urls: zod.ZodOptional<zod.ZodNullable<zod.ZodRecord<zod.ZodString, zod.ZodArray<zod.ZodString, "many">>>>;
    meta: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{
        v: zod.ZodNumber;
        stories: zod.ZodRecord<zod.ZodString, zod.ZodObject<{
            id: zod.ZodString;
            name: zod.ZodString;
            title: zod.ZodString;
            importPath: zod.ZodString;
            kind: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
            story: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
            parameters: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{
                fileName: zod.ZodString;
                docsOnly: zod.ZodOptional<zod.ZodNullable<zod.ZodBoolean>>;
                framework: zod.ZodString;
                __id: zod.ZodString;
                __isArgsStory: zod.ZodBoolean;
            }, "strip", zod.ZodTypeAny, {
                docsOnly?: boolean | null | undefined;
                framework: string;
                fileName: string;
                __id: string;
                __isArgsStory: boolean;
            }, {
                docsOnly?: boolean | null | undefined;
                framework: string;
                fileName: string;
                __id: string;
                __isArgsStory: boolean;
            }>>>;
        }, "strip", zod.ZodTypeAny, {
            kind?: string | null | undefined;
            story?: string | null | undefined;
            parameters?: {
                docsOnly?: boolean | null | undefined;
                framework: string;
                fileName: string;
                __id: string;
                __isArgsStory: boolean;
            } | null | undefined;
            name: string;
            id: string;
            title: string;
            importPath: string;
        }, {
            kind?: string | null | undefined;
            story?: string | null | undefined;
            parameters?: {
                docsOnly?: boolean | null | undefined;
                framework: string;
                fileName: string;
                __id: string;
                __isArgsStory: boolean;
            } | null | undefined;
            name: string;
            id: string;
            title: string;
            importPath: string;
        }>>;
    }, "strip", zod.ZodTypeAny, {
        stories: Record<string, {
            kind?: string | null | undefined;
            story?: string | null | undefined;
            parameters?: {
                docsOnly?: boolean | null | undefined;
                framework: string;
                fileName: string;
                __id: string;
                __isArgsStory: boolean;
            } | null | undefined;
            name: string;
            id: string;
            title: string;
            importPath: string;
        }>;
        v: number;
    }, {
        stories: Record<string, {
            kind?: string | null | undefined;
            story?: string | null | undefined;
            parameters?: {
                docsOnly?: boolean | null | undefined;
                framework: string;
                fileName: string;
                __id: string;
                __isArgsStory: boolean;
            } | null | undefined;
            name: string;
            id: string;
            title: string;
            importPath: string;
        }>;
        v: number;
    }>>>;
}, "strip", zod.ZodTypeAny, {
    urls?: Record<string, string[]> | null | undefined;
    meta?: {
        stories: Record<string, {
            kind?: string | null | undefined;
            story?: string | null | undefined;
            parameters?: {
                docsOnly?: boolean | null | undefined;
                framework: string;
                fileName: string;
                __id: string;
                __isArgsStory: boolean;
            } | null | undefined;
            name: string;
            id: string;
            title: string;
            importPath: string;
        }>;
        v: number;
    } | null | undefined;
}, {
    urls?: Record<string, string[]> | null | undefined;
    meta?: {
        stories: Record<string, {
            kind?: string | null | undefined;
            story?: string | null | undefined;
            parameters?: {
                docsOnly?: boolean | null | undefined;
                framework: string;
                fileName: string;
                __id: string;
                __isArgsStory: boolean;
            } | null | undefined;
            name: string;
            id: string;
            title: string;
            importPath: string;
        }>;
        v: number;
    } | null | undefined;
}>;
export type StoryURLOutput = zod.infer<typeof StoryURLOutputSchema>;
export {};
//# sourceMappingURL=storybook-parser.d.ts.map