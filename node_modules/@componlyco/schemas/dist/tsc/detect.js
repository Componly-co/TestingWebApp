"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DetectorOutputSchema = exports.LanguageCategories = exports.DetectSchema = void 0;
const zod_1 = require("zod");
exports.DetectSchema = zod_1.z.object({
    storybook: zod_1.z.string().nullish(),
    project: zod_1.z.string().nullish(),
    ignorePatterns: zod_1.z.array(zod_1.z.string()).nullish(),
});
exports.LanguageCategories = {
    Data: "data",
    Markup: "markup",
    Programming: "programming",
    Prose: "prose",
};
const MetaFrameworkSchema = zod_1.z.object({
    name: zod_1.z.string(),
    packageName: zod_1.z.string(),
    version: zod_1.z.string(),
});
const FrameworkSchema = zod_1.z.object({
    name: zod_1.z.string(),
    options: zod_1.z.unknown().nullish(),
});
const MonorepoSchema = zod_1.z.union([
    zod_1.z.literal("Nx"),
    zod_1.z.literal("Turborepo"),
    zod_1.z.literal("Lerna"),
    zod_1.z.literal("Rush"),
    zod_1.z.literal("Lage"),
    zod_1.z.literal("Workspaces"),
]);
const PackageManagerSchema = zod_1.z.object({
    type: zod_1.z.union([zod_1.z.literal("npm"), zod_1.z.literal("yarn"), zod_1.z.literal("pnpm")]),
    version: zod_1.z.string(),
});
const TypescriptOptionsSchema = zod_1.z.object({
    check: zod_1.z.boolean(),
    skipBabel: zod_1.z.boolean(),
});
const DependencySchema = zod_1.z.object({
    version: zod_1.z.string().nullish(),
    versionSpecifier: zod_1.z.string().nullish(),
});
const StorybookAddonSchema = DependencySchema.extend({
    options: zod_1.z.unknown(),
});
const StorybookConfigFeatureSchema = zod_1.z.object({
    buildStoriesJson: zod_1.z.boolean().nullish(),
    storyStoreV7: zod_1.z.boolean().nullish(),
    storyStoreV7MdxErrors: zod_1.z.boolean().nullish(),
    argTypeTargetsV7: zod_1.z.boolean().nullish(),
    warnOnLegacyHierarchySeparator: zod_1.z.boolean().nullish(),
    legacyMdx1: zod_1.z.boolean().nullish(),
    legacyDecoratorFileOrder: zod_1.z.boolean().nullish(),
});
const StorybookMetaDataSchema = zod_1.z.object({
    storybookVersion: zod_1.z.string().nullish(),
    storybookVersionSpecifier: zod_1.z.string(),
    generatedAt: zod_1.z.number().nullish(),
    builder: zod_1.z.string().nullish(),
    renderer: zod_1.z.string().nullish(),
    hasStorybookEslint: zod_1.z.boolean().nullish(),
    hasStaticDirs: zod_1.z.boolean().nullish(),
    hasCustomWebpack: zod_1.z.boolean().nullish(),
    hasCustomBabel: zod_1.z.boolean().nullish(),
    refCount: zod_1.z.number().nullish(),
    language: zod_1.z.union([zod_1.z.literal("typescript"), zod_1.z.literal("javascript")]),
    metaFramework: MetaFrameworkSchema.nullish(),
    framework: FrameworkSchema.nullish(),
    monorepo: MonorepoSchema.nullish(),
    packageManager: PackageManagerSchema.nullish(),
    typescriptOptions: TypescriptOptionsSchema.partial().nullish(),
    addons: zod_1.z.record(StorybookAddonSchema).nullish(),
    storybookPackages: zod_1.z.record(DependencySchema).nullish(),
    features: StorybookConfigFeatureSchema.nullish(),
});
const LanguageResultsSchema = zod_1.z.object({
    files: zod_1.z.object({
        count: zod_1.z.number().int(),
        bytes: zod_1.z.number().int(),
        results: zod_1.z.record(zod_1.z.string().nullish()),
    }),
    languages: zod_1.z.object({
        count: zod_1.z.number().int(),
        bytes: zod_1.z.number().int(),
        results: zod_1.z.record(zod_1.z.object({
            bytes: zod_1.z.number(),
            type: zod_1.z.nativeEnum(exports.LanguageCategories),
            parent: zod_1.z.string().nullish(),
            color: zod_1.z.string().nullish(),
        })),
    }),
    unknown: zod_1.z.object({
        count: zod_1.z.number().int(),
        bytes: zod_1.z.number().int(),
        extensions: zod_1.z.record(zod_1.z.number().int()),
        filenames: zod_1.z.record(zod_1.z.number().int()),
    }),
});
exports.DetectorOutputSchema = zod_1.z.object({
    storybookMeta: StorybookMetaDataSchema.nullish(),
    languages: LanguageResultsSchema.nullish(),
    uiDependencies: zod_1.z.array(zod_1.z.string()).nullish(),
});
