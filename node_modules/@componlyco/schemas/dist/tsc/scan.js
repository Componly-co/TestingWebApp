"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScannerOutputSchema = exports.ScanSchema = void 0;
const zod_1 = require("zod");
const component_parser_1 = require("./component-parser");
const design_tokens_1 = require("./design-tokens");
const detect_1 = require("./detect");
const parse_1 = require("./parse");
const storybook_parser_1 = require("./storybook-parser");
exports.ScanSchema = detect_1.DetectSchema.extend(parse_1.ParseSchema.shape).extend(parse_1.ParseDesignTokenSchema.shape).extend({
    output: zod_1.z.string().nullish(),
    url: zod_1.z.string().nullish(),
    storybookBuild: zod_1.z.string().nullish(),
    clientName: zod_1.z.string().nullish(),
    staticDomain: zod_1.z.string().nullish(),
    projectID: zod_1.z.string().nullish(),
    codebaseID: zod_1.z.string().nullish(),
    cliId: zod_1.z.string().nullish(),
    cliPassword: zod_1.z.string().nullish(),
    extract: zod_1.z.boolean().default(false)
});
exports.ScannerOutputSchema = zod_1.z.object({
    timestamp: zod_1.z.string().nullish(),
    projectID: zod_1.z.string().nullish(),
    codebaseID: zod_1.z.string().nullish(),
    userID: zod_1.z.union([zod_1.z.number(), zod_1.z.string()]).nullish(),
    detect: detect_1.DetectorOutputSchema,
    parse: component_parser_1.ParserOutputSchema.nullish(),
    stories: storybook_parser_1.StoryURLOutputSchema.nullish(),
    designTokens: zod_1.z.record(zod_1.z.string(), zod_1.z.array(design_tokens_1.DesignTokensSchema)),
    designSystems: zod_1.z.array(component_parser_1.DesignSystemSchema).nullish(),
});
