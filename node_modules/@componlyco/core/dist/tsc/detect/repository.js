"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRelativePathToRoot = exports.getRootFromGitDir = exports.getActiveBranch = exports.getProjectNameFromPackageJson = exports.findClosestPackageJson = exports.findClosestGitFolder = exports.extractOwnerAndNameFromURL = exports.parseGitConfig = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
function parseGitConfig(gitConfigPath) {
    if (gitConfigPath === void 0) { gitConfigPath = '.git/config'; }
    return new Promise(function (resolve, reject) {
        fs_1.default.readFile(gitConfigPath, 'utf8', function (err, data) {
            var e_1, _a;
            if (err) {
                reject("Error reading Git config file: ".concat(err.message));
                return;
            }
            var lines = data.split('\n');
            var config = {};
            var currentSection = null;
            try {
                for (var lines_1 = __values(lines), lines_1_1 = lines_1.next(); !lines_1_1.done; lines_1_1 = lines_1.next()) {
                    var line = lines_1_1.value;
                    var trimmedLine = line.trim();
                    if (trimmedLine === '' || trimmedLine.startsWith('#')) {
                        continue;
                    }
                    if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']')) {
                        currentSection = trimmedLine.slice(1, -1);
                        config[currentSection] = {};
                    }
                    else {
                        var _b = __read(trimmedLine.split('=').map(function (item) { return item.trim(); }), 2), key = _b[0], value = _b[1];
                        if (currentSection && key && value) {
                            config[currentSection][key] = value;
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (lines_1_1 && !lines_1_1.done && (_a = lines_1.return)) _a.call(lines_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            resolve(config);
        });
    });
}
exports.parseGitConfig = parseGitConfig;
function extractOwnerAndNameFromURL(url) {
    try {
        var parsedURL = new URL(url);
        var pathnameParts = parsedURL.pathname.split('/').filter(function (part) { return part !== ''; });
        if (pathnameParts.length >= 2) {
            var owner = pathnameParts[0];
            var repoName = pathnameParts[1].split('.')[0];
            return [owner, repoName];
        }
        else {
            return [null, null];
        }
    }
    catch (error) {
        return [null, null];
    }
}
exports.extractOwnerAndNameFromURL = extractOwnerAndNameFromURL;
function findClosestGitFolder(startDir) {
    if (startDir === void 0) { startDir = process.cwd(); }
    var currentDir = startDir;
    while (currentDir !== '/') {
        var gitDir = path_1.default.join(currentDir, '.git');
        try {
            if (fs_1.default.existsSync(gitDir) && fs_1.default.statSync(gitDir).isDirectory()) {
                return gitDir;
            }
        }
        catch (error) {
            console.error("Error checking ".concat(gitDir, ": ").concat(error.message));
        }
        currentDir = path_1.default.dirname(currentDir);
    }
    return null;
}
exports.findClosestGitFolder = findClosestGitFolder;
function findClosestPackageJson(startDir) {
    if (startDir === void 0) { startDir = process.cwd(); }
    var currentDir = startDir;
    while (currentDir !== path_1.default.parse(currentDir).root) {
        var packageJsonPath = path_1.default.join(currentDir, 'package.json');
        try {
            if (fs_1.default.existsSync(packageJsonPath) && fs_1.default.statSync(packageJsonPath).isFile()) {
                return packageJsonPath;
            }
        }
        catch (error) {
            console.error("Error checking ".concat(packageJsonPath, ": ").concat(error.message));
        }
        currentDir = path_1.default.dirname(currentDir);
    }
    return null;
}
exports.findClosestPackageJson = findClosestPackageJson;
function getProjectNameFromPackageJson(startDir) {
    if (startDir === void 0) { startDir = process.cwd(); }
    var packageJsonPath = findClosestPackageJson(startDir);
    if (!packageJsonPath) {
        throw new Error('package.json path is required');
    }
    try {
        var packageJsonContent = fs_1.default.readFileSync(packageJsonPath, 'utf-8');
        var packageJson = JSON.parse(packageJsonContent);
        if (packageJson && packageJson.name) {
            return packageJson.name;
        }
        else {
            throw new Error('Name field not found in package.json');
        }
    }
    catch (error) {
        console.error("Error reading or parsing ".concat(packageJsonPath, ": ").concat(error.message));
        return null;
    }
}
exports.getProjectNameFromPackageJson = getProjectNameFromPackageJson;
function getActiveBranch(gitDir) {
    var headFilePath = path_1.default.join(gitDir, 'HEAD');
    try {
        var headContent = fs_1.default.readFileSync(headFilePath, 'utf-8').trim();
        if (headContent.startsWith('ref:')) {
            var branchName = headContent.replace('ref: refs/heads/', '');
            return branchName;
        }
        else {
            return 'Detached HEAD';
        }
    }
    catch (error) {
        console.error("Error reading ".concat(headFilePath, ": ").concat(error.message));
        return null;
    }
}
exports.getActiveBranch = getActiveBranch;
function getRootFromGitDir(gitDir) {
    var currentDir = path_1.default.dirname(gitDir);
    while (currentDir !== '/') {
        if (path_1.default.dirname(gitDir) === currentDir) {
            return currentDir;
        }
        currentDir = path_1.default.dirname(currentDir);
    }
    return null;
}
exports.getRootFromGitDir = getRootFromGitDir;
function getRelativePathToRoot(subprojectDir) {
    if (subprojectDir === void 0) { subprojectDir = process.cwd(); }
    var closestGitDir = findClosestGitFolder(subprojectDir);
    if (closestGitDir) {
        var rootDirectory = getRootFromGitDir(closestGitDir);
        if (rootDirectory) {
            return path_1.default.relative(rootDirectory, subprojectDir).replace(/\\/g, '/');
        }
        else {
            return null;
        }
    }
    else {
        console.error("No .git folder found for ".concat(subprojectDir, "."));
        return null;
    }
}
exports.getRelativePathToRoot = getRelativePathToRoot;
