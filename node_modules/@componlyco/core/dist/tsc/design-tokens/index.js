"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDesignTokensJSON = exports.getInitializerDictionary = void 0;
var promises_1 = require("fs/promises");
var path_1 = require("path");
var schemas_1 = require("@componlyco/schemas");
var minimatch_1 = require("minimatch");
var postcss_1 = require("postcss");
var ts_morph_1 = require("ts-morph");
var project_1 = require("../parse/react/utils/project");
var utils_1 = require("../utils");
var utils_2 = require("./utils");
function convertCSSToJS(childNode) {
    var _a, _b, _c;
    var output = {};
    switch (childNode.type) {
        case "atrule":
            output = (_a = {},
                _a[childNode.name] = childNode.nodes.reduce(function (acc, ele) { return (__assign(__assign({}, acc), convertCSSToJS(ele))); }, {}),
                _a);
            break;
        case "rule":
            output = (_b = {},
                _b[childNode.selector] = childNode.nodes.reduce(function (acc, ele) { return (__assign(__assign({}, acc), convertCSSToJS(ele))); }, {}),
                _b);
            break;
        case "decl":
            {
                var prop = childNode.prop, value = childNode.value;
                output = (_c = {},
                    _c[prop] = { value: value },
                    _c);
            }
            break;
        default:
            break;
    }
    return output;
}
function getInitializerDictionary(object) {
    var propertyAssignments = object
        .getProperties()
        .filter(function (ele) { return ele instanceof ts_morph_1.PropertyAssignment; });
    var extractedObject = propertyAssignments.reduce(function (acc, property) {
        var _a;
        var output = acc;
        var initializer = property.getInitializer();
        if (initializer !== undefined) {
            var propetyName = property.getName();
            output = __assign(__assign({}, acc), (_a = {}, _a[propetyName] = initializer, _a));
        }
        return output;
    }, {});
    return extractedObject;
}
exports.getInitializerDictionary = getInitializerDictionary;
function getLiteralValues(initializer) {
    var result;
    if (initializer instanceof ts_morph_1.ArrayLiteralExpression) {
        result = initializer.getElements().map(function (ele) { return getLiteralValues(ele); });
    }
    else if (initializer instanceof ts_morph_1.ObjectLiteralExpression) {
        var initializerDict = getInitializerDictionary(initializer);
        result = Object.entries(initializerDict).reduce(function (acc, _a) {
            var _b;
            var _c = __read(_a, 2), prop = _c[0], init = _c[1];
            return (__assign(__assign({}, acc), (_b = {}, _b[prop] = getLiteralValues(init), _b)));
        }, {});
    }
    else if (initializer instanceof ts_morph_1.TrueLiteral ||
        initializer instanceof ts_morph_1.FalseLiteral ||
        initializer instanceof ts_morph_1.NumericLiteral ||
        initializer instanceof ts_morph_1.StringLiteral ||
        initializer instanceof ts_morph_1.NoSubstitutionTemplateLiteral) {
        result = initializer.getLiteralValue();
    }
    else {
        result = initializer.getText();
    }
    return result;
}
function getObjectsFromFile(path) {
    var output = [];
    var project = new ts_morph_1.Project({
        compilerOptions: {
            target: ts_morph_1.ScriptTarget.Latest,
        },
    });
    var sourceFile = project.addSourceFileAtPathIfExists(path);
    if (sourceFile instanceof ts_morph_1.SourceFile) {
        var objectNodes = sourceFile
            .getDescendantsOfKind(ts_morph_1.SyntaxKind.ObjectLiteralExpression)
            .filter(function (ele) { return ele.getParent() instanceof ts_morph_1.PropertyAssignment === false; });
        var initializerDictArray = objectNodes.map(getInitializerDictionary);
        output = initializerDictArray.map(function (initializerDict) {
            return Object.entries(initializerDict).reduce(function (acc, _a) {
                var _b;
                var _c = __read(_a, 2), prop = _c[0], init = _c[1];
                return (__assign(__assign({}, acc), (_b = {}, _b[prop] = getLiteralValues(init), _b)));
            }, {});
        });
    }
    return output;
}
function getDesignTokens(file, projectPath) {
    return __awaiter(this, void 0, void 0, function () {
        var tokens, extension, _a, jsonData, fileData, parsedCSS, promises, parsedData, relativePath, parsedTokens;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    tokens = [];
                    extension = (0, path_1.extname)(file);
                    _a = extension;
                    switch (_a) {
                        case ".json": return [3, 1];
                        case ".js": return [3, 3];
                        case ".ts": return [3, 3];
                        case ".css": return [3, 4];
                    }
                    return [3, 6];
                case 1: return [4, (0, promises_1.readFile)(file, "utf-8")];
                case 2:
                    jsonData = _c.sent();
                    tokens = [JSON.parse(jsonData)];
                    return [3, 7];
                case 3:
                    tokens = getObjectsFromFile(file);
                    return [3, 7];
                case 4: return [4, (0, promises_1.readFile)(file, "utf-8")];
                case 5:
                    fileData = _c.sent();
                    parsedCSS = (0, postcss_1.parse)(fileData);
                    tokens = parsedCSS.nodes.map(convertCSSToJS);
                    return [3, 7];
                case 6: return [3, 7];
                case 7:
                    promises = tokens.map(function (ele) { return schemas_1.DesignTokensSchema.safeParseAsync(ele); });
                    return [4, Promise.all(promises)];
                case 8:
                    parsedData = _c.sent();
                    relativePath = (0, utils_1.getRelativePath)(projectPath, file);
                    parsedTokens = parsedData.reduce(function (acc, data) {
                        var output = acc;
                        if (data.success === true) {
                            var paths = (0, utils_2.getAllPaths)(data.data);
                            var categorizedDesignToken = (0, utils_2.categorizeDesignToken)(data.data, paths);
                            output = __spreadArray(__spreadArray([], __read(acc), false), [categorizedDesignToken], false);
                        }
                        return output;
                    }, []);
                    return [2, (_b = {}, _b[relativePath] = parsedTokens, _b)];
            }
        });
    });
}
function parseDesignTokensJSON(_a) {
    var designTokenGlobs = _a.designTokenGlobs, project = _a.project, ignorePatterns = _a.ignorePatterns;
    return __awaiter(this, void 0, void 0, function () {
        var designTokenDict, projectPath_1, files, designTokenFiles, designTokenPromises, designTokens;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    designTokenDict = {};
                    if (!Array.isArray(designTokenGlobs)) return [3, 3];
                    projectPath_1 = project !== null && project !== void 0 ? project : (0, path_1.join)(process.cwd(), "src");
                    return [4, (0, project_1.readFileNames)(projectPath_1, ignorePatterns)];
                case 1:
                    files = _b.sent();
                    designTokenFiles = files.filter(function (file) { return designTokenGlobs.some(function (glob) { return (0, minimatch_1.minimatch)(file, glob); }); });
                    designTokenPromises = designTokenFiles.map(function (file) { return getDesignTokens(file, projectPath_1); });
                    return [4, Promise.all(designTokenPromises)];
                case 2:
                    designTokens = _b.sent();
                    designTokenDict = designTokens.reduce(function (acc, obj) { return (__assign(__assign({}, acc), obj)); }, {});
                    _b.label = 3;
                case 3: return [2, designTokenDict];
            }
        });
    });
}
exports.parseDesignTokensJSON = parseDesignTokensJSON;
