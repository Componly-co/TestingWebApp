"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.categorizeDesignToken = exports.getAllPaths = exports.getGroups = void 0;
var color_string_1 = require("color-string");
var lodash_1 = require("lodash");
function isColor(input) {
    var color = (0, color_string_1.get)(input);
    return color !== null;
}
function isSpacing(path) {
    var spacingTypes = ["margin", "padding", "gap", "spacing"];
    return spacingTypes.some(function (type) { return path.includes(type); });
}
function isStroke(path) {
    var result = path.includes("border") || path.includes("outline");
    return result;
}
function isOpacity(path) {
    return path.includes("opacity");
}
function isGradient(input) {
    return input.includes("-gradient");
}
function isTypo(path) {
    return path.includes("font");
}
function isShadow(path) {
    var shadowTypes = ["box-shadow", "text-shadow", "drop-shadow"];
    return shadowTypes.some(function (type) { return path.includes(type) || path.includes((0, lodash_1.camelCase)(type)); });
}
function isElevation(path) {
    return path.includes("z-index") || path.includes((0, lodash_1.camelCase)("z-index"));
}
function getGroups(path, input) {
    var groups = [];
    if (input && isColor(input.toString()) === true) {
        groups.push("color");
    }
    if (isSpacing(path) === true) {
        groups.push("spacing");
    }
    if (isStroke(path) === true) {
        groups.push("stroke");
    }
    if (isOpacity(path) === true) {
        groups.push("opacity");
    }
    if (input && isGradient(input.toString()) === true) {
        groups.push("gradient");
    }
    if (isTypo(path) === true) {
        groups.push("typo");
    }
    if (isShadow(path) === true) {
        groups.push("shadow");
    }
    if (isElevation(path) === true) {
        groups.push("elevation");
    }
    return groups;
}
exports.getGroups = getGroups;
function getAllPaths(designToken, path) {
    var paths = [];
    Object.keys(designToken).forEach(function (key) {
        var updatedPath = typeof path === "string" ? "".concat(path, ".").concat(key) : key;
        if (typeof designToken[key] === "object") {
            paths = __spreadArray(__spreadArray([], __read(paths), false), __read(getAllPaths(designToken[key], updatedPath)), false);
        }
        else {
            paths = __spreadArray(__spreadArray([], __read(paths), false), [updatedPath], false);
        }
    });
    return paths;
}
exports.getAllPaths = getAllPaths;
function categorizeDesignToken(designToken, paths) {
    var updatedDesignToken = __assign({}, designToken);
    paths.forEach(function (path) {
        var value = (0, lodash_1.get)(designToken, "".concat(path));
        var groups = getGroups(path, value);
        updatedDesignToken = (0, lodash_1.set)(updatedDesignToken, path.slice(0, -6), { value: value, groups: groups });
    });
    return updatedDesignToken;
}
exports.categorizeDesignToken = categorizeDesignToken;
