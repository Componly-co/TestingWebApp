"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSelfDeclaredComponents = void 0;
var lodash_1 = require("lodash");
var count_1 = require("../utils/count");
var design_system_1 = require("../utils/design-system");
var functions_classes_1 = require("../utils/functions-classes");
var import_declarations_1 = require("../utils/import-declarations");
var js_docs_1 = require("../utils/js-docs");
var location_1 = require("../utils/location");
var names_1 = require("../utils/names");
var stories_1 = require("../utils/stories");
var imported_1 = require("./imported");
var ts_morph_1 = require("ts-morph");
var utils_1 = require("../utils/utils");
function getOverrides(_a) {
    var component = _a.component, designSystems = _a.designSystems, projectPath = _a.projectPath, importedStencilComponentDictionary = _a.importedStencilComponentDictionary, dependencies = _a.dependencies;
    var sourceFile = component.getSourceFile();
    var currentFilePath = (0, names_1.getPathRelativeToRoot)(sourceFile, projectPath);
    var imports = sourceFile.getImportDeclarations();
    var importedDesignSystemComponentDictionary = imports
        .filter(function (ele) {
        return ((0, design_system_1.findDesignSystems)({
            input: ele,
            designSystems: designSystems,
        }).length > 0);
    })
        .map(function (ele) {
        return (0, imported_1.getImportedJSXComponents)({ importDeclaration: ele, designSystems: designSystems, projectPath: projectPath, dependencies: dependencies });
    })
        .flat()
        .reduce(function (acc, ele) {
        var _a;
        return (__assign(__assign({}, acc), (_a = {}, _a[ele.name] = ele, _a)));
    }, {});
    var aliasDict = imports.reduce(function (acc, importDeclaration) { return (__assign(__assign({}, acc), (0, names_1.getImportAlias)(importDeclaration))); }, {});
    var componentJSXElements = (0, names_1.getJSXElementNames)(component).map(function (name) { var _a; return (_a = aliasDict[name]) !== null && _a !== void 0 ? _a : name; });
    var componentJSXElementsWithParents = (0, names_1.getJSXElementNamesWithParent)(component);
    var designSystemElements = (0, lodash_1.intersection)(componentJSXElements, __spreadArray(__spreadArray([], __read(Object.keys(importedDesignSystemComponentDictionary)), false), __read(Object.keys(importedStencilComponentDictionary)), false)).map(function (ds) { return componentJSXElementsWithParents.find(function (c) { return c.name === ds; }); });
    var designSystemComponentDictionary = __assign(__assign({}, importedDesignSystemComponentDictionary), importedStencilComponentDictionary);
    var designSystemElementsOccurrences = designSystemElements.reduce(function (acc, ele) {
        var _a;
        if (designSystemComponentDictionary[ele === null || ele === void 0 ? void 0 : ele.name] && designSystemComponentDictionary[ele === null || ele === void 0 ? void 0 : ele.name]['id'] && designSystemComponentDictionary[ele.name]['filewiseLocation']) {
            return __assign(__assign({}, acc), (_a = {}, _a[designSystemComponentDictionary[ele === null || ele === void 0 ? void 0 : ele.name].id] = designSystemComponentDictionary[ele.name].filewiseLocation[currentFilePath].filter(function (c) { return c.parent === ele.parent; }).length, _a));
        }
        return acc;
    }, {});
    return designSystemElementsOccurrences;
}
function getOverridenWebComponents(_a) {
    var component = _a.component, projectPath = _a.projectPath, webComponents = _a.webComponents;
    var sourceFile = component.getSourceFile();
    var currentFilePath = (0, names_1.getPathRelativeToRoot)(sourceFile, projectPath);
    var componentJSXElements = (0, names_1.getJSXElementNames)(component);
    var designSystemElements = (0, lodash_1.intersection)(componentJSXElements, Object.keys(webComponents));
    ;
    var designSystemElementsOccurrences = designSystemElements.reduce(function (acc, ele) {
        var _a;
        return (__assign(__assign({}, acc), (_a = {}, _a[webComponents[ele].id] = webComponents[ele].filewiseOccurences[currentFilePath], _a)));
    }, {});
    return designSystemElementsOccurrences;
}
function getComponentImportDeclarations(component) {
    var sourceFile = component.getSourceFile();
    var imports = sourceFile.getImportDeclarations();
    var jsxOpeningElements = component.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxOpeningElement);
    var jsxSelfClosingElements = component.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxSelfClosingElement);
    var components = __spreadArray(__spreadArray([], __read(jsxOpeningElements), false), __read(jsxSelfClosingElements), false).map(function (jsxElement) {
        return jsxElement.getTagNameNode().getText();
    });
    return imports.map(function (importDeclaration) {
        var result = null;
        var moduleSpecifier = importDeclaration.getModuleSpecifier().getText();
        if (importDeclaration.getDefaultImport()) {
            var defaultImportName = importDeclaration.getDefaultImport().getText();
            result = {
                module: moduleSpecifier.trim().replace(/'/g, '').replace(/"/g, ''),
                imported: components.includes(defaultImportName) ? [{ alias: null, originalName: defaultImportName }] : [],
                type: 'default'
            };
        }
        if (importDeclaration.getNamedImports().length > 0) {
            var imported_2 = [];
            importDeclaration.getNamedImports().map(function (namedImport) {
                var _a;
                var alias = (_a = namedImport.getAliasNode()) === null || _a === void 0 ? void 0 : _a.getText();
                var originalName = namedImport.getNameNode().getText();
                if (alias && components.includes(alias)) {
                    imported_2 = __spreadArray(__spreadArray([], __read(imported_2), false), [{
                            alias: alias,
                            originalName: originalName
                        }], false);
                }
                else if (components.includes(originalName)) {
                    imported_2 = __spreadArray(__spreadArray([], __read(imported_2), false), [
                        {
                            alias: null,
                            originalName: namedImport.getText()
                        }
                    ], false);
                }
            });
            result = {
                module: moduleSpecifier.trim().replace(/'/g, '').replace(/"/g, ''),
                imported: imported_2,
                type: 'named'
            };
        }
        if (importDeclaration.getNamespaceImport()) {
            var namespaceImport = importDeclaration.getNamespaceImport().getText();
            result = {
                module: moduleSpecifier.trim().replace(/'/g, '').replace(/"/g, ''),
                imported: components.includes(namespaceImport) ? [{ alias: null, originalName: namespaceImport }] : [],
                type: 'namespace'
            };
        }
        return { result: result, components: components };
    });
}
function getSelfDeclaredComponentCount(component, projectPath) {
    var _a;
    var _b;
    var componentName = (_b = (0, names_1.getComponentName)(component)) !== null && _b !== void 0 ? _b : "";
    var sourceFile = component.getSourceFile();
    var componentCountInSourceFile = (0, names_1.getJSXElementNames)(sourceFile).filter(function (name) { return name === componentName; });
    var relativeSourcePath = (0, names_1.getPathRelativeToRoot)(sourceFile, projectPath);
    var referencingSourceFiles = sourceFile.getReferencingSourceFiles().filter(function (file) {
        var importDeclaration = file.getImportDeclaration(function (ele) { return (0, import_declarations_1.hasComponent)(ele, componentName); });
        return importDeclaration !== undefined;
    });
    var countDict = (0, count_1.getComponentCountInSourceFiles)({ sourceFiles: referencingSourceFiles, componentName: componentName, projectPath: projectPath });
    if (componentCountInSourceFile.length > 0) {
        countDict = __assign(__assign({}, countDict), (_a = {}, _a[relativeSourcePath] = componentCountInSourceFile.length, _a));
    }
    return countDict;
}
function hasAncestorOfType(node, kinds) {
    var parent = node.getParent();
    while (parent) {
        if (kinds.includes(parent.getKind())) {
            return true;
        }
        parent = parent.getParent();
    }
    return false;
}
function getAncestorOfType(node, kinds) {
    var parent = node.getParent();
    while (parent) {
        if (kinds.includes(parent.getKind())) {
            return parent;
        }
        parent = parent.getParent();
    }
    return null;
}
function getSelfDeclaredComponents(_a) {
    var project = _a.project, designSystems = _a.designSystems, projectPath = _a.projectPath, importedStencilComponents = _a.importedStencilComponents, dependencies = _a.dependencies, config = _a.config, webComponents = _a.webComponents;
    var components = (0, functions_classes_1.getFunctionsAndClasses)(project).filter(function (node) { return (0, functions_classes_1.filterReactClassComponent)(node) === true || (0, functions_classes_1.filterReactFunctionalComponent)(node) === true; });
    var importedStencilComponentDictionary = importedStencilComponents
        .filter(function (ele) { return ele.designSystems.length > 0; })
        .reduce(function (acc, ele) {
        var _a;
        return (__assign(__assign({}, acc), (_a = {}, _a[ele.name] = ele, _a)));
    }, {});
    var componentsInfo = components.map(function (component) {
        var _a;
        var path = (0, names_1.getPathRelativeToRoot)(component.getSourceFile(), projectPath);
        var alias = null;
        if (config) {
            var isAlias = (0, utils_1.isPathAlias)(path, config);
            if (isAlias) {
                alias = isAlias;
            }
        }
        var name = (_a = (0, names_1.getComponentName)(component)) !== null && _a !== void 0 ? _a : "";
        var id = "".concat(path, "/").concat(name);
        if (hasAncestorOfType(component, [ts_morph_1.SyntaxKind.ArrowFunction, ts_morph_1.SyntaxKind.FunctionDeclaration, ts_morph_1.SyntaxKind.ClassDeclaration])) {
            var parent_1 = (0, names_1.getComponentName)(getAncestorOfType(component, [ts_morph_1.SyntaxKind.ArrowFunction, ts_morph_1.SyntaxKind.FunctionDeclaration, ts_morph_1.SyntaxKind.ClassDeclaration]));
            id = "".concat(path, "/").concat(parent_1, "/").concat(name);
        }
        var tags = (0, js_docs_1.getJSDocTags)(component).map(function (tag) { return tag.getTagName(); });
        var description = (0, js_docs_1.getJSDocDescriptions)(component).join(", ");
        var overriddenComponents = getOverrides({
            component: component,
            designSystems: designSystems,
            projectPath: projectPath,
            importedStencilComponentDictionary: importedStencilComponentDictionary,
            dependencies: dependencies
        });
        var webComponentsDictionary = webComponents
            .filter(function (ele) { return ele.designSystems.length > 0; })
            .reduce(function (acc, ele) {
            var _a;
            return (__assign(__assign({}, acc), (_a = {}, _a[ele.selector] = ele, _a)));
        }, {});
        var overriddenWebComponents = getOverridenWebComponents({
            component: component,
            projectPath: projectPath,
            webComponents: webComponentsDictionary
        });
        var qualifyingDesignSystems = (0, design_system_1.findDesignSystems)({
            input: component,
            designSystems: designSystems,
            importedStencilComponentDictionary: importedStencilComponentDictionary
        });
        var library = null;
        if (qualifyingDesignSystems.length) {
            var designSystem = qualifyingDesignSystems.find(function (ds) { var _a; return (_a = ds.relativePaths) === null || _a === void 0 ? void 0 : _a.length; });
            if (designSystem) {
                var libraryName = (0, design_system_1.findMatchedRelativePath)({ input: component, designSystem: designSystem });
                library = {
                    name: libraryName,
                    version: '0.0.0'
                };
            }
        }
        var routerLibraries = ['react-router-dom', '@reach/router', 'wouter'];
        var imported = getComponentImportDeclarations(component).filter(function (_a) {
            var imp = _a.result;
            return routerLibraries.includes(imp === null || imp === void 0 ? void 0 : imp.module) && (imp === null || imp === void 0 ? void 0 : imp.imported.find(function (i) { return i.originalName === 'Route'; }));
        });
        var isRoute = false;
        if (imported.length) {
            isRoute = true;
        }
        var isPage = false;
        if (tags.includes('page') || tags.includes('route')) {
            isPage = true;
        }
        var isNext = dependencies.find(function (d) { return d.name === 'next'; });
        if (isNext) {
            if (path.startsWith('pages')) {
                isPage = true;
            }
        }
        var designDocs = (0, js_docs_1.getDesignDocs)(description);
        var filewiseOccurences = getSelfDeclaredComponentCount(component, projectPath);
        var totalOccurences = (0, lodash_1.sum)(Object.values(filewiseOccurences));
        var stories = (0, stories_1.getStories)(component, projectPath);
        var _b = component.getSourceFile().getLineAndColumnAtPos(component.getStart()), column = _b.column, line = _b.line;
        var filewiseLocation = (0, location_1.getFilewiseLocation)({ component: component, name: name, projectPath: projectPath });
        var props = (0, names_1.getElementProps)(component.getSourceFile(), projectPath, name);
        var output = {
            id: id,
            path: path,
            alias: alias,
            library: library,
            name: name,
            tags: tags,
            description: description,
            overriddenComponents: __assign(__assign({}, overriddenComponents), overriddenWebComponents),
            designSystems: qualifyingDesignSystems,
            designDocs: designDocs,
            isSelfDeclared: true,
            filewiseOccurences: filewiseOccurences,
            totalOccurences: totalOccurences,
            stories: stories,
            line: line,
            column: column,
            filewiseLocation: filewiseLocation,
            isPage: isPage,
            isRoute: isRoute,
            props: props
        };
        return output;
    });
    return componentsInfo;
}
exports.getSelfDeclaredComponents = getSelfDeclaredComponents;
