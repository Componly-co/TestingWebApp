"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAliases = exports.isPathAlias = exports.isAlias = exports.resolveImportPath = exports.readJsConfig = void 0;
var path_1 = require("path");
var promises_1 = require("fs/promises");
var chalk_1 = __importDefault(require("chalk"));
function readJsConfig(filePath) {
    if (filePath === void 0) { filePath = 'componly.config.json'; }
    return __awaiter(this, void 0, void 0, function () {
        var config, configFile, configContent, error_1, _a, code, message;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    config = {};
                    configFile = (0, path_1.join)(process.cwd(), filePath);
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4, (0, promises_1.readFile)(configFile, 'utf8')];
                case 2:
                    configContent = _b.sent();
                    config = JSON.parse(configContent);
                    return [3, 4];
                case 3:
                    error_1 = _b.sent();
                    _a = error_1, code = _a.code, message = _a.message;
                    if (code === "ENOENT") {
                    }
                    else {
                        console.log(chalk_1.default.red("".concat(filePath, " file is malformatted, please make sure it's properly formatted and try again")));
                        console.log(chalk_1.default.red(message));
                    }
                    return [3, 4];
                case 4: return [2, config];
            }
        });
    });
}
exports.readJsConfig = readJsConfig;
function resolveImportPath(importPath, config) {
    var _a;
    var paths = (_a = config === null || config === void 0 ? void 0 : config.compilerOptions) === null || _a === void 0 ? void 0 : _a.paths;
    if (paths) {
        for (var alias in paths) {
            var aliasPattern = new RegExp("^".concat(alias.replace(/\*/g, '(.*)')));
            if (aliasPattern.test(importPath)) {
                var match = importPath.match(aliasPattern);
                if (match) {
                    var aliasPath = paths[alias][0].replace(/\*/g, match[1]);
                    var resolvedPath = importPath.replace(aliasPattern, aliasPath);
                    return resolvedPath;
                }
            }
        }
    }
    return importPath;
}
exports.resolveImportPath = resolveImportPath;
function isAlias(importPath, config) {
    var _a;
    var paths = (_a = config === null || config === void 0 ? void 0 : config.compilerOptions) === null || _a === void 0 ? void 0 : _a.paths;
    if (paths) {
        for (var alias in paths) {
            var aliasPattern = new RegExp("^".concat(alias.replace(/\*/g, '(.*)')));
            if (aliasPattern.test(importPath)) {
                var match = importPath.match(aliasPattern);
                if (match) {
                    var aliasPath = paths[alias][0].replace(/\*/g, match[1]);
                    var resolvedPath = importPath.replace(aliasPattern, aliasPath);
                    return resolvedPath ? true : false;
                }
            }
        }
    }
    return false;
}
exports.isAlias = isAlias;
function isPathAlias(importPath, config) {
    var e_1, _a;
    var _b;
    var paths = (_b = config === null || config === void 0 ? void 0 : config.compilerOptions) === null || _b === void 0 ? void 0 : _b.paths;
    if (paths) {
        for (var alias in paths) {
            try {
                for (var _c = (e_1 = void 0, __values(paths[alias])), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var path = _d.value;
                    var aliasPattern = new RegExp("^".concat(path.replace(/\*/g, '(.*)')));
                    if (aliasPattern.test(importPath)) {
                        var match = importPath.match(aliasPattern);
                        if (match) {
                            var aliasPath = alias.replace(/\*/g, match[1]);
                            var resolvedPath = importPath.replace(aliasPattern, aliasPath);
                            return resolvedPath.replace('/index.js', '').replace('.js', '');
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    }
    return false;
}
exports.isPathAlias = isPathAlias;
function getAliases(importedReactComponents) {
    return __awaiter(this, void 0, void 0, function () {
        var aliases, jsconfig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    aliases = [];
                    return [4, readJsConfig()];
                case 1:
                    jsconfig = _a.sent();
                    if (jsconfig) {
                        aliases = importedReactComponents.filter(function (component) { return component.path; })
                            .filter(function (component) { return isAlias(component.path, jsconfig); });
                    }
                    return [2, aliases];
            }
        });
    });
}
exports.getAliases = getAliases;
