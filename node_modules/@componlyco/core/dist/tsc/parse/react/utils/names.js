"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStencilComponentNames = exports.getComponentNamesPerImport = exports.getComponentName = exports.getImportedEntitiesNames = exports.hasAncestorOfType = exports.getJSXElementNamesWithParent = exports.getJSXElementNames = exports.getElementProps = exports.getTagName = exports.getImportAlias = exports.getPathRelativeToRoot = void 0;
var path_1 = require("path");
var ts_morph_1 = require("ts-morph");
var packages_1 = require("./packages");
var project_1 = require("./project");
var lodash_1 = require("lodash");
var import_declarations_1 = require("./import-declarations");
var location_1 = require("./location");
function getPathRelativeToRoot(sourceFile, projectPath) {
    var project = sourceFile.getProject();
    var srcPath = project.getDirectory((0, path_1.join)(projectPath, "src"));
    var rootDirectory = srcPath === null || srcPath === void 0 ? void 0 : srcPath.getParent();
    var relativePath = rootDirectory === null || rootDirectory === void 0 ? void 0 : rootDirectory.getRelativePathTo(sourceFile);
    return relativePath !== null && relativePath !== void 0 ? relativePath : sourceFile.getFilePath();
}
exports.getPathRelativeToRoot = getPathRelativeToRoot;
function getImportAlias(importDeclaration) {
    var aliasDict = importDeclaration.getNamedImports().reduce(function (acc, node) {
        var _a;
        var _b;
        var alias = (_b = node.getAliasNode()) === null || _b === void 0 ? void 0 : _b.getText();
        var aliases = acc;
        if (alias !== undefined) {
            aliases = __assign(__assign({}, acc), (_a = {}, _a[alias] = node.getName(), _a));
        }
        return aliases;
    }, {});
    return aliasDict;
}
exports.getImportAlias = getImportAlias;
function getTagName(element) {
    var name = element.getTagNameNode().getText().trim();
    return name;
}
exports.getTagName = getTagName;
function getElementProps(sourceFile, projectPath, componentName) {
    var importDeclaration = sourceFile.getImportDeclaration(function (ele) { return (0, import_declarations_1.hasComponent)(ele, componentName); });
    var aliasDict = {};
    if (importDeclaration !== undefined) {
        aliasDict = (0, lodash_1.invert)(getImportAlias(importDeclaration));
    }
    var jsxElements = sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxElement);
    var jsxSelfClosingElements = sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxSelfClosingElement);
    var componentJSXElements = __spreadArray(__spreadArray([], __read(jsxElements), false), __read(jsxSelfClosingElements), false).filter(function (element) { var _a; return (0, location_1.isMatchingComponent)(element, (_a = aliasDict[componentName]) !== null && _a !== void 0 ? _a : componentName); });
    var props = {};
    componentJSXElements.map(function (element) {
        var attributes = [];
        if (element.isKind(ts_morph_1.SyntaxKind.JsxElement)) {
            attributes = element.getOpeningElement().getAttributes();
        }
        if (element.isKind(ts_morph_1.SyntaxKind.JsxSelfClosingElement)) {
            attributes = element.getAttributes();
        }
        attributes.forEach(function (attr) {
            if (attr.getKind() === ts_morph_1.SyntaxKind.JsxAttribute) {
                var jsxAttr = attr;
                var name_1 = jsxAttr.getName();
                var position = sourceFile.getLineAndColumnAtPos(jsxAttr.getStart());
                var filePath = getPathRelativeToRoot(sourceFile, projectPath);
                props[name_1] = props[name_1] ? __spreadArray(__spreadArray([], __read(props[name_1]), false), [__assign(__assign({}, position), { filePath: filePath })], false) : [__assign(__assign({}, position), { filePath: filePath })];
            }
        });
    });
    return props;
}
exports.getElementProps = getElementProps;
function getJSXElementNames(node) {
    var jsxElements = node.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxElement);
    var jsxElementNames = jsxElements.map(function (jsxElement) { return getTagName(jsxElement.getOpeningElement()); });
    var jsxSelfClosingElements = node.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxSelfClosingElement);
    var jsxSelfClosingElementNames = jsxSelfClosingElements.map(getTagName);
    return __spreadArray(__spreadArray([], __read(jsxSelfClosingElementNames), false), __read(jsxElementNames), false);
}
exports.getJSXElementNames = getJSXElementNames;
function getJSXElementNamesWithParent(node) {
    var jsxElements = node.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxElement);
    var jsxSelfClosingElements = node.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxSelfClosingElement);
    return __spreadArray(__spreadArray([], __read(jsxElements.map(function (ele) {
        return {
            name: getTagName(ele.getOpeningElement()),
            parent: hasAncestorOfType(ele, [ts_morph_1.SyntaxKind.ArrowFunction, ts_morph_1.SyntaxKind.FunctionDeclaration, ts_morph_1.SyntaxKind.ClassDeclaration])
        };
    })), false), __read(jsxSelfClosingElements.map(function (ele) {
        return {
            name: getTagName(ele),
            parent: hasAncestorOfType(ele, [ts_morph_1.SyntaxKind.ArrowFunction, ts_morph_1.SyntaxKind.FunctionDeclaration, ts_morph_1.SyntaxKind.ClassDeclaration])
        };
    })), false);
}
exports.getJSXElementNamesWithParent = getJSXElementNamesWithParent;
function hasAncestorOfType(node, kinds) {
    var parent = node.getParent();
    while (parent) {
        if (parent.getKind() === ts_morph_1.SyntaxKind.FunctionDeclaration || parent.getKind() === ts_morph_1.SyntaxKind.ClassDeclaration) {
            var nameNode = parent.getFirstChildByKind(ts_morph_1.SyntaxKind.Identifier);
            if (nameNode) {
                return nameNode.getText();
            }
        }
        if (parent.getKind() === ts_morph_1.SyntaxKind.ArrowFunction) {
            var grandParent = parent.getParent();
            if (grandParent) {
                if (grandParent.getKind() === ts_morph_1.SyntaxKind.VariableDeclaration) {
                    var nameNode = grandParent.getFirstChildByKind(ts_morph_1.SyntaxKind.Identifier);
                    if (nameNode) {
                        return nameNode.getText();
                    }
                }
                else if (grandParent.getKind() === ts_morph_1.SyntaxKind.PropertyAssignment) {
                    var nameNode = grandParent.getFirstChildByKind(ts_morph_1.SyntaxKind.Identifier);
                    if (nameNode) {
                        return nameNode.getText();
                    }
                }
            }
        }
        parent = parent.getParent();
    }
    return null;
}
exports.hasAncestorOfType = hasAncestorOfType;
function getImportedEntitiesNames(importDeclaration) {
    var _a;
    var defaultImport = (_a = importDeclaration.getDefaultImport()) === null || _a === void 0 ? void 0 : _a.getText();
    var namedImports = importDeclaration
        .getNamedImports()
        .map(function (node) { var _a, _b; return (_b = (_a = node.getAliasNode()) === null || _a === void 0 ? void 0 : _a.getText()) !== null && _b !== void 0 ? _b : node.getText(); });
    var importedEntities = namedImports.map(function (imp) { return { value: imp, type: 'named' }; });
    if (defaultImport !== undefined) {
        importedEntities = __spreadArray(__spreadArray([], __read(namedImports.map(function (imp) { return { value: imp, type: 'named' }; })), false), [
            { value: defaultImport, type: 'default' }
        ], false);
    }
    return importedEntities;
}
exports.getImportedEntitiesNames = getImportedEntitiesNames;
function getComponentName(component) {
    var _a;
    var name;
    if (component instanceof ts_morph_1.ArrowFunction) {
        name = (_a = component.getFirstAncestorByKind(ts_morph_1.SyntaxKind.VariableDeclaration)) === null || _a === void 0 ? void 0 : _a.getName();
    }
    else {
        name = component.getName();
    }
    return name;
}
exports.getComponentName = getComponentName;
function getComponentNamesPerImport(importDeclaration) {
    var entitiesNames = getImportedEntitiesNames(importDeclaration).map(function (imp) { return imp.value; });
    var aliasDict = getImportAlias(importDeclaration);
    var componentNames = entitiesNames.map(function (entityName) {
        var _a;
        var originalName = (_a = aliasDict[entityName]) !== null && _a !== void 0 ? _a : entityName;
        return originalName;
    });
    return componentNames;
}
exports.getComponentNamesPerImport = getComponentNamesPerImport;
function getStencilComponentSourceFiles(projectPath) {
    return __awaiter(this, void 0, void 0, function () {
        var stencilPackageDictionary, stencilSourceFiles;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, (0, packages_1.getStencilPackageDictionary)(projectPath)];
                case 1:
                    stencilPackageDictionary = _a.sent();
                    stencilSourceFiles = Object.entries(stencilPackageDictionary).reduce(function (acc, _a) {
                        var _b;
                        var _c = __read(_a, 2), name = _c[0], types = _c[1];
                        var typesPath = require.resolve((0, path_1.join)(name, types));
                        var componentTypesPath = (0, path_1.join)((0, path_1.dirname)(typesPath), "components.d.ts");
                        var projectInstance = (0, project_1.getProjectInstance)();
                        projectInstance.addSourceFileAtPathIfExists(componentTypesPath);
                        var file = projectInstance.getSourceFile("components.d.ts");
                        return __assign(__assign({}, acc), (_b = {}, _b[name] = file, _b));
                    }, {});
                    return [2, stencilSourceFiles];
            }
        });
    });
}
function getModuleWiseStencilComponentNames(file) {
    var components = [];
    var stencilModule = file.getModule('"@stencil/core"');
    if (stencilModule instanceof ts_morph_1.ModuleDeclaration) {
        var interfaceDeclaration = stencilModule.getFirstDescendantByKind(ts_morph_1.SyntaxKind.InterfaceDeclaration);
        if (interfaceDeclaration !== undefined) {
            var members = interfaceDeclaration.getProperties();
            components = members.map(function (ele) { return ele.getName().replace(/"/g, ""); });
        }
    }
    return components;
}
function getStencilComponentNames(projectPath) {
    return __awaiter(this, void 0, void 0, function () {
        var sourceFileDictionary, componentDictionary;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, getStencilComponentSourceFiles(projectPath)];
                case 1:
                    sourceFileDictionary = _a.sent();
                    componentDictionary = Object.entries(sourceFileDictionary).reduce(function (acc, _a) {
                        var _b;
                        var _c = __read(_a, 2), module = _c[0], file = _c[1];
                        var dict = acc;
                        if (file instanceof ts_morph_1.SourceFile) {
                            var components = getModuleWiseStencilComponentNames(file);
                            dict = __assign(__assign({}, acc), (_b = {}, _b[module] = components, _b));
                        }
                        return dict;
                    }, {});
                    return [2, componentDictionary];
            }
        });
    });
}
exports.getStencilComponentNames = getStencilComponentNames;
