"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilewiseLocation = exports.getComponentLocations = exports.isMatchingComponent = void 0;
var lodash_1 = require("lodash");
var ts_morph_1 = require("ts-morph");
var import_declarations_1 = require("./import-declarations");
var names_1 = require("./names");
function isMatchingComponent(element, name) {
    var tagName;
    if (element instanceof ts_morph_1.JsxSelfClosingElement) {
        tagName = (0, names_1.getTagName)(element);
    }
    else {
        tagName = (0, names_1.getTagName)(element.getOpeningElement());
    }
    return tagName === name;
}
exports.isMatchingComponent = isMatchingComponent;
function getComponentLocations(sourceFile, componentName) {
    var importDeclaration = sourceFile.getImportDeclaration(function (ele) { return (0, import_declarations_1.hasComponent)(ele, componentName); });
    var aliasDict = {};
    if (importDeclaration !== undefined) {
        aliasDict = (0, lodash_1.invert)((0, names_1.getImportAlias)(importDeclaration));
    }
    var jsxElements = sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxElement);
    var jsxSelfClosingElements = sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.JsxSelfClosingElement);
    var componentJSXElements = __spreadArray(__spreadArray([], __read(jsxElements), false), __read(jsxSelfClosingElements), false).filter(function (element) { var _a; return isMatchingComponent(element, (_a = aliasDict[componentName]) !== null && _a !== void 0 ? _a : componentName); });
    var locations = componentJSXElements.map(function (ele) {
        var _a = sourceFile.getLineAndColumnAtPos(ele.getStart()), line = _a.line, column = _a.column;
        var parent = (0, names_1.hasAncestorOfType)(ele, [ts_morph_1.SyntaxKind.ArrowFunction, ts_morph_1.SyntaxKind.FunctionDeclaration, ts_morph_1.SyntaxKind.ClassDeclaration]);
        return {
            lineNumber: line,
            columnNumber: column,
            parent: parent
        };
    });
    return locations;
}
exports.getComponentLocations = getComponentLocations;
function getFilewiseLocation(_a) {
    var component = _a.component, name = _a.name, projectPath = _a.projectPath;
    var sourceFile = component.getSourceFile();
    var referencingSourceFiles = sourceFile.getReferencingSourceFiles().filter(function (file) {
        var importDeclaration = file.getImportDeclaration(function (ele) { return (0, import_declarations_1.hasComponent)(ele, name); });
        return importDeclaration !== undefined;
    });
    var filewiseLocations = __spreadArray(__spreadArray([], __read(referencingSourceFiles), false), [sourceFile], false).reduce(function (acc, file) {
        var _a;
        var locations = getComponentLocations(file, name);
        var relativePath = (0, names_1.getPathRelativeToRoot)(file, projectPath);
        var output = acc;
        if (locations.length > 0) {
            output = __assign(__assign({}, acc), (_a = {}, _a[relativePath] = locations, _a));
        }
        return output;
    }, {});
    return filewiseLocations;
}
exports.getFilewiseLocation = getFilewiseLocation;
