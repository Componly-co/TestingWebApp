"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findDesignSystems = exports.findMatchedRelativePath = void 0;
var lodash_1 = require("lodash");
var minimatch_1 = require("minimatch");
var ts_morph_1 = require("ts-morph");
var names_1 = require("./names");
function findThirdPartyComponentDesignSystems(input, designSystems) {
    var qualifyingDesignSystems = designSystems.filter(function (_a) {
        var alias = _a.alias, relativePaths = _a.relativePaths;
        var found = false;
        var moduleSpecifier;
        if (input instanceof ts_morph_1.ImportDeclaration) {
            moduleSpecifier = input.getModuleSpecifierValue();
        }
        else {
            moduleSpecifier = input;
        }
        if (Array.isArray(relativePaths) && relativePaths.length > 0) {
            found = relativePaths.some(function (relativePath) { return (0, minimatch_1.minimatch)(moduleSpecifier, relativePath) === true; });
        }
        else {
            found = moduleSpecifier.startsWith(alias);
        }
        return found;
    });
    return qualifyingDesignSystems;
}
function findComponentDeclarationDesignSystems(_a) {
    var designSystems = _a.designSystems, input = _a.input, importedStencilComponentDictionary = _a.importedStencilComponentDictionary;
    var sourceFile = input.getSourceFile();
    var moduleSpecifier = sourceFile.getFilePath();
    var importDeclarations = sourceFile.getImportDeclarations();
    var componentsUsed = (0, names_1.getJSXElementNames)(input);
    var componentsImportedDeclarations = importDeclarations.filter(function (ele) {
        var importedEntities = (0, names_1.getImportedEntitiesNames)(ele).map(function (imp) { return imp.value; });
        var importedComponentsUsed = (0, lodash_1.intersection)(componentsUsed, importedEntities);
        var isUsed = importedComponentsUsed.length > 0;
        return isUsed;
    });
    var selfDeclaredDS = designSystems.filter(function (_a) {
        var relativePaths = _a.relativePaths;
        return relativePaths === null || relativePaths === void 0 ? void 0 : relativePaths.some(function (relativePath) { return (0, minimatch_1.minimatch)(moduleSpecifier, relativePath) === true; });
    });
    var importedDS = componentsImportedDeclarations.flatMap(function (ele) {
        return findThirdPartyComponentDesignSystems(ele, designSystems);
    });
    var stencilDesignSystems = [];
    if (importedStencilComponentDictionary !== undefined) {
        var stencilComponents = Object.keys(importedStencilComponentDictionary);
        var usedStencilComponents = (0, lodash_1.intersection)(componentsUsed, stencilComponents);
        stencilDesignSystems = usedStencilComponents.flatMap(function (ele) { return importedStencilComponentDictionary[ele].designSystems; });
    }
    var qualifyingDesignSystems = (0, lodash_1.uniqBy)(__spreadArray([], __read(selfDeclaredDS), false), function (_a) {
        var id = _a.id;
        return id;
    });
    return qualifyingDesignSystems;
}
function findMatchedRelativePath(_a) {
    var _b;
    var designSystem = _a.designSystem, input = _a.input;
    var sourceFile = input.getSourceFile();
    var moduleSpecifier = sourceFile.getFilePath();
    return (_b = designSystem.relativePaths) === null || _b === void 0 ? void 0 : _b.find(function (path) { return (0, minimatch_1.minimatch)(moduleSpecifier, path) === true; });
}
exports.findMatchedRelativePath = findMatchedRelativePath;
function findDesignSystems(_a) {
    var designSystems = _a.designSystems, input = _a.input, importedStencilComponentDictionary = _a.importedStencilComponentDictionary;
    return input instanceof ts_morph_1.ImportDeclaration || typeof input === "string"
        ? findThirdPartyComponentDesignSystems(input, designSystems)
        : findComponentDeclarationDesignSystems({ input: input, designSystems: designSystems, importedStencilComponentDictionary: importedStencilComponentDictionary });
}
exports.findDesignSystems = findDesignSystems;
