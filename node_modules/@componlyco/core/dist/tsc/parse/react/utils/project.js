"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isStory = exports.createProject = exports.getProjectInstance = exports.readFileNames = void 0;
var promises_1 = require("fs/promises");
var path_1 = require("path");
var minimatch_1 = require("minimatch");
var ts_morph_1 = require("ts-morph");
function readFileNames(dir, ignorePatterns) {
    return __awaiter(this, void 0, void 0, function () {
        var dirents, updatedIgnorePatterns, filteredDirents, files, output;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, (0, promises_1.readdir)(dir, { withFileTypes: true })];
                case 1:
                    dirents = _a.sent();
                    updatedIgnorePatterns = Array.isArray(ignorePatterns) && ignorePatterns.length > 0 ? ignorePatterns : ["node_modules"];
                    filteredDirents = dirents.filter(function (_a) {
                        var name = _a.name;
                        return !updatedIgnorePatterns.some(function (pattern) { return (0, minimatch_1.minimatch)(name, pattern); });
                    });
                    return [4, Promise.all(filteredDirents.map(function (dirent) {
                            var res = (0, path_1.join)(dir, dirent.name);
                            return dirent.isDirectory() ? readFileNames(res, ignorePatterns) : res;
                        }))];
                case 2:
                    files = _a.sent();
                    output = files.flat();
                    return [2, output];
            }
        });
    });
}
exports.readFileNames = readFileNames;
function loadSourceFiles(_a) {
    var ignorePatterns = _a.ignorePatterns, project = _a.project, projectPath = _a.projectPath;
    return __awaiter(this, void 0, void 0, function () {
        var allowedFiles, files;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    allowedFiles = [".ts", ".js", ".tsx", ".jsx", ".mjs", ".cjs", ".mts"];
                    return [4, readFileNames(projectPath, ignorePatterns)];
                case 1:
                    files = (_b.sent()).filter(function (file) {
                        return allowedFiles.includes((0, path_1.extname)(file));
                    });
                    files.forEach(function (filePath) {
                        project.addSourceFileAtPathIfExists(filePath);
                    });
                    return [2];
            }
        });
    });
}
function getProjectInstance() {
    var project = new ts_morph_1.Project({
        compilerOptions: {
            target: ts_morph_1.ScriptTarget.Latest,
        },
    });
    return project;
}
exports.getProjectInstance = getProjectInstance;
function createProject(projectPath, ignorePatterns) {
    return __awaiter(this, void 0, void 0, function () {
        var project;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    project = getProjectInstance();
                    return [4, loadSourceFiles({
                            ignorePatterns: ignorePatterns,
                            project: project,
                            projectPath: projectPath !== null && projectPath !== void 0 ? projectPath : (0, path_1.join)(process.cwd(), "src"),
                        })];
                case 1:
                    _a.sent();
                    return [2, project];
            }
        });
    });
}
exports.createProject = createProject;
function isStory(input) {
    return (0, minimatch_1.minimatch)(input.getFilePath(), "**/*.stories.{tsx,jsx,js,ts}") === true;
}
exports.isStory = isStory;
