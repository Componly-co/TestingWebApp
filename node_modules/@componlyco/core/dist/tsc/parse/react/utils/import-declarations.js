"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.memoizedIsStencilImportPresent = exports.hasComponent = exports.getImportDeclarations = void 0;
var lodash_1 = require("lodash");
var names_1 = require("./names");
var project_1 = require("./project");
function getImportDeclarations(project, projectPath) {
    var sourceFiles = project.getSourceFiles();
    var declarationList = sourceFiles
        .filter(function (ele) {
        return (0, project_1.isStory)(ele) === false;
    })
        .map(function (sourceFile) {
        var _a;
        var importDeclarations = sourceFile.getImportDeclarations();
        var filePath = (0, names_1.getPathRelativeToRoot)(sourceFile, projectPath);
        var declaration = (_a = {},
            _a[filePath] = importDeclarations,
            _a);
        return declaration;
    });
    var importDeclarations = declarationList.reduce(function (acc, curr) {
        return __assign(__assign({}, acc), curr);
    }, {});
    return importDeclarations;
}
exports.getImportDeclarations = getImportDeclarations;
function hasComponent(importDeclaration, componentName) {
    var importedComponents = (0, names_1.getComponentNamesPerImport)(importDeclaration);
    return importedComponents.some(function (entityName) { return entityName === componentName; });
}
exports.hasComponent = hasComponent;
function isStencilImportPresent(sourceFile, entity) {
    var importDeclarations = sourceFile.getImportDeclarations();
    var result = importDeclarations.some(function (importDeclaration) {
        var importedEntities = (0, names_1.getImportedEntitiesNames)(importDeclaration).map(function (imp) { return imp.value; });
        var importedFrom = importDeclaration.getModuleSpecifierValue();
        var isPresent = importedEntities.some(function (ele) { return ele === entity; });
        return isPresent === true && importedFrom === "@stencil/core";
    });
    return result;
}
exports.memoizedIsStencilImportPresent = (0, lodash_1.memoize)(isStencilImportPresent, function (sourceFile, entity) {
    var filePath = sourceFile.getFilePath();
    return "".concat(filePath, "-").concat(entity);
});
