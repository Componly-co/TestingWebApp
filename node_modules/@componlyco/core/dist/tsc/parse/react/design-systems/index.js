"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts_morph_1 = require("ts-morph");
var project_1 = require("../utils/project");
var utils_1 = require("../../../utils");
var utils_2 = require("../utils/utils");
function resolveType(type, value) {
    if (value === void 0) { value = []; }
    var typeName = type.getText();
    var typeArguments = type.getAliasTypeArguments();
    value = __spreadArray(__spreadArray([], __read(value), false), [typeName], false);
    typeArguments.forEach(function (property) {
        var name = property.getText();
        value = __spreadArray(__spreadArray([], __read(value), false), [name], false);
        resolveType(property, value);
    });
    return value;
}
function extractPropsFromType(type) {
    var properties = type.getProperties();
    var props = properties.map(function (prop) {
        var _a;
        var propType = (_a = prop.getValueDeclaration()) === null || _a === void 0 ? void 0 : _a.getType();
        return {
            name: prop.getName(),
            type: (propType === null || propType === void 0 ? void 0 : propType.getText()) || 'unknown',
            isOptional: prop.isOptional()
        };
    });
    return props;
}
function extractPropsInterfaceFromType(type) {
    var e_1, _a;
    var _b, _c;
    var callSignatures = type.getCallSignatures();
    if (callSignatures.length > 0) {
        var callSignature = callSignatures[0];
        var propsType = (_b = callSignature.getParameters()[0]) === null || _b === void 0 ? void 0 : _b.getTypeAtLocation(type);
        if (propsType) {
            return propsType.getText();
        }
    }
    var properties = type.getProperties();
    try {
        for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
            var property = properties_1_1.value;
            var propName = property.getName();
            if (propName === 'props') {
                var propType = (_c = property.getValueDeclaration()) === null || _c === void 0 ? void 0 : _c.getType().getText();
                if (propType) {
                    return propType;
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return "UnknownProps";
}
function findDefaultExportVariable(sourceFile) {
    var exportAssignment = sourceFile.getExportAssignment(function (x) { return x.isExportEquals() === false; });
    if (exportAssignment) {
        var expression = exportAssignment.getExpression();
        if (expression) {
            var symbol = expression.getSymbol();
            if (symbol) {
                var declarations = symbol.getDeclarations();
                if (declarations.length > 0) {
                    var declaration = declarations[0];
                    if ([ts_morph_1.SyntaxKind.VariableDeclaration, ts_morph_1.SyntaxKind.FunctionDeclaration, ts_morph_1.SyntaxKind.ClassDeclaration].includes(declaration.getKind())) {
                        return declaration;
                    }
                }
            }
        }
    }
    return undefined;
}
function getComponentDetails(source) {
    var e_2, _a;
    var _b;
    var exportDeclarations = source.getExportedDeclarations();
    var declaration = findDefaultExportVariable(source);
    if (declaration) {
        var isVariableDeclaration = declaration && declaration.isKind(ts_morph_1.SyntaxKind.VariableDeclaration);
        var isPropertyDeclaration = declaration && declaration.isKind(ts_morph_1.SyntaxKind.PropertyDeclaration);
        var isFunctionDeclaration = declaration && declaration.isKind(ts_morph_1.SyntaxKind.FunctionDeclaration);
        var isClassDeclaration = declaration && declaration.isKind(ts_morph_1.SyntaxKind.ClassDeclaration);
        if (isVariableDeclaration || isPropertyDeclaration) {
            var type = declaration.getType();
            if (type && declaration.getName() === 'Button') {
                console.log(resolveType(type));
            }
            return {
                componentName: declaration.getName(),
                propsInterfaceName: ''
            };
        }
        else if (isFunctionDeclaration || isClassDeclaration) {
            var type = declaration.getType();
            return {
                componentName: declaration.getName(),
                propsInterfaceName: extractPropsInterfaceFromType(type)
            };
        }
    }
    try {
        for (var exportDeclarations_1 = __values(exportDeclarations), exportDeclarations_1_1 = exportDeclarations_1.next(); !exportDeclarations_1_1.done; exportDeclarations_1_1 = exportDeclarations_1.next()) {
            var _c = __read(exportDeclarations_1_1.value, 2), exportName = _c[0], declarations = _c[1];
            var _d = __read(declarations, 1), declaration_1 = _d[0];
            if (declaration_1 && declaration_1.isKind(ts_morph_1.SyntaxKind.VariableDeclaration)) {
                var type = declaration_1.getType();
                var callSignatures = type.getCallSignatures();
                if (callSignatures.length > 0) {
                    var callSignature = callSignatures[0];
                    var propsType = (_b = callSignature.getParameters()[0]) === null || _b === void 0 ? void 0 : _b.getTypeAtLocation(declaration_1);
                    if (propsType) {
                        return {
                            componentName: declaration_1.getName(),
                            propsInterfaceName: propsType.getText()
                        };
                    }
                }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (exportDeclarations_1_1 && !exportDeclarations_1_1.done && (_a = exportDeclarations_1.return)) _a.call(exportDeclarations_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return undefined;
}
function extractInterfaces(sourceFile) {
    var interfaces = sourceFile.getChildrenOfKind(ts_morph_1.SyntaxKind.InterfaceDeclaration);
    return interfaces;
}
function extractVariables(sourceFile) {
    var variables = sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.VariableDeclaration);
    return variables;
}
function extractComponentNames(sourceFile) {
    var e_3, _a;
    var _b;
    var components = [];
    var exportDefault = sourceFile.getDefaultExportSymbol();
    if (exportDefault) {
        exportDefault.getDeclarations().forEach(function (dec) {
            var _a, _b;
            switch (dec.getKind()) {
                case ts_morph_1.SyntaxKind.ExportAssignment:
                    var exportAssignment = dec;
                    var name_1 = (_a = exportAssignment.getExpression().getSymbol()) === null || _a === void 0 ? void 0 : _a.getName();
                    var variables = extractVariables(sourceFile);
                    if (name_1 === 'Button') {
                        var variable = variables.find(function (v) { return v.getName() === name_1; });
                        console.log(variable === null || variable === void 0 ? void 0 : variable.getType().getText());
                        var variableType = variable === null || variable === void 0 ? void 0 : variable.getType();
                        console.log((_b = variableType === null || variableType === void 0 ? void 0 : variableType.getAliasSymbol()) === null || _b === void 0 ? void 0 : _b.getName());
                        variableType === null || variableType === void 0 ? void 0 : variableType.getAliasTypeArguments().forEach(function (a) {
                        });
                        console.log(variableType === null || variableType === void 0 ? void 0 : variableType.getAliasTypeArguments().map(function (a) { return a.getAliasTypeArguments(); }));
                    }
            }
        });
    }
    else {
        var exportDeclarations = sourceFile.getExportedDeclarations();
        if (exportDeclarations.size) {
            var _loop_1 = function (exportName, declarations) {
                var _d = __read(declarations, 1), declaration = _d[0];
                if (declaration) {
                    if (declaration.isKind(ts_morph_1.SyntaxKind.FunctionDeclaration)) {
                        var returnType = declaration.getReturnType();
                        if (returnType.getText() === 'JSX.Element') {
                            var props_1 = [];
                            declaration.getParameters().map(function (p) {
                                var _a, _b;
                                var propsInterfaceName = (_a = p.getType().getSymbol()) === null || _a === void 0 ? void 0 : _a.getName();
                                var propsInterface = extractInterfaces(sourceFile).find(function (i) { return i.getName() === propsInterfaceName; });
                                if (propsInterface) {
                                    propsInterface === null || propsInterface === void 0 ? void 0 : propsInterface.getMembers().map(function (prop) {
                                        if (prop.isKind(ts_morph_1.SyntaxKind.PropertySignature)) {
                                            var variable = extractVariables(sourceFile).find(function (v) { return v.getName() === prop.getType().getText(); });
                                            props_1.push({
                                                name: prop.getName(),
                                                type: prop.getType().getText(),
                                                variable: variable === null || variable === void 0 ? void 0 : variable.getName()
                                            });
                                        }
                                    });
                                }
                                else {
                                    props_1.push({
                                        name: p.getName(),
                                        type: (_b = p.getType().getSymbol()) === null || _b === void 0 ? void 0 : _b.getName()
                                    });
                                }
                            });
                            components.push({ name: exportName, props: props_1 });
                        }
                    }
                    else if (declaration.isKind(ts_morph_1.SyntaxKind.VariableDeclaration)) {
                        var variableType = declaration.getType();
                        (_b = variableType.getSymbol()) === null || _b === void 0 ? void 0 : _b.getDeclarations().forEach(function (dec) {
                            if (dec.isKind(ts_morph_1.SyntaxKind.FunctionType)) {
                                var returnType = dec.getReturnType();
                                if (returnType.getText() === 'JSX.Element') {
                                    var props_2 = [];
                                    dec.getParameters().map(function (p) {
                                        var _a, _b;
                                        var propsInterfaceName = (_a = p.getType().getSymbol()) === null || _a === void 0 ? void 0 : _a.getName();
                                        var propsInterface = extractInterfaces(sourceFile).find(function (i) { return i.getName() === propsInterfaceName; });
                                        if (propsInterface) {
                                            propsInterface === null || propsInterface === void 0 ? void 0 : propsInterface.getMembers().map(function (prop) {
                                                if (prop.isKind(ts_morph_1.SyntaxKind.PropertySignature)) {
                                                    props_2.push({
                                                        name: prop.getName(),
                                                        type: prop.getType().getText()
                                                    });
                                                }
                                            });
                                        }
                                        else {
                                            props_2.push({
                                                name: p.getName(),
                                                type: (_b = p.getType().getSymbol()) === null || _b === void 0 ? void 0 : _b.getName()
                                            });
                                        }
                                    });
                                    components.push({ name: exportName, props: props_2 });
                                }
                            }
                        });
                    }
                }
            };
            try {
                for (var exportDeclarations_2 = __values(exportDeclarations), exportDeclarations_2_1 = exportDeclarations_2.next(); !exportDeclarations_2_1.done; exportDeclarations_2_1 = exportDeclarations_2.next()) {
                    var _c = __read(exportDeclarations_2_1.value, 2), exportName = _c[0], declarations = _c[1];
                    _loop_1(exportName, declarations);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (exportDeclarations_2_1 && !exportDeclarations_2_1.done && (_a = exportDeclarations_2.return)) _a.call(exportDeclarations_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    }
    return components;
}
function findExportedComponents(projectPath) {
    return __awaiter(this, void 0, void 0, function () {
        var project, components;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, (0, project_1.createProject)(projectPath, ["**/*.js", "**/*.stories.d.ts"])];
                case 1:
                    project = _a.sent();
                    components = [];
                    project.getSourceFiles().map(function (sourceFile) {
                        var fileComponents = extractComponentNames(sourceFile);
                        components.push.apply(components, __spreadArray([], __read(fileComponents), false));
                    });
                    return [2, components];
            }
        });
    });
}
findExportedComponents("D:/Workspace/Componly/Web-app-2.0/node_modules/@componlyco/berkoukes").then(function (exportedComponents) { return __awaiter(void 0, void 0, void 0, function () {
    var projectInfos;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, (0, utils_2.readJsConfig)('package.json')];
            case 1:
                projectInfos = _a.sent();
                (0, utils_1.saveFile)('D:/Workspace/Componly/berkoukes/.componly/props.json', JSON.stringify({ name: projectInfos.name, version: projectInfos.version, components: exportedComponents }, null, 2));
                return [2];
        }
    });
}); });
