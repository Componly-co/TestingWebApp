"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phaseVariableOptimization = void 0;
var ir = __importStar(require("../../ir"));
function phaseVariableOptimization(job) {
    var e_1, _a, e_2, _b;
    try {
        for (var _c = __values(job.units), _d = _c.next(); !_d.done; _d = _c.next()) {
            var unit = _d.value;
            optimizeVariablesInOpList(unit.create, job.compatibility);
            optimizeVariablesInOpList(unit.update, job.compatibility);
            try {
                for (var _e = (e_2 = void 0, __values(unit.create)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var op = _f.value;
                    if (op.kind === ir.OpKind.Listener) {
                        optimizeVariablesInOpList(op.handlerOps, job.compatibility);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
exports.phaseVariableOptimization = phaseVariableOptimization;
var Fence;
(function (Fence) {
    Fence[Fence["None"] = 0] = "None";
    Fence[Fence["ViewContextRead"] = 1] = "ViewContextRead";
    Fence[Fence["ViewContextWrite"] = 3] = "ViewContextWrite";
    Fence[Fence["SideEffectful"] = 4] = "SideEffectful";
})(Fence || (Fence = {}));
function optimizeVariablesInOpList(ops, compatibility) {
    var e_3, _a, e_4, _b, e_5, _c, e_6, _d;
    var varDecls = new Map();
    var varUsages = new Map();
    var varRemoteUsages = new Set();
    var opMap = new Map();
    try {
        for (var ops_1 = __values(ops), ops_1_1 = ops_1.next(); !ops_1_1.done; ops_1_1 = ops_1.next()) {
            var op = ops_1_1.value;
            if (op.kind === ir.OpKind.Variable) {
                if (varDecls.has(op.xref) || varUsages.has(op.xref)) {
                    throw new Error("Should not see two declarations of the same variable: ".concat(op.xref));
                }
                varDecls.set(op.xref, op);
                varUsages.set(op.xref, 0);
            }
            opMap.set(op, collectOpInfo(op));
            countVariableUsages(op, varUsages, varRemoteUsages);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (ops_1_1 && !ops_1_1.done && (_a = ops_1.return)) _a.call(ops_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    var contextIsUsed = false;
    try {
        for (var _e = __values(ops.reversed()), _f = _e.next(); !_f.done; _f = _e.next()) {
            var op = _f.value;
            var opInfo = opMap.get(op);
            if (op.kind === ir.OpKind.Variable && varUsages.get(op.xref) === 0) {
                if ((contextIsUsed && opInfo.fences & Fence.ViewContextWrite) ||
                    (opInfo.fences & Fence.SideEffectful)) {
                    var stmtOp = ir.createStatementOp(op.initializer.toStmt());
                    opMap.set(stmtOp, opInfo);
                    ir.OpList.replace(op, stmtOp);
                }
                else {
                    uncountVariableUsages(op, varUsages);
                    ir.OpList.remove(op);
                }
                opMap.delete(op);
                varDecls.delete(op.xref);
                varUsages.delete(op.xref);
                continue;
            }
            if (opInfo.fences & Fence.ViewContextRead) {
                contextIsUsed = true;
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_4) throw e_4.error; }
    }
    var toInline = [];
    try {
        for (var varUsages_1 = __values(varUsages), varUsages_1_1 = varUsages_1.next(); !varUsages_1_1.done; varUsages_1_1 = varUsages_1.next()) {
            var _g = __read(varUsages_1_1.value, 2), id = _g[0], count = _g[1];
            if (count !== 1) {
                continue;
            }
            if (varRemoteUsages.has(id)) {
                continue;
            }
            toInline.push(id);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (varUsages_1_1 && !varUsages_1_1.done && (_c = varUsages_1.return)) _c.call(varUsages_1);
        }
        finally { if (e_5) throw e_5.error; }
    }
    var candidate;
    while (candidate = toInline.pop()) {
        var decl = varDecls.get(candidate);
        var varInfo = opMap.get(decl);
        for (var targetOp = decl.next; targetOp.kind !== ir.OpKind.ListEnd; targetOp = targetOp.next) {
            var opInfo = opMap.get(targetOp);
            if (opInfo.variablesUsed.has(candidate)) {
                if (compatibility === ir.CompatibilityMode.TemplateDefinitionBuilder &&
                    !allowConservativeInlining(decl, targetOp)) {
                    break;
                }
                if (tryInlineVariableInitializer(candidate, decl.initializer, targetOp, varInfo.fences)) {
                    opInfo.variablesUsed.delete(candidate);
                    try {
                        for (var _h = (e_6 = void 0, __values(varInfo.variablesUsed)), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var id = _j.value;
                            opInfo.variablesUsed.add(id);
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_d = _h.return)) _d.call(_h);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                    opInfo.fences |= varInfo.fences;
                    varDecls.delete(candidate);
                    varUsages.delete(candidate);
                    opMap.delete(decl);
                    ir.OpList.remove(decl);
                }
                break;
            }
            if (!safeToInlinePastFences(opInfo.fences, varInfo.fences)) {
                break;
            }
        }
    }
}
function fencesForIrExpression(expr) {
    switch (expr.kind) {
        case ir.ExpressionKind.NextContext:
            return Fence.ViewContextWrite;
        case ir.ExpressionKind.RestoreView:
            return Fence.ViewContextWrite | Fence.SideEffectful;
        case ir.ExpressionKind.Reference:
            return Fence.ViewContextRead;
        default:
            return Fence.None;
    }
}
function collectOpInfo(op) {
    var fences = Fence.None;
    var variablesUsed = new Set();
    ir.visitExpressionsInOp(op, function (expr) {
        if (!ir.isIrExpression(expr)) {
            return;
        }
        switch (expr.kind) {
            case ir.ExpressionKind.ReadVariable:
                variablesUsed.add(expr.xref);
                break;
            default:
                fences |= fencesForIrExpression(expr);
        }
    });
    return { fences: fences, variablesUsed: variablesUsed };
}
function countVariableUsages(op, varUsages, varRemoteUsage) {
    ir.visitExpressionsInOp(op, function (expr, flags) {
        if (!ir.isIrExpression(expr)) {
            return;
        }
        if (expr.kind !== ir.ExpressionKind.ReadVariable) {
            return;
        }
        var count = varUsages.get(expr.xref);
        if (count === undefined) {
            return;
        }
        varUsages.set(expr.xref, count + 1);
        if (flags & ir.VisitorContextFlag.InChildOperation) {
            varRemoteUsage.add(expr.xref);
        }
    });
}
function uncountVariableUsages(op, varUsages) {
    ir.visitExpressionsInOp(op, function (expr) {
        if (!ir.isIrExpression(expr)) {
            return;
        }
        if (expr.kind !== ir.ExpressionKind.ReadVariable) {
            return;
        }
        var count = varUsages.get(expr.xref);
        if (count === undefined) {
            return;
        }
        else if (count === 0) {
            throw new Error("Inaccurate variable count: ".concat(expr.xref, " - found another read but count is already 0"));
        }
        varUsages.set(expr.xref, count - 1);
    });
}
function safeToInlinePastFences(fences, declFences) {
    if (fences & Fence.ViewContextWrite) {
        if (declFences & Fence.ViewContextRead) {
            return false;
        }
    }
    else if (fences & Fence.ViewContextRead) {
        if (declFences & Fence.ViewContextWrite) {
            return false;
        }
    }
    return true;
}
function tryInlineVariableInitializer(id, initializer, target, declFences) {
    var inlined = false;
    var inliningAllowed = true;
    ir.transformExpressionsInOp(target, function (expr, flags) {
        if (!ir.isIrExpression(expr)) {
            return expr;
        }
        if (inlined || !inliningAllowed) {
            return expr;
        }
        else if ((flags & ir.VisitorContextFlag.InChildOperation) && (declFences & Fence.ViewContextRead)) {
            return expr;
        }
        switch (expr.kind) {
            case ir.ExpressionKind.ReadVariable:
                if (expr.xref === id) {
                    inlined = true;
                    return initializer;
                }
                break;
            default:
                var exprFences = fencesForIrExpression(expr);
                inliningAllowed = inliningAllowed && safeToInlinePastFences(exprFences, declFences);
                break;
        }
        return expr;
    }, ir.VisitorContextFlag.None);
    return inlined;
}
function allowConservativeInlining(decl, target) {
    switch (decl.variable.kind) {
        case ir.SemanticVariableKind.Identifier:
            return false;
        case ir.SemanticVariableKind.Context:
            return target.kind === ir.OpKind.Variable;
        default:
            return true;
    }
}
