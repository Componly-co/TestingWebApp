"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInjectorType = exports.compileInjector = void 0;
var o = __importStar(require("../output/output_ast"));
var r3_identifiers_1 = require("./r3_identifiers");
var util_1 = require("./view/util");
function compileInjector(meta) {
    var definitionMap = new util_1.DefinitionMap();
    if (meta.providers !== null) {
        definitionMap.set('providers', meta.providers);
    }
    if (meta.imports.length > 0) {
        definitionMap.set('imports', o.literalArr(meta.imports));
    }
    var expression = o.importExpr(r3_identifiers_1.Identifiers.defineInjector).callFn([definitionMap.toLiteralMap()], undefined, true);
    var type = createInjectorType(meta);
    return { expression: expression, type: type, statements: [] };
}
exports.compileInjector = compileInjector;
function createInjectorType(meta) {
    return new o.ExpressionType(o.importExpr(r3_identifiers_1.Identifiers.InjectorDeclaration, [new o.ExpressionType(meta.type.type)]));
}
exports.createInjectorType = createInjectorType;
