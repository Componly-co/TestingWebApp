"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitAll = exports.RecursiveVisitor = exports.Icu = exports.Reference = exports.Variable = exports.Content = exports.Template = exports.IfBlockBranch = exports.IfBlock = exports.ForLoopBlockEmpty = exports.ForLoopBlock = exports.SwitchBlockCase = exports.SwitchBlock = exports.DeferredBlock = exports.DeferredBlockError = exports.DeferredBlockLoading = exports.DeferredBlockPlaceholder = exports.ViewportDeferredTrigger = exports.InteractionDeferredTrigger = exports.TimerDeferredTrigger = exports.HoverDeferredTrigger = exports.ImmediateDeferredTrigger = exports.IdleDeferredTrigger = exports.BoundDeferredTrigger = exports.DeferredTrigger = exports.Element = exports.BoundEvent = exports.BoundAttribute = exports.TextAttribute = exports.BoundText = exports.Text = exports.Comment = void 0;
var Comment = (function () {
    function Comment(value, sourceSpan) {
        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    Comment.prototype.visit = function (_visitor) {
        throw new Error('visit() not implemented for Comment');
    };
    return Comment;
}());
exports.Comment = Comment;
var Text = (function () {
    function Text(value, sourceSpan) {
        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    Text.prototype.visit = function (visitor) {
        return visitor.visitText(this);
    };
    return Text;
}());
exports.Text = Text;
var BoundText = (function () {
    function BoundText(value, sourceSpan, i18n) {
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.i18n = i18n;
    }
    BoundText.prototype.visit = function (visitor) {
        return visitor.visitBoundText(this);
    };
    return BoundText;
}());
exports.BoundText = BoundText;
var TextAttribute = (function () {
    function TextAttribute(name, value, sourceSpan, keySpan, valueSpan, i18n) {
        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
        this.i18n = i18n;
    }
    TextAttribute.prototype.visit = function (visitor) {
        return visitor.visitTextAttribute(this);
    };
    return TextAttribute;
}());
exports.TextAttribute = TextAttribute;
var BoundAttribute = (function () {
    function BoundAttribute(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {
        this.name = name;
        this.type = type;
        this.securityContext = securityContext;
        this.value = value;
        this.unit = unit;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
        this.i18n = i18n;
    }
    BoundAttribute.fromBoundElementProperty = function (prop, i18n) {
        if (prop.keySpan === undefined) {
            throw new Error("Unexpected state: keySpan must be defined for bound attributes but was not for ".concat(prop.name, ": ").concat(prop.sourceSpan));
        }
        return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);
    };
    BoundAttribute.prototype.visit = function (visitor) {
        return visitor.visitBoundAttribute(this);
    };
    return BoundAttribute;
}());
exports.BoundAttribute = BoundAttribute;
var BoundEvent = (function () {
    function BoundEvent(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {
        this.name = name;
        this.type = type;
        this.handler = handler;
        this.target = target;
        this.phase = phase;
        this.sourceSpan = sourceSpan;
        this.handlerSpan = handlerSpan;
        this.keySpan = keySpan;
    }
    BoundEvent.fromParsedEvent = function (event) {
        var target = event.type === 0 ? event.targetOrPhase : null;
        var phase = event.type === 1 ? event.targetOrPhase : null;
        if (event.keySpan === undefined) {
            throw new Error("Unexpected state: keySpan must be defined for bound event but was not for ".concat(event.name, ": ").concat(event.sourceSpan));
        }
        return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);
    };
    BoundEvent.prototype.visit = function (visitor) {
        return visitor.visitBoundEvent(this);
    };
    return BoundEvent;
}());
exports.BoundEvent = BoundEvent;
var Element = (function () {
    function Element(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
        this.name = name;
        this.attributes = attributes;
        this.inputs = inputs;
        this.outputs = outputs;
        this.children = children;
        this.references = references;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
        this.i18n = i18n;
    }
    Element.prototype.visit = function (visitor) {
        return visitor.visitElement(this);
    };
    return Element;
}());
exports.Element = Element;
var DeferredTrigger = (function () {
    function DeferredTrigger(sourceSpan) {
        this.sourceSpan = sourceSpan;
    }
    DeferredTrigger.prototype.visit = function (visitor) {
        return visitor.visitDeferredTrigger(this);
    };
    return DeferredTrigger;
}());
exports.DeferredTrigger = DeferredTrigger;
var BoundDeferredTrigger = (function (_super) {
    __extends(BoundDeferredTrigger, _super);
    function BoundDeferredTrigger(value, sourceSpan) {
        var _this = _super.call(this, sourceSpan) || this;
        _this.value = value;
        return _this;
    }
    return BoundDeferredTrigger;
}(DeferredTrigger));
exports.BoundDeferredTrigger = BoundDeferredTrigger;
var IdleDeferredTrigger = (function (_super) {
    __extends(IdleDeferredTrigger, _super);
    function IdleDeferredTrigger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return IdleDeferredTrigger;
}(DeferredTrigger));
exports.IdleDeferredTrigger = IdleDeferredTrigger;
var ImmediateDeferredTrigger = (function (_super) {
    __extends(ImmediateDeferredTrigger, _super);
    function ImmediateDeferredTrigger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ImmediateDeferredTrigger;
}(DeferredTrigger));
exports.ImmediateDeferredTrigger = ImmediateDeferredTrigger;
var HoverDeferredTrigger = (function (_super) {
    __extends(HoverDeferredTrigger, _super);
    function HoverDeferredTrigger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return HoverDeferredTrigger;
}(DeferredTrigger));
exports.HoverDeferredTrigger = HoverDeferredTrigger;
var TimerDeferredTrigger = (function (_super) {
    __extends(TimerDeferredTrigger, _super);
    function TimerDeferredTrigger(delay, sourceSpan) {
        var _this = _super.call(this, sourceSpan) || this;
        _this.delay = delay;
        return _this;
    }
    return TimerDeferredTrigger;
}(DeferredTrigger));
exports.TimerDeferredTrigger = TimerDeferredTrigger;
var InteractionDeferredTrigger = (function (_super) {
    __extends(InteractionDeferredTrigger, _super);
    function InteractionDeferredTrigger(reference, sourceSpan) {
        var _this = _super.call(this, sourceSpan) || this;
        _this.reference = reference;
        return _this;
    }
    return InteractionDeferredTrigger;
}(DeferredTrigger));
exports.InteractionDeferredTrigger = InteractionDeferredTrigger;
var ViewportDeferredTrigger = (function (_super) {
    __extends(ViewportDeferredTrigger, _super);
    function ViewportDeferredTrigger(reference, sourceSpan) {
        var _this = _super.call(this, sourceSpan) || this;
        _this.reference = reference;
        return _this;
    }
    return ViewportDeferredTrigger;
}(DeferredTrigger));
exports.ViewportDeferredTrigger = ViewportDeferredTrigger;
var DeferredBlockPlaceholder = (function () {
    function DeferredBlockPlaceholder(children, minimumTime, sourceSpan, startSourceSpan, endSourceSpan) {
        this.children = children;
        this.minimumTime = minimumTime;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    DeferredBlockPlaceholder.prototype.visit = function (visitor) {
        return visitor.visitDeferredBlockPlaceholder(this);
    };
    return DeferredBlockPlaceholder;
}());
exports.DeferredBlockPlaceholder = DeferredBlockPlaceholder;
var DeferredBlockLoading = (function () {
    function DeferredBlockLoading(children, afterTime, minimumTime, sourceSpan, startSourceSpan, endSourceSpan) {
        this.children = children;
        this.afterTime = afterTime;
        this.minimumTime = minimumTime;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    DeferredBlockLoading.prototype.visit = function (visitor) {
        return visitor.visitDeferredBlockLoading(this);
    };
    return DeferredBlockLoading;
}());
exports.DeferredBlockLoading = DeferredBlockLoading;
var DeferredBlockError = (function () {
    function DeferredBlockError(children, sourceSpan, startSourceSpan, endSourceSpan) {
        this.children = children;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    DeferredBlockError.prototype.visit = function (visitor) {
        return visitor.visitDeferredBlockError(this);
    };
    return DeferredBlockError;
}());
exports.DeferredBlockError = DeferredBlockError;
var DeferredBlock = (function () {
    function DeferredBlock(children, triggers, prefetchTriggers, placeholder, loading, error, sourceSpan, startSourceSpan, endSourceSpan) {
        this.children = children;
        this.placeholder = placeholder;
        this.loading = loading;
        this.error = error;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
        this.triggers = triggers;
        this.prefetchTriggers = prefetchTriggers;
        this.definedTriggers = Object.keys(triggers);
        this.definedPrefetchTriggers = Object.keys(prefetchTriggers);
    }
    DeferredBlock.prototype.visit = function (visitor) {
        return visitor.visitDeferredBlock(this);
    };
    DeferredBlock.prototype.visitAll = function (visitor) {
        this.visitTriggers(this.definedTriggers, this.triggers, visitor);
        this.visitTriggers(this.definedPrefetchTriggers, this.prefetchTriggers, visitor);
        visitAll(visitor, this.children);
        this.placeholder && visitor.visitDeferredBlockPlaceholder(this.placeholder);
        this.loading && visitor.visitDeferredBlockLoading(this.loading);
        this.error && visitor.visitDeferredBlockError(this.error);
    };
    DeferredBlock.prototype.visitTriggers = function (keys, triggers, visitor) {
        var e_1, _a;
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                visitor.visitDeferredTrigger(triggers[key]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    return DeferredBlock;
}());
exports.DeferredBlock = DeferredBlock;
var SwitchBlock = (function () {
    function SwitchBlock(expression, cases, sourceSpan, startSourceSpan, endSourceSpan) {
        this.expression = expression;
        this.cases = cases;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    SwitchBlock.prototype.visit = function (visitor) {
        return visitor.visitSwitchBlock(this);
    };
    return SwitchBlock;
}());
exports.SwitchBlock = SwitchBlock;
var SwitchBlockCase = (function () {
    function SwitchBlockCase(expression, children, sourceSpan, startSourceSpan) {
        this.expression = expression;
        this.children = children;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
    }
    SwitchBlockCase.prototype.visit = function (visitor) {
        return visitor.visitSwitchBlockCase(this);
    };
    return SwitchBlockCase;
}());
exports.SwitchBlockCase = SwitchBlockCase;
var ForLoopBlock = (function () {
    function ForLoopBlock(itemName, expression, trackBy, contextVariables, children, empty, sourceSpan, startSourceSpan, endSourceSpan) {
        this.itemName = itemName;
        this.expression = expression;
        this.trackBy = trackBy;
        this.contextVariables = contextVariables;
        this.children = children;
        this.empty = empty;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    ForLoopBlock.prototype.visit = function (visitor) {
        return visitor.visitForLoopBlock(this);
    };
    return ForLoopBlock;
}());
exports.ForLoopBlock = ForLoopBlock;
var ForLoopBlockEmpty = (function () {
    function ForLoopBlockEmpty(children, sourceSpan, startSourceSpan) {
        this.children = children;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
    }
    ForLoopBlockEmpty.prototype.visit = function (visitor) {
        return visitor.visitForLoopBlockEmpty(this);
    };
    return ForLoopBlockEmpty;
}());
exports.ForLoopBlockEmpty = ForLoopBlockEmpty;
var IfBlock = (function () {
    function IfBlock(branches, sourceSpan, startSourceSpan, endSourceSpan) {
        this.branches = branches;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    IfBlock.prototype.visit = function (visitor) {
        return visitor.visitIfBlock(this);
    };
    return IfBlock;
}());
exports.IfBlock = IfBlock;
var IfBlockBranch = (function () {
    function IfBlockBranch(expression, children, expressionAlias, sourceSpan, startSourceSpan) {
        this.expression = expression;
        this.children = children;
        this.expressionAlias = expressionAlias;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
    }
    IfBlockBranch.prototype.visit = function (visitor) {
        return visitor.visitIfBlockBranch(this);
    };
    return IfBlockBranch;
}());
exports.IfBlockBranch = IfBlockBranch;
var Template = (function () {
    function Template(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
        this.tagName = tagName;
        this.attributes = attributes;
        this.inputs = inputs;
        this.outputs = outputs;
        this.templateAttrs = templateAttrs;
        this.children = children;
        this.references = references;
        this.variables = variables;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
        this.i18n = i18n;
    }
    Template.prototype.visit = function (visitor) {
        return visitor.visitTemplate(this);
    };
    return Template;
}());
exports.Template = Template;
var Content = (function () {
    function Content(selector, attributes, sourceSpan, i18n) {
        this.selector = selector;
        this.attributes = attributes;
        this.sourceSpan = sourceSpan;
        this.i18n = i18n;
        this.name = 'ng-content';
    }
    Content.prototype.visit = function (visitor) {
        return visitor.visitContent(this);
    };
    return Content;
}());
exports.Content = Content;
var Variable = (function () {
    function Variable(name, value, sourceSpan, keySpan, valueSpan) {
        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
    }
    Variable.prototype.visit = function (visitor) {
        return visitor.visitVariable(this);
    };
    return Variable;
}());
exports.Variable = Variable;
var Reference = (function () {
    function Reference(name, value, sourceSpan, keySpan, valueSpan) {
        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.keySpan = keySpan;
        this.valueSpan = valueSpan;
    }
    Reference.prototype.visit = function (visitor) {
        return visitor.visitReference(this);
    };
    return Reference;
}());
exports.Reference = Reference;
var Icu = (function () {
    function Icu(vars, placeholders, sourceSpan, i18n) {
        this.vars = vars;
        this.placeholders = placeholders;
        this.sourceSpan = sourceSpan;
        this.i18n = i18n;
    }
    Icu.prototype.visit = function (visitor) {
        return visitor.visitIcu(this);
    };
    return Icu;
}());
exports.Icu = Icu;
var RecursiveVisitor = (function () {
    function RecursiveVisitor() {
    }
    RecursiveVisitor.prototype.visitElement = function (element) {
        visitAll(this, element.attributes);
        visitAll(this, element.inputs);
        visitAll(this, element.outputs);
        visitAll(this, element.children);
        visitAll(this, element.references);
    };
    RecursiveVisitor.prototype.visitTemplate = function (template) {
        visitAll(this, template.attributes);
        visitAll(this, template.inputs);
        visitAll(this, template.outputs);
        visitAll(this, template.children);
        visitAll(this, template.references);
        visitAll(this, template.variables);
    };
    RecursiveVisitor.prototype.visitDeferredBlock = function (deferred) {
        deferred.visitAll(this);
    };
    RecursiveVisitor.prototype.visitDeferredBlockPlaceholder = function (block) {
        visitAll(this, block.children);
    };
    RecursiveVisitor.prototype.visitDeferredBlockError = function (block) {
        visitAll(this, block.children);
    };
    RecursiveVisitor.prototype.visitDeferredBlockLoading = function (block) {
        visitAll(this, block.children);
    };
    RecursiveVisitor.prototype.visitSwitchBlock = function (block) {
        visitAll(this, block.cases);
    };
    RecursiveVisitor.prototype.visitSwitchBlockCase = function (block) {
        visitAll(this, block.children);
    };
    RecursiveVisitor.prototype.visitForLoopBlock = function (block) {
        var _a;
        visitAll(this, block.children);
        (_a = block.empty) === null || _a === void 0 ? void 0 : _a.visit(this);
    };
    RecursiveVisitor.prototype.visitForLoopBlockEmpty = function (block) {
        visitAll(this, block.children);
    };
    RecursiveVisitor.prototype.visitIfBlock = function (block) {
        visitAll(this, block.branches);
    };
    RecursiveVisitor.prototype.visitIfBlockBranch = function (block) {
        visitAll(this, block.children);
    };
    RecursiveVisitor.prototype.visitContent = function (content) { };
    RecursiveVisitor.prototype.visitVariable = function (variable) { };
    RecursiveVisitor.prototype.visitReference = function (reference) { };
    RecursiveVisitor.prototype.visitTextAttribute = function (attribute) { };
    RecursiveVisitor.prototype.visitBoundAttribute = function (attribute) { };
    RecursiveVisitor.prototype.visitBoundEvent = function (attribute) { };
    RecursiveVisitor.prototype.visitText = function (text) { };
    RecursiveVisitor.prototype.visitBoundText = function (text) { };
    RecursiveVisitor.prototype.visitIcu = function (icu) { };
    RecursiveVisitor.prototype.visitDeferredTrigger = function (trigger) { };
    return RecursiveVisitor;
}());
exports.RecursiveVisitor = RecursiveVisitor;
function visitAll(visitor, nodes) {
    var e_2, _a, e_3, _b;
    var result = [];
    if (visitor.visit) {
        try {
            for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                var node = nodes_1_1.value;
                visitor.visit(node) || node.visit(visitor);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    else {
        try {
            for (var nodes_2 = __values(nodes), nodes_2_1 = nodes_2.next(); !nodes_2_1.done; nodes_2_1 = nodes_2.next()) {
                var node = nodes_2_1.value;
                var newNode = node.visit(visitor);
                if (newNode) {
                    result.push(newNode);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (nodes_2_1 && !nodes_2_1.done && (_b = nodes_2.return)) _b.call(nodes_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    return result;
}
exports.visitAll = visitAll;
