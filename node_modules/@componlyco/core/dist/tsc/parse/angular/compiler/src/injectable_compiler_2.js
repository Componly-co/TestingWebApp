"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInjectableType = exports.compileInjectable = void 0;
var o = __importStar(require("./output/output_ast"));
var r3_factory_1 = require("./render3/r3_factory");
var r3_identifiers_1 = require("./render3/r3_identifiers");
var util_1 = require("./render3/util");
var util_2 = require("./render3/view/util");
function compileInjectable(meta, resolveForwardRefs) {
    var result = null;
    var factoryMeta = {
        name: meta.name,
        type: meta.type,
        typeArgumentCount: meta.typeArgumentCount,
        deps: [],
        target: r3_factory_1.FactoryTarget.Injectable,
    };
    if (meta.useClass !== undefined) {
        var useClassOnSelf = meta.useClass.expression.isEquivalent(meta.type.value);
        var deps = undefined;
        if (meta.deps !== undefined) {
            deps = meta.deps;
        }
        if (deps !== undefined) {
            result = (0, r3_factory_1.compileFactoryFunction)(__assign(__assign({}, factoryMeta), { delegate: meta.useClass.expression, delegateDeps: deps, delegateType: r3_factory_1.R3FactoryDelegateType.Class }));
        }
        else if (useClassOnSelf) {
            result = (0, r3_factory_1.compileFactoryFunction)(factoryMeta);
        }
        else {
            result = {
                statements: [],
                expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)
            };
        }
    }
    else if (meta.useFactory !== undefined) {
        if (meta.deps !== undefined) {
            result = (0, r3_factory_1.compileFactoryFunction)(__assign(__assign({}, factoryMeta), { delegate: meta.useFactory, delegateDeps: meta.deps || [], delegateType: r3_factory_1.R3FactoryDelegateType.Function }));
        }
        else {
            result = {
                statements: [],
                expression: o.fn([], [new o.ReturnStatement(meta.useFactory.callFn([]))])
            };
        }
    }
    else if (meta.useValue !== undefined) {
        result = (0, r3_factory_1.compileFactoryFunction)(__assign(__assign({}, factoryMeta), { expression: meta.useValue.expression }));
    }
    else if (meta.useExisting !== undefined) {
        result = (0, r3_factory_1.compileFactoryFunction)(__assign(__assign({}, factoryMeta), { expression: o.importExpr(r3_identifiers_1.Identifiers.inject).callFn([meta.useExisting.expression]) }));
    }
    else {
        result = {
            statements: [],
            expression: delegateToFactory(meta.type.value, meta.type.value, resolveForwardRefs)
        };
    }
    var token = meta.type.value;
    var injectableProps = new util_2.DefinitionMap();
    injectableProps.set('token', token);
    injectableProps.set('factory', result.expression);
    if (meta.providedIn.expression.value !== null) {
        injectableProps.set('providedIn', (0, util_1.convertFromMaybeForwardRefExpression)(meta.providedIn));
    }
    var expression = o.importExpr(r3_identifiers_1.Identifiers.ɵɵdefineInjectable)
        .callFn([injectableProps.toLiteralMap()], undefined, true);
    return {
        expression: expression,
        type: createInjectableType(meta),
        statements: result.statements,
    };
}
exports.compileInjectable = compileInjectable;
function createInjectableType(meta) {
    return new o.ExpressionType(o.importExpr(r3_identifiers_1.Identifiers.InjectableDeclaration, [(0, util_1.typeWithParameters)(meta.type.type, meta.typeArgumentCount)]));
}
exports.createInjectableType = createInjectableType;
function delegateToFactory(type, useType, unwrapForwardRefs) {
    if (type.node === useType.node) {
        return useType.prop('ɵfac');
    }
    if (!unwrapForwardRefs) {
        return createFactoryFunction(useType);
    }
    var unwrappedType = o.importExpr(r3_identifiers_1.Identifiers.resolveForwardRef).callFn([useType]);
    return createFactoryFunction(unwrappedType);
}
function createFactoryFunction(type) {
    return o.fn([new o.FnParam('t', o.DYNAMIC_TYPE)], [new o.ReturnStatement(type.prop('ɵfac').callFn([o.variable('t')]))]);
}
