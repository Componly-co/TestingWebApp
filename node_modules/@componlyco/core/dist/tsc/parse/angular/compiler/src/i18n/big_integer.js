"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigIntExponentiation = exports.BigIntForMultiplication = exports.BigInteger = void 0;
var BigInteger = (function () {
    function BigInteger(digits) {
        this.digits = digits;
    }
    BigInteger.zero = function () {
        return new BigInteger([0]);
    };
    BigInteger.one = function () {
        return new BigInteger([1]);
    };
    BigInteger.prototype.clone = function () {
        return new BigInteger(this.digits.slice());
    };
    BigInteger.prototype.add = function (other) {
        var result = this.clone();
        result.addToSelf(other);
        return result;
    };
    BigInteger.prototype.addToSelf = function (other) {
        var maxNrOfDigits = Math.max(this.digits.length, other.digits.length);
        var carry = 0;
        for (var i = 0; i < maxNrOfDigits; i++) {
            var digitSum = carry;
            if (i < this.digits.length) {
                digitSum += this.digits[i];
            }
            if (i < other.digits.length) {
                digitSum += other.digits[i];
            }
            if (digitSum >= 10) {
                this.digits[i] = digitSum - 10;
                carry = 1;
            }
            else {
                this.digits[i] = digitSum;
                carry = 0;
            }
        }
        if (carry > 0) {
            this.digits[maxNrOfDigits] = 1;
        }
    };
    BigInteger.prototype.toString = function () {
        var res = '';
        for (var i = this.digits.length - 1; i >= 0; i--) {
            res += this.digits[i];
        }
        return res;
    };
    return BigInteger;
}());
exports.BigInteger = BigInteger;
var BigIntForMultiplication = (function () {
    function BigIntForMultiplication(value) {
        this.powerOfTwos = [value];
    }
    BigIntForMultiplication.prototype.getValue = function () {
        return this.powerOfTwos[0];
    };
    BigIntForMultiplication.prototype.multiplyBy = function (num) {
        var product = BigInteger.zero();
        this.multiplyByAndAddTo(num, product);
        return product;
    };
    BigIntForMultiplication.prototype.multiplyByAndAddTo = function (num, result) {
        for (var exponent = 0; num !== 0; num = num >>> 1, exponent++) {
            if (num & 1) {
                var value = this.getMultipliedByPowerOfTwo(exponent);
                result.addToSelf(value);
            }
        }
    };
    BigIntForMultiplication.prototype.getMultipliedByPowerOfTwo = function (exponent) {
        for (var i = this.powerOfTwos.length; i <= exponent; i++) {
            var previousPower = this.powerOfTwos[i - 1];
            this.powerOfTwos[i] = previousPower.add(previousPower);
        }
        return this.powerOfTwos[exponent];
    };
    return BigIntForMultiplication;
}());
exports.BigIntForMultiplication = BigIntForMultiplication;
var BigIntExponentiation = (function () {
    function BigIntExponentiation(base) {
        this.base = base;
        this.exponents = [new BigIntForMultiplication(BigInteger.one())];
    }
    BigIntExponentiation.prototype.toThePowerOf = function (exponent) {
        for (var i = this.exponents.length; i <= exponent; i++) {
            var value = this.exponents[i - 1].multiplyBy(this.base);
            this.exponents[i] = new BigIntForMultiplication(value);
        }
        return this.exponents[exponent];
    };
    return BigIntExponentiation;
}());
exports.BigIntExponentiation = BigIntExponentiation;
