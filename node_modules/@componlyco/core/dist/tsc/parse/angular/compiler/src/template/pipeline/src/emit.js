"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitHostBindingFunction = exports.emitTemplateFn = exports.transformHostBinding = exports.transformTemplate = void 0;
var o = __importStar(require("../../../../src/output/output_ast"));
var ir = __importStar(require("../ir"));
var align_pipe_variadic_var_offset_1 = require("./phases/align_pipe_variadic_var_offset");
var any_cast_1 = require("./phases/any_cast");
var attribute_extraction_1 = require("./phases/attribute_extraction");
var binding_specialization_1 = require("./phases/binding_specialization");
var chaining_1 = require("./phases/chaining");
var const_collection_1 = require("./phases/const_collection");
var empty_elements_1 = require("./phases/empty_elements");
var expand_safe_reads_1 = require("./phases/expand_safe_reads");
var generate_advance_1 = require("./phases/generate_advance");
var generate_variables_1 = require("./phases/generate_variables");
var host_style_property_parsing_1 = require("./phases/host_style_property_parsing");
var local_refs_1 = require("./phases/local_refs");
var namespace_1 = require("./phases/namespace");
var naming_1 = require("./phases/naming");
var next_context_merging_1 = require("./phases/next_context_merging");
var ng_container_1 = require("./phases/ng_container");
var no_listeners_on_templates_1 = require("./phases/no_listeners_on_templates");
var nonbindable_1 = require("./phases/nonbindable");
var nullish_coalescing_1 = require("./phases/nullish_coalescing");
var parse_extracted_styles_1 = require("./phases/parse_extracted_styles");
var pipe_creation_1 = require("./phases/pipe_creation");
var pipe_variadic_1 = require("./phases/pipe_variadic");
var property_ordering_1 = require("./phases/property_ordering");
var pure_function_extraction_1 = require("./phases/pure_function_extraction");
var pure_literal_structures_1 = require("./phases/pure_literal_structures");
var reify_1 = require("./phases/reify");
var remove_empty_bindings_1 = require("./phases/remove_empty_bindings");
var resolve_contexts_1 = require("./phases/resolve_contexts");
var resolve_dollar_event_1 = require("./phases/resolve_dollar_event");
var resolve_names_1 = require("./phases/resolve_names");
var resolve_sanitizers_1 = require("./phases/resolve_sanitizers");
var save_restore_view_1 = require("./phases/save_restore_view");
var slot_allocation_1 = require("./phases/slot_allocation");
var style_binding_specialization_1 = require("./phases/style_binding_specialization");
var temporary_variables_1 = require("./phases/temporary_variables");
var var_counting_1 = require("./phases/var_counting");
var variable_optimization_1 = require("./phases/variable_optimization");
function transformTemplate(job) {
    (0, namespace_1.phaseNamespace)(job);
    (0, style_binding_specialization_1.phaseStyleBindingSpecialization)(job);
    (0, binding_specialization_1.phaseBindingSpecialization)(job);
    (0, attribute_extraction_1.phaseAttributeExtraction)(job);
    (0, parse_extracted_styles_1.phaseParseExtractedStyles)(job);
    (0, remove_empty_bindings_1.phaseRemoveEmptyBindings)(job);
    (0, no_listeners_on_templates_1.phaseNoListenersOnTemplates)(job);
    (0, pipe_creation_1.phasePipeCreation)(job);
    (0, pipe_variadic_1.phasePipeVariadic)(job);
    (0, pure_literal_structures_1.phasePureLiteralStructures)(job);
    (0, generate_variables_1.phaseGenerateVariables)(job);
    (0, save_restore_view_1.phaseSaveRestoreView)(job);
    (0, any_cast_1.phaseFindAnyCasts)(job);
    (0, resolve_dollar_event_1.phaseResolveDollarEvent)(job);
    (0, resolve_names_1.phaseResolveNames)(job);
    (0, resolve_contexts_1.phaseResolveContexts)(job);
    (0, resolve_sanitizers_1.phaseResolveSanitizers)(job);
    (0, local_refs_1.phaseLocalRefs)(job);
    (0, const_collection_1.phaseConstCollection)(job);
    (0, nullish_coalescing_1.phaseNullishCoalescing)(job);
    (0, expand_safe_reads_1.phaseExpandSafeReads)(job);
    (0, temporary_variables_1.phaseTemporaryVariables)(job);
    (0, slot_allocation_1.phaseSlotAllocation)(job);
    (0, var_counting_1.phaseVarCounting)(job);
    (0, generate_advance_1.phaseGenerateAdvance)(job);
    (0, variable_optimization_1.phaseVariableOptimization)(job);
    (0, naming_1.phaseNaming)(job);
    (0, next_context_merging_1.phaseMergeNextContext)(job);
    (0, ng_container_1.phaseNgContainer)(job);
    (0, empty_elements_1.phaseEmptyElements)(job);
    (0, nonbindable_1.phaseNonbindable)(job);
    (0, pure_function_extraction_1.phasePureFunctionExtraction)(job);
    (0, align_pipe_variadic_var_offset_1.phaseAlignPipeVariadicVarOffset)(job);
    (0, property_ordering_1.phasePropertyOrdering)(job);
    (0, reify_1.phaseReify)(job);
    (0, chaining_1.phaseChaining)(job);
}
exports.transformTemplate = transformTemplate;
function transformHostBinding(job) {
    (0, host_style_property_parsing_1.phaseHostStylePropertyParsing)(job);
    (0, style_binding_specialization_1.phaseStyleBindingSpecialization)(job);
    (0, binding_specialization_1.phaseBindingSpecialization)(job);
    (0, pure_literal_structures_1.phasePureLiteralStructures)(job);
    (0, nullish_coalescing_1.phaseNullishCoalescing)(job);
    (0, expand_safe_reads_1.phaseExpandSafeReads)(job);
    (0, temporary_variables_1.phaseTemporaryVariables)(job);
    (0, var_counting_1.phaseVarCounting)(job);
    (0, variable_optimization_1.phaseVariableOptimization)(job);
    (0, resolve_names_1.phaseResolveNames)(job);
    (0, resolve_contexts_1.phaseResolveContexts)(job);
    (0, naming_1.phaseNaming)(job);
    (0, pure_function_extraction_1.phasePureFunctionExtraction)(job);
    (0, property_ordering_1.phasePropertyOrdering)(job);
    (0, reify_1.phaseReify)(job);
    (0, chaining_1.phaseChaining)(job);
}
exports.transformHostBinding = transformHostBinding;
function emitTemplateFn(tpl, pool) {
    var rootFn = emitView(tpl.root);
    emitChildViews(tpl.root, pool);
    return rootFn;
}
exports.emitTemplateFn = emitTemplateFn;
function emitChildViews(parent, pool) {
    var e_1, _a;
    try {
        for (var _b = __values(parent.job.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var view = _c.value;
            if (view.parent !== parent.xref) {
                continue;
            }
            emitChildViews(view, pool);
            var viewFn = emitView(view);
            pool.statements.push(viewFn.toDeclStmt(viewFn.name));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
function emitView(view) {
    var e_2, _a, e_3, _b;
    if (view.fnName === null) {
        throw new Error("AssertionError: view ".concat(view.xref, " is unnamed"));
    }
    var createStatements = [];
    try {
        for (var _c = __values(view.create), _d = _c.next(); !_d.done; _d = _c.next()) {
            var op = _d.value;
            if (op.kind !== ir.OpKind.Statement) {
                throw new Error("AssertionError: expected all create ops to have been compiled, but got ".concat(ir.OpKind[op.kind]));
            }
            createStatements.push(op.statement);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_2) throw e_2.error; }
    }
    var updateStatements = [];
    try {
        for (var _e = __values(view.update), _f = _e.next(); !_f.done; _f = _e.next()) {
            var op = _f.value;
            if (op.kind !== ir.OpKind.Statement) {
                throw new Error("AssertionError: expected all update ops to have been compiled, but got ".concat(ir.OpKind[op.kind]));
            }
            updateStatements.push(op.statement);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_3) throw e_3.error; }
    }
    var createCond = maybeGenerateRfBlock(1, createStatements);
    var updateCond = maybeGenerateRfBlock(2, updateStatements);
    return o.fn([
        new o.FnParam('rf'),
        new o.FnParam('ctx'),
    ], __spreadArray(__spreadArray([], __read(createCond), false), __read(updateCond), false), undefined, undefined, view.fnName);
}
function maybeGenerateRfBlock(flag, statements) {
    if (statements.length === 0) {
        return [];
    }
    return [
        o.ifStmt(new o.BinaryOperatorExpr(o.BinaryOperator.BitwiseAnd, o.variable('rf'), o.literal(flag)), statements),
    ];
}
function emitHostBindingFunction(job) {
    var e_4, _a, e_5, _b;
    if (job.fnName === null) {
        throw new Error("AssertionError: host binding function is unnamed");
    }
    var createStatements = [];
    try {
        for (var _c = __values(job.create), _d = _c.next(); !_d.done; _d = _c.next()) {
            var op = _d.value;
            if (op.kind !== ir.OpKind.Statement) {
                throw new Error("AssertionError: expected all create ops to have been compiled, but got ".concat(ir.OpKind[op.kind]));
            }
            createStatements.push(op.statement);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_4) throw e_4.error; }
    }
    var updateStatements = [];
    try {
        for (var _e = __values(job.update), _f = _e.next(); !_f.done; _f = _e.next()) {
            var op = _f.value;
            if (op.kind !== ir.OpKind.Statement) {
                throw new Error("AssertionError: expected all update ops to have been compiled, but got ".concat(ir.OpKind[op.kind]));
            }
            updateStatements.push(op.statement);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_5) throw e_5.error; }
    }
    if (createStatements.length === 0 && updateStatements.length === 0) {
        return null;
    }
    var createCond = maybeGenerateRfBlock(1, createStatements);
    var updateCond = maybeGenerateRfBlock(2, updateStatements);
    return o.fn([
        new o.FnParam('rf'),
        new o.FnParam('ctx'),
    ], __spreadArray(__spreadArray([], __read(createCond), false), __read(updateCond), false), undefined, undefined, job.fnName);
}
exports.emitHostBindingFunction = emitHostBindingFunction;
