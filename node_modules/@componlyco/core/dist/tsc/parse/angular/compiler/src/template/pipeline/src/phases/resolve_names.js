"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phaseResolveNames = void 0;
var o = __importStar(require("../../../../output/output_ast"));
var ir = __importStar(require("../../ir"));
function phaseResolveNames(cpl) {
    var e_1, _a;
    try {
        for (var _b = __values(cpl.units), _c = _b.next(); !_c.done; _c = _b.next()) {
            var unit = _c.value;
            processLexicalScope(unit, unit.create, null);
            processLexicalScope(unit, unit.update, null);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
exports.phaseResolveNames = phaseResolveNames;
function processLexicalScope(unit, ops, savedView) {
    var e_2, _a, e_3, _b, e_4, _c;
    var scope = new Map();
    try {
        for (var ops_1 = __values(ops), ops_1_1 = ops_1.next(); !ops_1_1.done; ops_1_1 = ops_1.next()) {
            var op = ops_1_1.value;
            switch (op.kind) {
                case ir.OpKind.Variable:
                    switch (op.variable.kind) {
                        case ir.SemanticVariableKind.Identifier:
                            if (scope.has(op.variable.identifier)) {
                                continue;
                            }
                            scope.set(op.variable.identifier, op.xref);
                            break;
                        case ir.SemanticVariableKind.SavedView:
                            savedView = {
                                view: op.variable.view,
                                variable: op.xref,
                            };
                            break;
                    }
                    break;
                case ir.OpKind.Listener:
                    processLexicalScope(unit, op.handlerOps, savedView);
                    break;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (ops_1_1 && !ops_1_1.done && (_a = ops_1.return)) _a.call(ops_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        for (var ops_2 = __values(ops), ops_2_1 = ops_2.next(); !ops_2_1.done; ops_2_1 = ops_2.next()) {
            var op = ops_2_1.value;
            if (op.kind == ir.OpKind.Listener) {
                continue;
            }
            ir.transformExpressionsInOp(op, function (expr, flags) {
                if (expr instanceof ir.LexicalReadExpr) {
                    if (scope.has(expr.name)) {
                        return new ir.ReadVariableExpr(scope.get(expr.name));
                    }
                    else {
                        return new o.ReadPropExpr(new ir.ContextExpr(unit.job.root.xref), expr.name);
                    }
                }
                else if (expr instanceof ir.RestoreViewExpr && typeof expr.view === 'number') {
                    if (savedView === null || savedView.view !== expr.view) {
                        throw new Error("AssertionError: no saved view ".concat(expr.view, " from view ").concat(unit.xref));
                    }
                    expr.view = new ir.ReadVariableExpr(savedView.variable);
                    return expr;
                }
                else {
                    return expr;
                }
            }, ir.VisitorContextFlag.None);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (ops_2_1 && !ops_2_1.done && (_b = ops_2.return)) _b.call(ops_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
    try {
        for (var ops_3 = __values(ops), ops_3_1 = ops_3.next(); !ops_3_1.done; ops_3_1 = ops_3.next()) {
            var op = ops_3_1.value;
            ir.visitExpressionsInOp(op, function (expr) {
                if (expr instanceof ir.LexicalReadExpr) {
                    throw new Error("AssertionError: no lexical reads should remain, but found read of ".concat(expr.name));
                }
            });
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (ops_3_1 && !ops_3_1.done && (_c = ops_3.return)) _c.call(ops_3);
        }
        finally { if (e_4) throw e_4.error; }
    }
}
