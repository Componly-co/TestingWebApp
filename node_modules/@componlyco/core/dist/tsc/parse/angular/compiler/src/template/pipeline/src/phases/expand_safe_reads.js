"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phaseExpandSafeReads = void 0;
var o = __importStar(require("../../../../output/output_ast"));
var ir = __importStar(require("../../ir"));
function phaseExpandSafeReads(job) {
    var e_1, _a, e_2, _b;
    try {
        for (var _c = __values(job.units), _d = _c.next(); !_d.done; _d = _c.next()) {
            var unit = _d.value;
            try {
                for (var _e = (e_2 = void 0, __values(unit.ops())), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var op = _f.value;
                    ir.transformExpressionsInOp(op, function (e) { return safeTransform(e, { job: job }); }, ir.VisitorContextFlag.None);
                    ir.transformExpressionsInOp(op, ternaryTransform, ir.VisitorContextFlag.None);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
exports.phaseExpandSafeReads = phaseExpandSafeReads;
var requiresTemporary = [
    o.InvokeFunctionExpr, o.LiteralArrayExpr, o.LiteralMapExpr, ir.SafeInvokeFunctionExpr,
    ir.PipeBindingExpr
].map(function (e) { return e.constructor.name; });
function needsTemporaryInSafeAccess(e) {
    if (e instanceof o.UnaryOperatorExpr) {
        return needsTemporaryInSafeAccess(e.expr);
    }
    else if (e instanceof o.BinaryOperatorExpr) {
        return needsTemporaryInSafeAccess(e.lhs) || needsTemporaryInSafeAccess(e.rhs);
    }
    else if (e instanceof o.ConditionalExpr) {
        if (e.falseCase && needsTemporaryInSafeAccess(e.falseCase))
            return true;
        return needsTemporaryInSafeAccess(e.condition) || needsTemporaryInSafeAccess(e.trueCase);
    }
    else if (e instanceof o.NotExpr) {
        return needsTemporaryInSafeAccess(e.condition);
    }
    else if (e instanceof ir.AssignTemporaryExpr) {
        return needsTemporaryInSafeAccess(e.expr);
    }
    else if (e instanceof o.ReadPropExpr) {
        return needsTemporaryInSafeAccess(e.receiver);
    }
    else if (e instanceof o.ReadKeyExpr) {
        return needsTemporaryInSafeAccess(e.receiver) || needsTemporaryInSafeAccess(e.index);
    }
    return e instanceof o.InvokeFunctionExpr || e instanceof o.LiteralArrayExpr ||
        e instanceof o.LiteralMapExpr || e instanceof ir.SafeInvokeFunctionExpr ||
        e instanceof ir.PipeBindingExpr;
}
function temporariesIn(e) {
    var temporaries = new Set();
    ir.transformExpressionsInExpression(e, function (e) {
        if (e instanceof ir.AssignTemporaryExpr) {
            temporaries.add(e.xref);
        }
        return e;
    }, ir.VisitorContextFlag.None);
    return temporaries;
}
function eliminateTemporaryAssignments(e, tmps, ctx) {
    ir.transformExpressionsInExpression(e, function (e) {
        if (e instanceof ir.AssignTemporaryExpr && tmps.has(e.xref)) {
            var read = new ir.ReadTemporaryExpr(e.xref);
            return ctx.job.compatibility === ir.CompatibilityMode.TemplateDefinitionBuilder ?
                new ir.AssignTemporaryExpr(read, read.xref) :
                read;
        }
        return e;
    }, ir.VisitorContextFlag.None);
    return e;
}
function safeTernaryWithTemporary(guard, body, ctx) {
    var result;
    if (needsTemporaryInSafeAccess(guard)) {
        var xref = ctx.job.allocateXrefId();
        result = [new ir.AssignTemporaryExpr(guard, xref), new ir.ReadTemporaryExpr(xref)];
    }
    else {
        result = [guard, guard.clone()];
        eliminateTemporaryAssignments(result[1], temporariesIn(result[0]), ctx);
    }
    return new ir.SafeTernaryExpr(result[0], body(result[1]));
}
function isSafeAccessExpression(e) {
    return e instanceof ir.SafePropertyReadExpr || e instanceof ir.SafeKeyedReadExpr ||
        e instanceof ir.SafeInvokeFunctionExpr;
}
function isUnsafeAccessExpression(e) {
    return e instanceof o.ReadPropExpr || e instanceof o.ReadKeyExpr ||
        e instanceof o.InvokeFunctionExpr;
}
function isAccessExpression(e) {
    return isSafeAccessExpression(e) || isUnsafeAccessExpression(e);
}
function deepestSafeTernary(e) {
    if (isAccessExpression(e) && e.receiver instanceof ir.SafeTernaryExpr) {
        var st = e.receiver;
        while (st.expr instanceof ir.SafeTernaryExpr) {
            st = st.expr;
        }
        return st;
    }
    return null;
}
function safeTransform(e, ctx) {
    if (!isAccessExpression(e)) {
        return e;
    }
    var dst = deepestSafeTernary(e);
    if (dst) {
        if (e instanceof o.InvokeFunctionExpr) {
            dst.expr = dst.expr.callFn(e.args);
            return e.receiver;
        }
        if (e instanceof o.ReadPropExpr) {
            dst.expr = dst.expr.prop(e.name);
            return e.receiver;
        }
        if (e instanceof o.ReadKeyExpr) {
            dst.expr = dst.expr.key(e.index);
            return e.receiver;
        }
        if (e instanceof ir.SafeInvokeFunctionExpr) {
            dst.expr = safeTernaryWithTemporary(dst.expr, function (r) { return r.callFn(e.args); }, ctx);
            return e.receiver;
        }
        if (e instanceof ir.SafePropertyReadExpr) {
            dst.expr = safeTernaryWithTemporary(dst.expr, function (r) { return r.prop(e.name); }, ctx);
            return e.receiver;
        }
        if (e instanceof ir.SafeKeyedReadExpr) {
            dst.expr = safeTernaryWithTemporary(dst.expr, function (r) { return r.key(e.index); }, ctx);
            return e.receiver;
        }
    }
    else {
        if (e instanceof ir.SafeInvokeFunctionExpr) {
            return safeTernaryWithTemporary(e.receiver, function (r) { return r.callFn(e.args); }, ctx);
        }
        if (e instanceof ir.SafePropertyReadExpr) {
            return safeTernaryWithTemporary(e.receiver, function (r) { return r.prop(e.name); }, ctx);
        }
        if (e instanceof ir.SafeKeyedReadExpr) {
            return safeTernaryWithTemporary(e.receiver, function (r) { return r.key(e.index); }, ctx);
        }
    }
    return e;
}
function ternaryTransform(e) {
    if (!(e instanceof ir.SafeTernaryExpr)) {
        return e;
    }
    return new o.ConditionalExpr(new o.BinaryOperatorExpr(o.BinaryOperator.Equals, e.guard, o.NULL_EXPR), o.NULL_EXPR, e.expr);
}
