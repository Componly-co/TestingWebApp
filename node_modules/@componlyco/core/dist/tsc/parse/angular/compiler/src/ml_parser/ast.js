"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecursiveVisitor = exports.visitAll = exports.BlockParameter = exports.Block = exports.BlockGroup = exports.Comment = exports.Element = exports.Attribute = exports.ExpansionCase = exports.Expansion = exports.Text = exports.NodeWithI18n = void 0;
var NodeWithI18n = (function () {
    function NodeWithI18n(sourceSpan, i18n) {
        this.sourceSpan = sourceSpan;
        this.i18n = i18n;
    }
    return NodeWithI18n;
}());
exports.NodeWithI18n = NodeWithI18n;
var Text = (function (_super) {
    __extends(Text, _super);
    function Text(value, sourceSpan, tokens, i18n) {
        var _this = _super.call(this, sourceSpan, i18n) || this;
        _this.value = value;
        _this.tokens = tokens;
        return _this;
    }
    Text.prototype.visit = function (visitor, context) {
        return visitor.visitText(this, context);
    };
    return Text;
}(NodeWithI18n));
exports.Text = Text;
var Expansion = (function (_super) {
    __extends(Expansion, _super);
    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {
        var _this = _super.call(this, sourceSpan, i18n) || this;
        _this.switchValue = switchValue;
        _this.type = type;
        _this.cases = cases;
        _this.switchValueSourceSpan = switchValueSourceSpan;
        return _this;
    }
    Expansion.prototype.visit = function (visitor, context) {
        return visitor.visitExpansion(this, context);
    };
    return Expansion;
}(NodeWithI18n));
exports.Expansion = Expansion;
var ExpansionCase = (function () {
    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
        this.value = value;
        this.expression = expression;
        this.sourceSpan = sourceSpan;
        this.valueSourceSpan = valueSourceSpan;
        this.expSourceSpan = expSourceSpan;
    }
    ExpansionCase.prototype.visit = function (visitor, context) {
        return visitor.visitExpansionCase(this, context);
    };
    return ExpansionCase;
}());
exports.ExpansionCase = ExpansionCase;
var Attribute = (function (_super) {
    __extends(Attribute, _super);
    function Attribute(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n) {
        var _this = _super.call(this, sourceSpan, i18n) || this;
        _this.name = name;
        _this.value = value;
        _this.keySpan = keySpan;
        _this.valueSpan = valueSpan;
        _this.valueTokens = valueTokens;
        return _this;
    }
    Attribute.prototype.visit = function (visitor, context) {
        return visitor.visitAttribute(this, context);
    };
    return Attribute;
}(NodeWithI18n));
exports.Attribute = Attribute;
var Element = (function (_super) {
    __extends(Element, _super);
    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
        if (endSourceSpan === void 0) { endSourceSpan = null; }
        var _this = _super.call(this, sourceSpan, i18n) || this;
        _this.name = name;
        _this.attrs = attrs;
        _this.children = children;
        _this.startSourceSpan = startSourceSpan;
        _this.endSourceSpan = endSourceSpan;
        return _this;
    }
    Element.prototype.visit = function (visitor, context) {
        return visitor.visitElement(this, context);
    };
    return Element;
}(NodeWithI18n));
exports.Element = Element;
var Comment = (function () {
    function Comment(value, sourceSpan) {
        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    Comment.prototype.visit = function (visitor, context) {
        return visitor.visitComment(this, context);
    };
    return Comment;
}());
exports.Comment = Comment;
var BlockGroup = (function () {
    function BlockGroup(blocks, sourceSpan, startSourceSpan, endSourceSpan) {
        if (endSourceSpan === void 0) { endSourceSpan = null; }
        this.blocks = blocks;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    BlockGroup.prototype.visit = function (visitor, context) {
        return visitor.visitBlockGroup(this, context);
    };
    return BlockGroup;
}());
exports.BlockGroup = BlockGroup;
var Block = (function () {
    function Block(name, parameters, children, sourceSpan, startSourceSpan, endSourceSpan) {
        if (endSourceSpan === void 0) { endSourceSpan = null; }
        this.name = name;
        this.parameters = parameters;
        this.children = children;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    Block.prototype.visit = function (visitor, context) {
        return visitor.visitBlock(this, context);
    };
    return Block;
}());
exports.Block = Block;
var BlockParameter = (function () {
    function BlockParameter(expression, sourceSpan) {
        this.expression = expression;
        this.sourceSpan = sourceSpan;
    }
    BlockParameter.prototype.visit = function (visitor, context) {
        return visitor.visitBlockParameter(this, context);
    };
    return BlockParameter;
}());
exports.BlockParameter = BlockParameter;
function visitAll(visitor, nodes, context) {
    if (context === void 0) { context = null; }
    var result = [];
    var visit = visitor.visit ?
        function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
        function (ast) { return ast.visit(visitor, context); };
    nodes.forEach(function (ast) {
        var astResult = visit(ast);
        if (astResult) {
            result.push(astResult);
        }
    });
    return result;
}
exports.visitAll = visitAll;
var RecursiveVisitor = (function () {
    function RecursiveVisitor() {
    }
    RecursiveVisitor.prototype.visitElement = function (ast, context) {
        this.visitChildren(context, function (visit) {
            visit(ast.attrs);
            visit(ast.children);
        });
    };
    RecursiveVisitor.prototype.visitAttribute = function (ast, context) { };
    RecursiveVisitor.prototype.visitText = function (ast, context) { };
    RecursiveVisitor.prototype.visitComment = function (ast, context) { };
    RecursiveVisitor.prototype.visitExpansion = function (ast, context) {
        return this.visitChildren(context, function (visit) {
            visit(ast.cases);
        });
    };
    RecursiveVisitor.prototype.visitExpansionCase = function (ast, context) { };
    RecursiveVisitor.prototype.visitBlockGroup = function (ast, context) {
        this.visitChildren(context, function (visit) {
            visit(ast.blocks);
        });
    };
    RecursiveVisitor.prototype.visitBlock = function (block, context) {
        this.visitChildren(context, function (visit) {
            visit(block.parameters);
            visit(block.children);
        });
    };
    RecursiveVisitor.prototype.visitBlockParameter = function (ast, context) { };
    RecursiveVisitor.prototype.visitChildren = function (context, cb) {
        var results = [];
        var t = this;
        function visit(children) {
            if (children)
                results.push(visitAll(t, children, context));
        }
        cb(visit);
        return Array.prototype.concat.apply([], results);
    };
    return RecursiveVisitor;
}());
exports.RecursiveVisitor = RecursiveVisitor;
