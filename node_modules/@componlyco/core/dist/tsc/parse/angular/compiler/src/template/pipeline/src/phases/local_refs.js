"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phaseLocalRefs = void 0;
var o = __importStar(require("../../../../output/output_ast"));
var ir = __importStar(require("../../ir"));
function phaseLocalRefs(cpl) {
    var e_1, _a, e_2, _b;
    try {
        for (var _c = __values(cpl.views.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var view = _d.value;
            try {
                for (var _e = (e_2 = void 0, __values(view.create)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var op = _f.value;
                    switch (op.kind) {
                        case ir.OpKind.ElementStart:
                        case ir.OpKind.Element:
                        case ir.OpKind.Template:
                            if (!Array.isArray(op.localRefs)) {
                                throw new Error("AssertionError: expected localRefs to be an array still");
                            }
                            op.numSlotsUsed += op.localRefs.length;
                            if (op.localRefs.length > 0) {
                                var localRefs = serializeLocalRefs(op.localRefs);
                                op.localRefs = cpl.addConst(localRefs);
                            }
                            else {
                                op.localRefs = null;
                            }
                            break;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
exports.phaseLocalRefs = phaseLocalRefs;
function serializeLocalRefs(refs) {
    var e_3, _a;
    var constRefs = [];
    try {
        for (var refs_1 = __values(refs), refs_1_1 = refs_1.next(); !refs_1_1.done; refs_1_1 = refs_1.next()) {
            var ref = refs_1_1.value;
            constRefs.push(o.literal(ref.name), o.literal(ref.target));
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (refs_1_1 && !refs_1_1.done && (_a = refs_1.return)) _a.call(refs_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return o.literalArr(constRefs);
}
