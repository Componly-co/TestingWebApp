"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phaseGenerateVariables = void 0;
var o = __importStar(require("../../../../output/output_ast"));
var ir = __importStar(require("../../ir"));
function phaseGenerateVariables(cpl) {
    recursivelyProcessView(cpl.root, null);
}
exports.phaseGenerateVariables = phaseGenerateVariables;
function recursivelyProcessView(view, parentScope) {
    var e_1, _a;
    var scope = getScopeForView(view, parentScope);
    try {
        for (var _b = __values(view.create), _c = _b.next(); !_c.done; _c = _b.next()) {
            var op = _c.value;
            switch (op.kind) {
                case ir.OpKind.Template:
                    recursivelyProcessView(view.job.views.get(op.xref), scope);
                    break;
                case ir.OpKind.Listener:
                    op.handlerOps.prepend(generateVariablesInScopeForView(view, scope));
                    break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var preambleOps = generateVariablesInScopeForView(view, scope);
    view.update.prepend(preambleOps);
}
function getScopeForView(view, parent) {
    var e_2, _a, e_3, _b;
    var scope = {
        view: view.xref,
        viewContextVariable: {
            kind: ir.SemanticVariableKind.Context,
            name: null,
            view: view.xref,
        },
        contextVariables: new Map(),
        references: [],
        parent: parent,
    };
    try {
        for (var _c = __values(view.contextVariables.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var identifier = _d.value;
            scope.contextVariables.set(identifier, {
                kind: ir.SemanticVariableKind.Identifier,
                name: null,
                identifier: identifier,
            });
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        for (var _e = __values(view.create), _f = _e.next(); !_f.done; _f = _e.next()) {
            var op = _f.value;
            switch (op.kind) {
                case ir.OpKind.Element:
                case ir.OpKind.ElementStart:
                case ir.OpKind.Template:
                    if (!Array.isArray(op.localRefs)) {
                        throw new Error("AssertionError: expected localRefs to be an array");
                    }
                    for (var offset = 0; offset < op.localRefs.length; offset++) {
                        scope.references.push({
                            name: op.localRefs[offset].name,
                            targetId: op.xref,
                            offset: offset,
                            variable: {
                                kind: ir.SemanticVariableKind.Identifier,
                                name: null,
                                identifier: op.localRefs[offset].name,
                            },
                        });
                    }
                    break;
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return scope;
}
function generateVariablesInScopeForView(view, scope) {
    var e_4, _a, e_5, _b;
    var newOps = [];
    if (scope.view !== view.xref) {
        newOps.push(ir.createVariableOp(view.job.allocateXrefId(), scope.viewContextVariable, new ir.NextContextExpr()));
    }
    try {
        for (var _c = __values(view.job.views.get(scope.view).contextVariables), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = __read(_d.value, 2), name_1 = _e[0], value = _e[1];
            newOps.push(ir.createVariableOp(view.job.allocateXrefId(), scope.contextVariables.get(name_1), new o.ReadPropExpr(new ir.ContextExpr(scope.view), value)));
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_4) throw e_4.error; }
    }
    try {
        for (var _f = __values(scope.references), _g = _f.next(); !_g.done; _g = _f.next()) {
            var ref = _g.value;
            newOps.push(ir.createVariableOp(view.job.allocateXrefId(), ref.variable, new ir.ReferenceExpr(ref.targetId, ref.offset)));
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
        }
        finally { if (e_5) throw e_5.error; }
    }
    if (scope.parent !== null) {
        newOps.push.apply(newOps, __spreadArray([], __read(generateVariablesInScopeForView(view, scope.parent)), false));
    }
    return newOps;
}
