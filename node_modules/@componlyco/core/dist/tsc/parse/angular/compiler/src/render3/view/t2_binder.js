"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.R3BoundTarget = exports.R3TargetBinder = void 0;
var ast_1 = require("../../expression_parser/ast");
var r3_ast_1 = require("../r3_ast");
var template_1 = require("./template");
var util_1 = require("./util");
var R3TargetBinder = (function () {
    function R3TargetBinder(directiveMatcher) {
        this.directiveMatcher = directiveMatcher;
    }
    R3TargetBinder.prototype.bind = function (target) {
        if (!target.template) {
            throw new Error('Binding without a template not yet supported');
        }
        var scope = Scope.apply(target.template);
        var templateEntities = extractTemplateEntities(scope);
        var _a = DirectiveBinder.apply(target.template, this.directiveMatcher), directives = _a.directives, eagerDirectives = _a.eagerDirectives, bindings = _a.bindings, references = _a.references;
        var _b = TemplateBinder.applyWithScope(target.template, scope), expressions = _b.expressions, symbols = _b.symbols, nestingLevel = _b.nestingLevel, usedPipes = _b.usedPipes, eagerPipes = _b.eagerPipes, deferBlocks = _b.deferBlocks;
        return new R3BoundTarget(target, directives, eagerDirectives, bindings, references, expressions, symbols, nestingLevel, templateEntities, usedPipes, eagerPipes, deferBlocks);
    };
    return R3TargetBinder;
}());
exports.R3TargetBinder = R3TargetBinder;
var Scope = (function () {
    function Scope(parentScope, template) {
        this.parentScope = parentScope;
        this.template = template;
        this.namedEntities = new Map();
        this.childScopes = new Map();
    }
    Scope.newRootScope = function () {
        return new Scope(null, null);
    };
    Scope.apply = function (template) {
        var scope = Scope.newRootScope();
        scope.ingest(template);
        return scope;
    };
    Scope.prototype.ingest = function (template) {
        var _this = this;
        if (template instanceof r3_ast_1.Template) {
            template.variables.forEach(function (node) { return _this.visitVariable(node); });
            template.children.forEach(function (node) { return node.visit(_this); });
        }
        else {
            template.forEach(function (node) { return node.visit(_this); });
        }
    };
    Scope.prototype.visitElement = function (element) {
        var _this = this;
        element.references.forEach(function (node) { return _this.visitReference(node); });
        element.children.forEach(function (node) { return node.visit(_this); });
    };
    Scope.prototype.visitTemplate = function (template) {
        var _this = this;
        template.references.forEach(function (node) { return _this.visitReference(node); });
        var scope = new Scope(this, template);
        scope.ingest(template);
        this.childScopes.set(template, scope);
    };
    Scope.prototype.visitVariable = function (variable) {
        this.maybeDeclare(variable);
    };
    Scope.prototype.visitReference = function (reference) {
        this.maybeDeclare(reference);
    };
    Scope.prototype.visitDeferredBlock = function (deferred) {
        var _this = this;
        var _a, _b, _c;
        deferred.children.forEach(function (node) { return node.visit(_this); });
        (_a = deferred.placeholder) === null || _a === void 0 ? void 0 : _a.visit(this);
        (_b = deferred.loading) === null || _b === void 0 ? void 0 : _b.visit(this);
        (_c = deferred.error) === null || _c === void 0 ? void 0 : _c.visit(this);
    };
    Scope.prototype.visitDeferredBlockPlaceholder = function (block) {
        var _this = this;
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    Scope.prototype.visitDeferredBlockError = function (block) {
        var _this = this;
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    Scope.prototype.visitDeferredBlockLoading = function (block) {
        var _this = this;
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    Scope.prototype.visitSwitchBlock = function (block) {
        var _this = this;
        block.cases.forEach(function (node) { return node.visit(_this); });
    };
    Scope.prototype.visitSwitchBlockCase = function (block) {
        var _this = this;
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    Scope.prototype.visitForLoopBlock = function (block) {
        var _this = this;
        var _a;
        block.children.forEach(function (node) { return node.visit(_this); });
        (_a = block.empty) === null || _a === void 0 ? void 0 : _a.visit(this);
    };
    Scope.prototype.visitForLoopBlockEmpty = function (block) {
        var _this = this;
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    Scope.prototype.visitIfBlock = function (block) {
        var _this = this;
        block.branches.forEach(function (node) { return node.visit(_this); });
    };
    Scope.prototype.visitIfBlockBranch = function (block) {
        var _this = this;
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    Scope.prototype.visitContent = function (content) { };
    Scope.prototype.visitBoundAttribute = function (attr) { };
    Scope.prototype.visitBoundEvent = function (event) { };
    Scope.prototype.visitBoundText = function (text) { };
    Scope.prototype.visitText = function (text) { };
    Scope.prototype.visitTextAttribute = function (attr) { };
    Scope.prototype.visitIcu = function (icu) { };
    Scope.prototype.visitDeferredTrigger = function (trigger) { };
    Scope.prototype.maybeDeclare = function (thing) {
        if (!this.namedEntities.has(thing.name)) {
            this.namedEntities.set(thing.name, thing);
        }
    };
    Scope.prototype.lookup = function (name) {
        if (this.namedEntities.has(name)) {
            return this.namedEntities.get(name);
        }
        else if (this.parentScope !== null) {
            return this.parentScope.lookup(name);
        }
        else {
            return null;
        }
    };
    Scope.prototype.getChildScope = function (template) {
        var res = this.childScopes.get(template);
        if (res === undefined) {
            throw new Error("Assertion error: child scope for ".concat(template, " not found"));
        }
        return res;
    };
    return Scope;
}());
var DirectiveBinder = (function () {
    function DirectiveBinder(matcher, directives, eagerDirectives, bindings, references) {
        this.matcher = matcher;
        this.directives = directives;
        this.eagerDirectives = eagerDirectives;
        this.bindings = bindings;
        this.references = references;
        this.isInDeferBlock = false;
    }
    DirectiveBinder.apply = function (template, selectorMatcher) {
        var directives = new Map();
        var bindings = new Map();
        var references = new Map();
        var eagerDirectives = [];
        var matcher = new DirectiveBinder(selectorMatcher, directives, eagerDirectives, bindings, references);
        matcher.ingest(template);
        return { directives: directives, eagerDirectives: eagerDirectives, bindings: bindings, references: references };
    };
    DirectiveBinder.prototype.ingest = function (template) {
        var _this = this;
        template.forEach(function (node) { return node.visit(_this); });
    };
    DirectiveBinder.prototype.visitElement = function (element) {
        this.visitElementOrTemplate(element.name, element);
    };
    DirectiveBinder.prototype.visitTemplate = function (template) {
        this.visitElementOrTemplate('ng-template', template);
    };
    DirectiveBinder.prototype.visitElementOrTemplate = function (elementName, node) {
        var _a;
        var _this = this;
        var cssSelector = (0, template_1.createCssSelector)(elementName, (0, util_1.getAttrsForDirectiveMatching)(node));
        var directives = [];
        this.matcher.match(cssSelector, function (_selector, results) { return directives.push.apply(directives, __spreadArray([], __read(results), false)); });
        if (directives.length > 0) {
            this.directives.set(node, directives);
            if (!this.isInDeferBlock) {
                (_a = this.eagerDirectives).push.apply(_a, __spreadArray([], __read(directives), false));
            }
        }
        node.references.forEach(function (ref) {
            var dirTarget = null;
            if (ref.value.trim() === '') {
                dirTarget = directives.find(function (dir) { return dir.isComponent; }) || null;
            }
            else {
                dirTarget =
                    directives.find(function (dir) { return dir.exportAs !== null && dir.exportAs.some(function (value) { return value === ref.value; }); }) ||
                        null;
                if (dirTarget === null) {
                    return;
                }
            }
            if (dirTarget !== null) {
                _this.references.set(ref, { directive: dirTarget, node: node });
            }
            else {
                _this.references.set(ref, node);
            }
        });
        var setAttributeBinding = function (attribute, ioType) {
            var dir = directives.find(function (dir) { return dir[ioType].hasBindingPropertyName(attribute.name); });
            var binding = dir !== undefined ? dir : node;
            _this.bindings.set(attribute, binding);
        };
        node.inputs.forEach(function (input) { return setAttributeBinding(input, 'inputs'); });
        node.attributes.forEach(function (attr) { return setAttributeBinding(attr, 'inputs'); });
        if (node instanceof r3_ast_1.Template) {
            node.templateAttrs.forEach(function (attr) { return setAttributeBinding(attr, 'inputs'); });
        }
        node.outputs.forEach(function (output) { return setAttributeBinding(output, 'outputs'); });
        node.children.forEach(function (child) { return child.visit(_this); });
    };
    DirectiveBinder.prototype.visitDeferredBlock = function (deferred) {
        var _this = this;
        var _a, _b, _c;
        var wasInDeferBlock = this.isInDeferBlock;
        this.isInDeferBlock = true;
        deferred.children.forEach(function (child) { return child.visit(_this); });
        this.isInDeferBlock = wasInDeferBlock;
        (_a = deferred.placeholder) === null || _a === void 0 ? void 0 : _a.visit(this);
        (_b = deferred.loading) === null || _b === void 0 ? void 0 : _b.visit(this);
        (_c = deferred.error) === null || _c === void 0 ? void 0 : _c.visit(this);
    };
    DirectiveBinder.prototype.visitDeferredBlockPlaceholder = function (block) {
        var _this = this;
        block.children.forEach(function (child) { return child.visit(_this); });
    };
    DirectiveBinder.prototype.visitDeferredBlockError = function (block) {
        var _this = this;
        block.children.forEach(function (child) { return child.visit(_this); });
    };
    DirectiveBinder.prototype.visitDeferredBlockLoading = function (block) {
        var _this = this;
        block.children.forEach(function (child) { return child.visit(_this); });
    };
    DirectiveBinder.prototype.visitSwitchBlock = function (block) {
        var _this = this;
        block.cases.forEach(function (node) { return node.visit(_this); });
    };
    DirectiveBinder.prototype.visitSwitchBlockCase = function (block) {
        var _this = this;
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    DirectiveBinder.prototype.visitForLoopBlock = function (block) {
        var _this = this;
        var _a;
        block.children.forEach(function (node) { return node.visit(_this); });
        (_a = block.empty) === null || _a === void 0 ? void 0 : _a.visit(this);
    };
    DirectiveBinder.prototype.visitForLoopBlockEmpty = function (block) {
        var _this = this;
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    DirectiveBinder.prototype.visitIfBlock = function (block) {
        var _this = this;
        block.branches.forEach(function (node) { return node.visit(_this); });
    };
    DirectiveBinder.prototype.visitIfBlockBranch = function (block) {
        var _this = this;
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    DirectiveBinder.prototype.visitContent = function (content) { };
    DirectiveBinder.prototype.visitVariable = function (variable) { };
    DirectiveBinder.prototype.visitReference = function (reference) { };
    DirectiveBinder.prototype.visitTextAttribute = function (attribute) { };
    DirectiveBinder.prototype.visitBoundAttribute = function (attribute) { };
    DirectiveBinder.prototype.visitBoundEvent = function (attribute) { };
    DirectiveBinder.prototype.visitBoundAttributeOrEvent = function (node) { };
    DirectiveBinder.prototype.visitText = function (text) { };
    DirectiveBinder.prototype.visitBoundText = function (text) { };
    DirectiveBinder.prototype.visitIcu = function (icu) { };
    DirectiveBinder.prototype.visitDeferredTrigger = function (trigger) { };
    return DirectiveBinder;
}());
var TemplateBinder = (function (_super) {
    __extends(TemplateBinder, _super);
    function TemplateBinder(bindings, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, template, level) {
        var _this = _super.call(this) || this;
        _this.bindings = bindings;
        _this.symbols = symbols;
        _this.usedPipes = usedPipes;
        _this.eagerPipes = eagerPipes;
        _this.deferBlocks = deferBlocks;
        _this.nestingLevel = nestingLevel;
        _this.scope = scope;
        _this.template = template;
        _this.level = level;
        _this.isInDeferBlock = false;
        _this.visitNode = function (node) { return node.visit(_this); };
        return _this;
    }
    TemplateBinder.prototype.visit = function (node, context) {
        if (node instanceof ast_1.AST) {
            node.visit(this, context);
        }
        else {
            node.visit(this);
        }
    };
    TemplateBinder.applyWithScope = function (nodes, scope) {
        var expressions = new Map();
        var symbols = new Map();
        var nestingLevel = new Map();
        var usedPipes = new Set();
        var eagerPipes = new Set();
        var template = nodes instanceof r3_ast_1.Template ? nodes : null;
        var deferBlocks = new Set();
        var binder = new TemplateBinder(expressions, symbols, usedPipes, eagerPipes, deferBlocks, nestingLevel, scope, template, 0);
        binder.ingest(nodes);
        return { expressions: expressions, symbols: symbols, nestingLevel: nestingLevel, usedPipes: usedPipes, eagerPipes: eagerPipes, deferBlocks: deferBlocks };
    };
    TemplateBinder.prototype.ingest = function (template) {
        if (template instanceof r3_ast_1.Template) {
            template.variables.forEach(this.visitNode);
            template.children.forEach(this.visitNode);
            this.nestingLevel.set(template, this.level);
        }
        else {
            template.forEach(this.visitNode);
        }
    };
    TemplateBinder.prototype.visitElement = function (element) {
        element.inputs.forEach(this.visitNode);
        element.outputs.forEach(this.visitNode);
        element.children.forEach(this.visitNode);
    };
    TemplateBinder.prototype.visitTemplate = function (template) {
        template.inputs.forEach(this.visitNode);
        template.outputs.forEach(this.visitNode);
        template.templateAttrs.forEach(this.visitNode);
        template.references.forEach(this.visitNode);
        var childScope = this.scope.getChildScope(template);
        var binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.eagerPipes, this.deferBlocks, this.nestingLevel, childScope, template, this.level + 1);
        binder.ingest(template);
    };
    TemplateBinder.prototype.visitVariable = function (variable) {
        if (this.template !== null) {
            this.symbols.set(variable, this.template);
        }
    };
    TemplateBinder.prototype.visitReference = function (reference) {
        if (this.template !== null) {
            this.symbols.set(reference, this.template);
        }
    };
    TemplateBinder.prototype.visitText = function (text) { };
    TemplateBinder.prototype.visitContent = function (content) { };
    TemplateBinder.prototype.visitTextAttribute = function (attribute) { };
    TemplateBinder.prototype.visitIcu = function (icu) {
        var _this = this;
        Object.keys(icu.vars).forEach(function (key) { return icu.vars[key].visit(_this); });
        Object.keys(icu.placeholders).forEach(function (key) { return icu.placeholders[key].visit(_this); });
    };
    TemplateBinder.prototype.visitBoundAttribute = function (attribute) {
        attribute.value.visit(this);
    };
    TemplateBinder.prototype.visitBoundEvent = function (event) {
        event.handler.visit(this);
    };
    TemplateBinder.prototype.visitDeferredBlock = function (deferred) {
        this.deferBlocks.add(deferred);
        var wasInDeferBlock = this.isInDeferBlock;
        this.isInDeferBlock = true;
        deferred.children.forEach(this.visitNode);
        this.isInDeferBlock = wasInDeferBlock;
        deferred.placeholder && this.visitNode(deferred.placeholder);
        deferred.loading && this.visitNode(deferred.loading);
        deferred.error && this.visitNode(deferred.error);
    };
    TemplateBinder.prototype.visitDeferredTrigger = function (trigger) {
        if (trigger instanceof r3_ast_1.BoundDeferredTrigger) {
            trigger.value.visit(this);
        }
    };
    TemplateBinder.prototype.visitDeferredBlockPlaceholder = function (block) {
        block.children.forEach(this.visitNode);
    };
    TemplateBinder.prototype.visitDeferredBlockError = function (block) {
        block.children.forEach(this.visitNode);
    };
    TemplateBinder.prototype.visitDeferredBlockLoading = function (block) {
        block.children.forEach(this.visitNode);
    };
    TemplateBinder.prototype.visitSwitchBlock = function (block) {
        block.expression.visit(this);
        block.cases.forEach(this.visitNode);
    };
    TemplateBinder.prototype.visitSwitchBlockCase = function (block) {
        var _a;
        (_a = block.expression) === null || _a === void 0 ? void 0 : _a.visit(this);
        block.children.forEach(this.visitNode);
    };
    TemplateBinder.prototype.visitForLoopBlock = function (block) {
        var _a;
        block.expression.visit(this);
        block.children.forEach(this.visitNode);
        (_a = block.empty) === null || _a === void 0 ? void 0 : _a.visit(this);
    };
    TemplateBinder.prototype.visitForLoopBlockEmpty = function (block) {
        block.children.forEach(this.visitNode);
    };
    TemplateBinder.prototype.visitIfBlock = function (block) {
        var _this = this;
        block.branches.forEach(function (node) { return node.visit(_this); });
    };
    TemplateBinder.prototype.visitIfBlockBranch = function (block) {
        var _this = this;
        var _a;
        (_a = block.expression) === null || _a === void 0 ? void 0 : _a.visit(this);
        block.children.forEach(function (node) { return node.visit(_this); });
    };
    TemplateBinder.prototype.visitBoundText = function (text) {
        text.value.visit(this);
    };
    TemplateBinder.prototype.visitPipe = function (ast, context) {
        this.usedPipes.add(ast.name);
        if (!this.isInDeferBlock) {
            this.eagerPipes.add(ast.name);
        }
        return _super.prototype.visitPipe.call(this, ast, context);
    };
    TemplateBinder.prototype.visitPropertyRead = function (ast, context) {
        this.maybeMap(context, ast, ast.name);
        return _super.prototype.visitPropertyRead.call(this, ast, context);
    };
    TemplateBinder.prototype.visitSafePropertyRead = function (ast, context) {
        this.maybeMap(context, ast, ast.name);
        return _super.prototype.visitSafePropertyRead.call(this, ast, context);
    };
    TemplateBinder.prototype.visitPropertyWrite = function (ast, context) {
        this.maybeMap(context, ast, ast.name);
        return _super.prototype.visitPropertyWrite.call(this, ast, context);
    };
    TemplateBinder.prototype.maybeMap = function (scope, ast, name) {
        if (!(ast.receiver instanceof ast_1.ImplicitReceiver)) {
            return;
        }
        var target = this.scope.lookup(name);
        if (target !== null) {
            this.bindings.set(ast, target);
        }
    };
    return TemplateBinder;
}(ast_1.RecursiveAstVisitor));
var R3BoundTarget = (function () {
    function R3BoundTarget(target, directives, eagerDirectives, bindings, references, exprTargets, symbols, nestingLevel, templateEntities, usedPipes, eagerPipes, deferredBlocks) {
        this.target = target;
        this.directives = directives;
        this.eagerDirectives = eagerDirectives;
        this.bindings = bindings;
        this.references = references;
        this.exprTargets = exprTargets;
        this.symbols = symbols;
        this.nestingLevel = nestingLevel;
        this.templateEntities = templateEntities;
        this.usedPipes = usedPipes;
        this.eagerPipes = eagerPipes;
        this.deferredBlocks = deferredBlocks;
    }
    R3BoundTarget.prototype.getEntitiesInTemplateScope = function (template) {
        var _a;
        return (_a = this.templateEntities.get(template)) !== null && _a !== void 0 ? _a : new Set();
    };
    R3BoundTarget.prototype.getDirectivesOfNode = function (node) {
        return this.directives.get(node) || null;
    };
    R3BoundTarget.prototype.getReferenceTarget = function (ref) {
        return this.references.get(ref) || null;
    };
    R3BoundTarget.prototype.getConsumerOfBinding = function (binding) {
        return this.bindings.get(binding) || null;
    };
    R3BoundTarget.prototype.getExpressionTarget = function (expr) {
        return this.exprTargets.get(expr) || null;
    };
    R3BoundTarget.prototype.getTemplateOfSymbol = function (symbol) {
        return this.symbols.get(symbol) || null;
    };
    R3BoundTarget.prototype.getNestingLevel = function (template) {
        return this.nestingLevel.get(template) || 0;
    };
    R3BoundTarget.prototype.getUsedDirectives = function () {
        var set = new Set();
        this.directives.forEach(function (dirs) { return dirs.forEach(function (dir) { return set.add(dir); }); });
        return Array.from(set.values());
    };
    R3BoundTarget.prototype.getEagerlyUsedDirectives = function () {
        var set = new Set(this.eagerDirectives);
        return Array.from(set.values());
    };
    R3BoundTarget.prototype.getUsedPipes = function () {
        return Array.from(this.usedPipes);
    };
    R3BoundTarget.prototype.getEagerlyUsedPipes = function () {
        return Array.from(this.eagerPipes);
    };
    R3BoundTarget.prototype.getDeferBlocks = function () {
        return Array.from(this.deferredBlocks);
    };
    return R3BoundTarget;
}());
exports.R3BoundTarget = R3BoundTarget;
function extractTemplateEntities(rootScope) {
    var e_1, _a, e_2, _b;
    var entityMap = new Map();
    function extractScopeEntities(scope) {
        if (entityMap.has(scope.template)) {
            return entityMap.get(scope.template);
        }
        var currentEntities = scope.namedEntities;
        var templateEntities;
        if (scope.parentScope !== null) {
            templateEntities = new Map(__spreadArray(__spreadArray([], __read(extractScopeEntities(scope.parentScope)), false), __read(currentEntities), false));
        }
        else {
            templateEntities = new Map(currentEntities);
        }
        entityMap.set(scope.template, templateEntities);
        return templateEntities;
    }
    var scopesToProcess = [rootScope];
    while (scopesToProcess.length > 0) {
        var scope = scopesToProcess.pop();
        try {
            for (var _c = (e_1 = void 0, __values(scope.childScopes.values())), _d = _c.next(); !_d.done; _d = _c.next()) {
                var childScope = _d.value;
                scopesToProcess.push(childScope);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        extractScopeEntities(scope);
    }
    var templateEntities = new Map();
    try {
        for (var entityMap_1 = __values(entityMap), entityMap_1_1 = entityMap_1.next(); !entityMap_1_1.done; entityMap_1_1 = entityMap_1.next()) {
            var _e = __read(entityMap_1_1.value, 2), template = _e[0], entities = _e[1];
            templateEntities.set(template, new Set(entities.values()));
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (entityMap_1_1 && !entityMap_1_1.done && (_b = entityMap_1.return)) _b.call(entityMap_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return templateEntities;
}
