"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTranslationDeclStmts = exports.resolveSanitizationFn = exports.makeBindingParser = exports.parseTemplate = exports.createCssSelector = exports.BindingScope = exports.ValueConverter = exports.TemplateDefinitionBuilder = exports.prepareEventListenerParameters = exports.renderFlagCheckIfStmt = exports.LEADING_TRIVIA_CHARS = void 0;
var expression_converter_1 = require("../../compiler_util/expression_converter");
var core = __importStar(require("../../core"));
var ast_1 = require("../../expression_parser/ast");
var lexer_1 = require("../../expression_parser/lexer");
var parser_1 = require("../../expression_parser/parser");
var html = __importStar(require("../../ml_parser/ast"));
var html_parser_1 = require("../../ml_parser/html_parser");
var html_whitespaces_1 = require("../../ml_parser/html_whitespaces");
var interpolation_config_1 = require("../../ml_parser/interpolation_config");
var tags_1 = require("../../ml_parser/tags");
var map_util_1 = require("../../output/map_util");
var o = __importStar(require("../../output/output_ast"));
var parse_util_1 = require("../../parse_util");
var dom_element_schema_registry_1 = require("../../schema/dom_element_schema_registry");
var dom_security_schema_1 = require("../../schema/dom_security_schema");
var trusted_types_sinks_1 = require("../../schema/trusted_types_sinks");
var selector_1 = require("../../selector");
var binding_parser_1 = require("../../template_parser/binding_parser");
var util_1 = require("../../util");
var t = __importStar(require("../r3_ast"));
var r3_identifiers_1 = require("../r3_identifiers");
var r3_template_transform_1 = require("../r3_template_transform");
var util_2 = require("../util");
var context_1 = require("./i18n/context");
var get_msg_utils_1 = require("./i18n/get_msg_utils");
var localize_utils_1 = require("./i18n/localize_utils");
var meta_1 = require("./i18n/meta");
var util_3 = require("./i18n/util");
var styling_builder_1 = require("./styling_builder");
var util_4 = require("./util");
var NG_CONTENT_SELECT_ATTR = 'select';
var NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';
var EVENT_BINDING_SCOPE_GLOBALS = new Set(['$event']);
var GLOBAL_TARGET_RESOLVERS = new Map([['window', r3_identifiers_1.Identifiers.resolveWindow], ['document', r3_identifiers_1.Identifiers.resolveDocument], ['body', r3_identifiers_1.Identifiers.resolveBody]]);
exports.LEADING_TRIVIA_CHARS = [' ', '\n', '\r', '\t'];
function renderFlagCheckIfStmt(flags, statements) {
    return o.ifStmt(o.variable(util_4.RENDER_FLAGS).bitwiseAnd(o.literal(flags), null, false), statements);
}
exports.renderFlagCheckIfStmt = renderFlagCheckIfStmt;
function prepareEventListenerParameters(eventAst, handlerName, scope) {
    if (handlerName === void 0) { handlerName = null; }
    if (scope === void 0) { scope = null; }
    var type = eventAst.type, name = eventAst.name, target = eventAst.target, phase = eventAst.phase, handler = eventAst.handler;
    if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {
        throw new Error("Unexpected global target '".concat(target, "' defined for '").concat(name, "' event.\n        Supported list of global targets: ").concat(Array.from(GLOBAL_TARGET_RESOLVERS.keys()), "."));
    }
    var eventArgumentName = '$event';
    var implicitReceiverAccesses = new Set();
    var implicitReceiverExpr = (scope === null || scope.bindingLevel === 0) ?
        o.variable(util_4.CONTEXT_NAME) :
        scope.getOrCreateSharedContextVar(0);
    var bindingStatements = (0, expression_converter_1.convertActionBinding)(scope, implicitReceiverExpr, handler, 'b', eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS);
    var statements = [];
    var variableDeclarations = scope === null || scope === void 0 ? void 0 : scope.variableDeclarations();
    var restoreViewStatement = scope === null || scope === void 0 ? void 0 : scope.restoreViewStatement();
    if (variableDeclarations) {
        statements.push.apply(statements, __spreadArray([], __read(variableDeclarations), false));
    }
    statements.push.apply(statements, __spreadArray([], __read(bindingStatements), false));
    if (restoreViewStatement) {
        statements.unshift(restoreViewStatement);
        var lastStatement = statements[statements.length - 1];
        if (lastStatement instanceof o.ReturnStatement) {
            statements[statements.length - 1] = new o.ReturnStatement((0, util_4.invokeInstruction)(lastStatement.value.sourceSpan, r3_identifiers_1.Identifiers.resetView, [lastStatement.value]));
        }
        else {
            statements.push(new o.ExpressionStatement((0, util_4.invokeInstruction)(null, r3_identifiers_1.Identifiers.resetView, [])));
        }
    }
    var eventName = type === 1 ? (0, util_2.prepareSyntheticListenerName)(name, phase) : name;
    var fnName = handlerName && (0, parse_util_1.sanitizeIdentifier)(handlerName);
    var fnArgs = [];
    if (implicitReceiverAccesses.has(eventArgumentName)) {
        fnArgs.push(new o.FnParam(eventArgumentName, o.DYNAMIC_TYPE));
    }
    var handlerFn = o.fn(fnArgs, statements, o.INFERRED_TYPE, null, fnName);
    var params = [o.literal(eventName), handlerFn];
    if (target) {
        params.push(o.literal(false), o.importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));
    }
    return params;
}
exports.prepareEventListenerParameters = prepareEventListenerParameters;
function createComponentDefConsts() {
    return {
        prepareStatements: [],
        constExpressions: [],
        i18nVarRefsCache: new Map(),
    };
}
var TemplateDefinitionBuilder = (function () {
    function TemplateDefinitionBuilder(constantPool, parentBindingScope, level, contextName, i18nContext, templateIndex, templateName, _namespace, relativeContextFilePath, i18nUseExternalIds, deferBlocks, _constants) {
        if (level === void 0) { level = 0; }
        if (_constants === void 0) { _constants = createComponentDefConsts(); }
        var _this = this;
        this.constantPool = constantPool;
        this.level = level;
        this.contextName = contextName;
        this.i18nContext = i18nContext;
        this.templateIndex = templateIndex;
        this.templateName = templateName;
        this._namespace = _namespace;
        this.i18nUseExternalIds = i18nUseExternalIds;
        this.deferBlocks = deferBlocks;
        this._constants = _constants;
        this._dataIndex = 0;
        this._bindingContext = 0;
        this._prefixCode = [];
        this._creationCodeFns = [];
        this._updateCodeFns = [];
        this._currentIndex = 0;
        this._tempVariables = [];
        this._controlFlowTempVariable = null;
        this._nestedTemplateFns = [];
        this.i18n = null;
        this._pureFunctionSlots = 0;
        this._bindingSlots = 0;
        this._ngContentReservedSlots = [];
        this._ngContentSelectorsOffset = 0;
        this._implicitReceiverExpr = null;
        this.visitReference = util_4.invalid;
        this.visitVariable = util_4.invalid;
        this.visitTextAttribute = util_4.invalid;
        this.visitBoundAttribute = util_4.invalid;
        this.visitBoundEvent = util_4.invalid;
        this.visitDeferredTrigger = util_4.invalid;
        this.visitDeferredBlockError = util_4.invalid;
        this.visitDeferredBlockLoading = util_4.invalid;
        this.visitDeferredBlockPlaceholder = util_4.invalid;
        this.visitIfBlockBranch = util_4.invalid;
        this.visitSwitchBlockCase = util_4.invalid;
        this._bindingScope = parentBindingScope.nestedScope(level);
        this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';
        this._valueConverter = new ValueConverter(constantPool, function () { return _this.allocateDataSlot(); }, function (numSlots) { return _this.allocatePureFunctionSlots(numSlots); }, function (name, localName, slot, value) {
            _this._bindingScope.set(_this.level, localName, value);
            _this.creationInstruction(null, r3_identifiers_1.Identifiers.pipe, [o.literal(slot), o.literal(name)]);
        });
    }
    TemplateDefinitionBuilder.prototype.buildTemplateFunction = function (nodes, variables, ngContentSelectorsOffset, i18n) {
        var _this = this;
        if (ngContentSelectorsOffset === void 0) { ngContentSelectorsOffset = 0; }
        this._ngContentSelectorsOffset = ngContentSelectorsOffset;
        if (this._namespace !== r3_identifiers_1.Identifiers.namespaceHTML) {
            this.creationInstruction(null, this._namespace);
        }
        variables.forEach(function (v) { return _this.registerContextVariables(v); });
        var initI18nContext = this.i18nContext ||
            ((0, util_3.isI18nRootNode)(i18n) && !(0, util_3.isSingleI18nIcu)(i18n) &&
                !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n));
        var selfClosingI18nInstruction = hasTextChildrenOnly(nodes);
        if (initI18nContext) {
            this.i18nStart(null, i18n, selfClosingI18nInstruction);
        }
        t.visitAll(this, nodes);
        this._pureFunctionSlots += this._bindingSlots;
        this._valueConverter.updatePipeSlotOffsets(this._bindingSlots);
        this._nestedTemplateFns.forEach(function (buildTemplateFn) { return buildTemplateFn(); });
        if (this.level === 0 && this._ngContentReservedSlots.length) {
            var parameters = [];
            if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== '*') {
                var r3ReservedSlots = this._ngContentReservedSlots.map(function (s) { return s !== '*' ? core.parseSelectorToR3Selector(s) : s; });
                parameters.push(this.constantPool.getConstLiteral((0, util_4.asLiteral)(r3ReservedSlots), true));
            }
            this.creationInstruction(null, r3_identifiers_1.Identifiers.projectionDef, parameters, true);
        }
        if (initI18nContext) {
            this.i18nEnd(null, selfClosingI18nInstruction);
        }
        var creationStatements = (0, util_4.getInstructionStatements)(this._creationCodeFns);
        var updateStatements = (0, util_4.getInstructionStatements)(this._updateCodeFns);
        var creationVariables = this._bindingScope.viewSnapshotStatements();
        var updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);
        var creationBlock = creationStatements.length > 0 ?
            [renderFlagCheckIfStmt(1, creationVariables.concat(creationStatements))] :
            [];
        var updateBlock = updateStatements.length > 0 ?
            [renderFlagCheckIfStmt(2, updateVariables.concat(updateStatements))] :
            [];
        return o.fn([new o.FnParam(util_4.RENDER_FLAGS, o.NUMBER_TYPE), new o.FnParam(util_4.CONTEXT_NAME, null)], __spreadArray(__spreadArray(__spreadArray([], __read(this._prefixCode), false), __read(creationBlock), false), __read(updateBlock), false), o.INFERRED_TYPE, null, this.templateName);
    };
    TemplateDefinitionBuilder.prototype.getLocal = function (name) {
        return this._bindingScope.get(name);
    };
    TemplateDefinitionBuilder.prototype.notifyImplicitReceiverUse = function () {
        this._bindingScope.notifyImplicitReceiverUse();
    };
    TemplateDefinitionBuilder.prototype.maybeRestoreView = function () {
        this._bindingScope.maybeRestoreView();
    };
    TemplateDefinitionBuilder.prototype.i18nTranslate = function (message, params, ref, transformFn) {
        var _a;
        if (params === void 0) { params = {}; }
        var _ref = ref || this.i18nGenerateMainBlockVar();
        var closureVar = this.i18nGenerateClosureVar(message.id);
        var statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);
        (_a = this._constants.prepareStatements).push.apply(_a, __spreadArray([], __read(statements), false));
        return _ref;
    };
    TemplateDefinitionBuilder.prototype.registerContextVariables = function (variable) {
        var scopedName = this._bindingScope.freshReferenceName();
        var retrievalLevel = this.level;
        var isDirect = variable.value === util_4.DIRECT_CONTEXT_REFERENCE;
        var lhs = o.variable(variable.name + scopedName);
        this._bindingScope.set(retrievalLevel, variable.name, function (scope) {
            return isDirect && scope.bindingLevel === retrievalLevel && !scope.isListenerScope() ?
                o.variable(util_4.CONTEXT_NAME) :
                lhs;
        }, 1, function (scope, relativeLevel) {
            var rhs;
            if (scope.bindingLevel === retrievalLevel) {
                if (scope.isListenerScope() && scope.hasRestoreViewVariable()) {
                    rhs = o.variable(util_4.RESTORED_VIEW_CONTEXT_NAME);
                    scope.notifyRestoredViewContextUse();
                }
                else if (isDirect) {
                    return [];
                }
                else {
                    rhs = o.variable(util_4.CONTEXT_NAME);
                }
            }
            else {
                var sharedCtxVar = scope.getSharedContextName(retrievalLevel);
                rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);
            }
            return [
                lhs.set(isDirect ? rhs : rhs.prop(variable.value || util_4.IMPLICIT_REFERENCE)).toConstDecl()
            ];
        });
    };
    TemplateDefinitionBuilder.prototype.i18nAppendBindings = function (expressions) {
        var _this = this;
        if (expressions.length > 0) {
            expressions.forEach(function (expression) { return _this.i18n.appendBinding(expression); });
        }
    };
    TemplateDefinitionBuilder.prototype.i18nBindProps = function (props) {
        var _this = this;
        var bound = {};
        Object.keys(props).forEach(function (key) {
            var prop = props[key];
            if (prop instanceof t.Text) {
                bound[key] = o.literal(prop.value);
            }
            else {
                var value = prop.value.visit(_this._valueConverter);
                _this.allocateBindingSlots(value);
                if (value instanceof ast_1.Interpolation) {
                    var strings = value.strings, expressions = value.expressions;
                    var _a = _this.i18n, id = _a.id, bindings = _a.bindings;
                    var label = (0, util_3.assembleI18nBoundString)(strings, bindings.size, id);
                    _this.i18nAppendBindings(expressions);
                    bound[key] = o.literal(label);
                }
            }
        });
        return bound;
    };
    TemplateDefinitionBuilder.prototype.i18nGenerateMainBlockVar = function () {
        return o.variable(this.constantPool.uniqueName(util_3.TRANSLATION_VAR_PREFIX));
    };
    TemplateDefinitionBuilder.prototype.i18nGenerateClosureVar = function (messageId) {
        var name;
        var suffix = this.fileBasedI18nSuffix.toUpperCase();
        if (this.i18nUseExternalIds) {
            var prefix = (0, util_3.getTranslationConstPrefix)("EXTERNAL_");
            var uniqueSuffix = this.constantPool.uniqueName(suffix);
            name = "".concat(prefix).concat((0, parse_util_1.sanitizeIdentifier)(messageId), "$$").concat(uniqueSuffix);
        }
        else {
            var prefix = (0, util_3.getTranslationConstPrefix)(suffix);
            name = this.constantPool.uniqueName(prefix);
        }
        return o.variable(name);
    };
    TemplateDefinitionBuilder.prototype.i18nUpdateRef = function (context) {
        var icus = context.icus, meta = context.meta, isRoot = context.isRoot, isResolved = context.isResolved, isEmitted = context.isEmitted;
        if (isRoot && isResolved && !isEmitted && !(0, util_3.isSingleI18nIcu)(meta)) {
            context.isEmitted = true;
            var placeholders = context.getSerializedPlaceholders();
            var icuMapping_1 = {};
            var params_1 = placeholders.size ? (0, util_3.placeholdersToParams)(placeholders) : {};
            if (icus.size) {
                icus.forEach(function (refs, key) {
                    if (refs.length === 1) {
                        params_1[key] = refs[0];
                    }
                    else {
                        var placeholder = (0, util_3.wrapI18nPlaceholder)("".concat(util_3.I18N_ICU_MAPPING_PREFIX).concat(key));
                        params_1[key] = o.literal(placeholder);
                        icuMapping_1[key] = o.literalArr(refs);
                    }
                });
            }
            var needsPostprocessing = Array.from(placeholders.values()).some(function (value) { return value.length > 1; }) ||
                Object.keys(icuMapping_1).length;
            var transformFn = void 0;
            if (needsPostprocessing) {
                transformFn = function (raw) {
                    var args = [raw];
                    if (Object.keys(icuMapping_1).length) {
                        args.push((0, map_util_1.mapLiteral)(icuMapping_1, true));
                    }
                    return (0, util_4.invokeInstruction)(null, r3_identifiers_1.Identifiers.i18nPostprocess, args);
                };
            }
            this.i18nTranslate(meta, params_1, context.ref, transformFn);
        }
    };
    TemplateDefinitionBuilder.prototype.i18nStart = function (span, meta, selfClosing) {
        if (span === void 0) { span = null; }
        var index = this.allocateDataSlot();
        this.i18n = this.i18nContext ?
            this.i18nContext.forkChildContext(index, this.templateIndex, meta) :
            new context_1.I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta);
        var _a = this.i18n, id = _a.id, ref = _a.ref;
        var params = [o.literal(index), this.addToConsts(ref)];
        if (id > 0) {
            params.push(o.literal(id));
        }
        this.creationInstruction(span, selfClosing ? r3_identifiers_1.Identifiers.i18n : r3_identifiers_1.Identifiers.i18nStart, params);
    };
    TemplateDefinitionBuilder.prototype.i18nEnd = function (span, selfClosing) {
        var e_1, _a;
        var _this = this;
        if (span === void 0) { span = null; }
        if (!this.i18n) {
            throw new Error('i18nEnd is executed with no i18n context present');
        }
        if (this.i18nContext) {
            this.i18nContext.reconcileChildContext(this.i18n);
            this.i18nUpdateRef(this.i18nContext);
        }
        else {
            this.i18nUpdateRef(this.i18n);
        }
        var _b = this.i18n, index = _b.index, bindings = _b.bindings;
        if (bindings.size) {
            var _loop_1 = function (binding) {
                this_1.updateInstructionWithAdvance(this_1.getConstCount() - 1, span, r3_identifiers_1.Identifiers.i18nExp, function () { return _this.convertPropertyBinding(binding); });
            };
            var this_1 = this;
            try {
                for (var bindings_1 = __values(bindings), bindings_1_1 = bindings_1.next(); !bindings_1_1.done; bindings_1_1 = bindings_1.next()) {
                    var binding = bindings_1_1.value;
                    _loop_1(binding);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (bindings_1_1 && !bindings_1_1.done && (_a = bindings_1.return)) _a.call(bindings_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.updateInstruction(span, r3_identifiers_1.Identifiers.i18nApply, [o.literal(index)]);
        }
        if (!selfClosing) {
            this.creationInstruction(span, r3_identifiers_1.Identifiers.i18nEnd);
        }
        this.i18n = null;
    };
    TemplateDefinitionBuilder.prototype.i18nAttributesInstruction = function (nodeIndex, attrs, sourceSpan) {
        var _this = this;
        var hasBindings = false;
        var i18nAttrArgs = [];
        attrs.forEach(function (attr) {
            var message = attr.i18n;
            var converted = attr.value.visit(_this._valueConverter);
            _this.allocateBindingSlots(converted);
            if (converted instanceof ast_1.Interpolation) {
                var placeholders = (0, util_3.assembleBoundTextPlaceholders)(message);
                var params = (0, util_3.placeholdersToParams)(placeholders);
                i18nAttrArgs.push(o.literal(attr.name), _this.i18nTranslate(message, params));
                converted.expressions.forEach(function (expression) {
                    hasBindings = true;
                    _this.updateInstructionWithAdvance(nodeIndex, sourceSpan, r3_identifiers_1.Identifiers.i18nExp, function () { return _this.convertPropertyBinding(expression); });
                });
            }
        });
        if (i18nAttrArgs.length > 0) {
            var index = o.literal(this.allocateDataSlot());
            var constIndex = this.addToConsts(o.literalArr(i18nAttrArgs));
            this.creationInstruction(sourceSpan, r3_identifiers_1.Identifiers.i18nAttributes, [index, constIndex]);
            if (hasBindings) {
                this.updateInstruction(sourceSpan, r3_identifiers_1.Identifiers.i18nApply, [index]);
            }
        }
    };
    TemplateDefinitionBuilder.prototype.getNamespaceInstruction = function (namespaceKey) {
        switch (namespaceKey) {
            case 'math':
                return r3_identifiers_1.Identifiers.namespaceMathML;
            case 'svg':
                return r3_identifiers_1.Identifiers.namespaceSVG;
            default:
                return r3_identifiers_1.Identifiers.namespaceHTML;
        }
    };
    TemplateDefinitionBuilder.prototype.addNamespaceInstruction = function (nsInstruction, element) {
        this._namespace = nsInstruction;
        this.creationInstruction(element.startSourceSpan, nsInstruction);
    };
    TemplateDefinitionBuilder.prototype.interpolatedUpdateInstruction = function (instruction, elementIndex, attrName, input, value, params) {
        var _this = this;
        this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, instruction, function () { return __spreadArray(__spreadArray([o.literal(attrName)], __read(_this.getUpdateInstructionArguments(value)), false), __read(params), false); });
    };
    TemplateDefinitionBuilder.prototype.visitContent = function (ngContent) {
        var slot = this.allocateDataSlot();
        var projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;
        var parameters = [o.literal(slot)];
        this._ngContentReservedSlots.push(ngContent.selector);
        var nonContentSelectAttributes = ngContent.attributes.filter(function (attr) { return attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR; });
        var attributes = this.getAttributeExpressions(ngContent.name, nonContentSelectAttributes, [], []);
        if (attributes.length > 0) {
            parameters.push(o.literal(projectionSlotIdx), o.literalArr(attributes));
        }
        else if (projectionSlotIdx !== 0) {
            parameters.push(o.literal(projectionSlotIdx));
        }
        this.creationInstruction(ngContent.sourceSpan, r3_identifiers_1.Identifiers.projection, parameters);
        if (this.i18n) {
            this.i18n.appendProjection(ngContent.i18n, slot);
        }
    };
    TemplateDefinitionBuilder.prototype.visitElement = function (element) {
        var e_2, _a, e_3, _b, e_4, _c, e_5, _d;
        var _this = this;
        var _e, _f;
        var elementIndex = this.allocateDataSlot();
        var stylingBuilder = new styling_builder_1.StylingBuilder(null);
        var isNonBindableMode = false;
        var isI18nRootElement = (0, util_3.isI18nRootNode)(element.i18n) && !(0, util_3.isSingleI18nIcu)(element.i18n);
        var outputAttrs = [];
        var _g = __read((0, tags_1.splitNsName)(element.name), 2), namespaceKey = _g[0], elementName = _g[1];
        var isNgContainer = (0, tags_1.isNgContainer)(element.name);
        try {
            for (var _h = __values(element.attributes), _j = _h.next(); !_j.done; _j = _h.next()) {
                var attr = _j.value;
                var name_1 = attr.name, value = attr.value;
                if (name_1 === util_4.NON_BINDABLE_ATTR) {
                    isNonBindableMode = true;
                }
                else if (name_1 === 'style') {
                    stylingBuilder.registerStyleAttr(value);
                }
                else if (name_1 === 'class') {
                    stylingBuilder.registerClassAttr(value);
                }
                else {
                    outputAttrs.push(attr);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var parameters = [o.literal(elementIndex)];
        if (!isNgContainer) {
            parameters.push(o.literal(elementName));
        }
        var allOtherInputs = [];
        var boundI18nAttrs = [];
        element.inputs.forEach(function (input) {
            var stylingInputWasSet = stylingBuilder.registerBoundInput(input);
            if (!stylingInputWasSet) {
                if (input.type === 0 && input.i18n) {
                    boundI18nAttrs.push(input);
                }
                else {
                    allOtherInputs.push(input);
                }
            }
        });
        var attributes = this.getAttributeExpressions(element.name, outputAttrs, allOtherInputs, element.outputs, stylingBuilder, [], boundI18nAttrs);
        parameters.push(this.addAttrsToConsts(attributes));
        var refs = this.prepareRefsArray(element.references);
        parameters.push(this.addToConsts(refs));
        var wasInNamespace = this._namespace;
        var currentNamespace = this.getNamespaceInstruction(namespaceKey);
        if (currentNamespace !== wasInNamespace) {
            this.addNamespaceInstruction(currentNamespace, element);
        }
        if (this.i18n) {
            this.i18n.appendElement(element.i18n, elementIndex);
        }
        var hasChildren = (!isI18nRootElement && this.i18n) ? !hasTextChildrenOnly(element.children) :
            element.children.length > 0;
        var createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes &&
            element.outputs.length === 0 && boundI18nAttrs.length === 0 && !hasChildren;
        var createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element.children);
        if (createSelfClosingInstruction) {
            this.creationInstruction(element.sourceSpan, isNgContainer ? r3_identifiers_1.Identifiers.elementContainer : r3_identifiers_1.Identifiers.element, (0, util_4.trimTrailingNulls)(parameters));
        }
        else {
            this.creationInstruction(element.startSourceSpan, isNgContainer ? r3_identifiers_1.Identifiers.elementContainerStart : r3_identifiers_1.Identifiers.elementStart, (0, util_4.trimTrailingNulls)(parameters));
            if (isNonBindableMode) {
                this.creationInstruction(element.startSourceSpan, r3_identifiers_1.Identifiers.disableBindings);
            }
            if (boundI18nAttrs.length > 0) {
                this.i18nAttributesInstruction(elementIndex, boundI18nAttrs, (_e = element.startSourceSpan) !== null && _e !== void 0 ? _e : element.sourceSpan);
            }
            if (element.outputs.length > 0) {
                try {
                    for (var _k = __values(element.outputs), _l = _k.next(); !_l.done; _l = _k.next()) {
                        var outputAst = _l.value;
                        this.creationInstruction(outputAst.sourceSpan, r3_identifiers_1.Identifiers.listener, this.prepareListenerParameter(element.name, outputAst, elementIndex));
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            if (isI18nRootElement) {
                this.i18nStart(element.startSourceSpan, element.i18n, createSelfClosingI18nInstruction);
            }
        }
        var stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);
        var limit = stylingInstructions.length - 1;
        for (var i = 0; i <= limit; i++) {
            var instruction = stylingInstructions[i];
            this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, instruction);
        }
        var emptyValueBindInstruction = o.literal(undefined);
        var propertyBindings = [];
        var attributeBindings = [];
        allOtherInputs.forEach(function (input) {
            var inputType = input.type;
            if (inputType === 4) {
                var value_1 = input.value.visit(_this._valueConverter);
                var hasValue_1 = value_1 instanceof ast_1.LiteralPrimitive ? !!value_1.value : true;
                _this.allocateBindingSlots(value_1);
                propertyBindings.push({
                    span: input.sourceSpan,
                    paramsOrFn: getBindingFunctionParams(function () { return hasValue_1 ? _this.convertPropertyBinding(value_1) : emptyValueBindInstruction; }, (0, util_2.prepareSyntheticPropertyName)(input.name))
                });
            }
            else {
                if (input.i18n)
                    return;
                var value_2 = input.value.visit(_this._valueConverter);
                if (value_2 !== undefined) {
                    var params_2 = [];
                    var _a = __read((0, tags_1.splitNsName)(input.name), 2), attrNamespace = _a[0], attrName_1 = _a[1];
                    var isAttributeBinding = inputType === 1;
                    var sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);
                    if (!sanitizationRef) {
                        if (isIframeElement(element.name) && (0, dom_security_schema_1.isIframeSecuritySensitiveAttr)(input.name)) {
                            sanitizationRef = o.importExpr(r3_identifiers_1.Identifiers.validateIframeAttribute);
                        }
                    }
                    if (sanitizationRef) {
                        params_2.push(sanitizationRef);
                    }
                    if (attrNamespace) {
                        var namespaceLiteral = o.literal(attrNamespace);
                        if (sanitizationRef) {
                            params_2.push(namespaceLiteral);
                        }
                        else {
                            params_2.push(o.literal(null), namespaceLiteral);
                        }
                    }
                    _this.allocateBindingSlots(value_2);
                    if (inputType === 0) {
                        if (value_2 instanceof ast_1.Interpolation) {
                            _this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value_2), elementIndex, attrName_1, input, value_2, params_2);
                        }
                        else {
                            propertyBindings.push({
                                span: input.sourceSpan,
                                paramsOrFn: getBindingFunctionParams(function () { return _this.convertPropertyBinding(value_2); }, attrName_1, params_2)
                            });
                        }
                    }
                    else if (inputType === 1) {
                        if (value_2 instanceof ast_1.Interpolation && (0, util_4.getInterpolationArgsLength)(value_2) > 1) {
                            _this.interpolatedUpdateInstruction(getAttributeInterpolationExpression(value_2), elementIndex, attrName_1, input, value_2, params_2);
                        }
                        else {
                            var boundValue_1 = value_2 instanceof ast_1.Interpolation ? value_2.expressions[0] : value_2;
                            attributeBindings.push({
                                span: input.sourceSpan,
                                paramsOrFn: getBindingFunctionParams(function () { return _this.convertPropertyBinding(boundValue_1); }, attrName_1, params_2)
                            });
                        }
                    }
                    else {
                        _this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, r3_identifiers_1.Identifiers.classProp, function () {
                            return __spreadArray([
                                o.literal(elementIndex), o.literal(attrName_1), _this.convertPropertyBinding(value_2)
                            ], __read(params_2), false);
                        });
                    }
                }
            }
        });
        try {
            for (var propertyBindings_1 = __values(propertyBindings), propertyBindings_1_1 = propertyBindings_1.next(); !propertyBindings_1_1.done; propertyBindings_1_1 = propertyBindings_1.next()) {
                var propertyBinding = propertyBindings_1_1.value;
                this.updateInstructionWithAdvance(elementIndex, propertyBinding.span, r3_identifiers_1.Identifiers.property, propertyBinding.paramsOrFn);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (propertyBindings_1_1 && !propertyBindings_1_1.done && (_c = propertyBindings_1.return)) _c.call(propertyBindings_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            for (var attributeBindings_1 = __values(attributeBindings), attributeBindings_1_1 = attributeBindings_1.next(); !attributeBindings_1_1.done; attributeBindings_1_1 = attributeBindings_1.next()) {
                var attributeBinding = attributeBindings_1_1.value;
                this.updateInstructionWithAdvance(elementIndex, attributeBinding.span, r3_identifiers_1.Identifiers.attribute, attributeBinding.paramsOrFn);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (attributeBindings_1_1 && !attributeBindings_1_1.done && (_d = attributeBindings_1.return)) _d.call(attributeBindings_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        t.visitAll(this, element.children);
        if (!isI18nRootElement && this.i18n) {
            this.i18n.appendElement(element.i18n, elementIndex, true);
        }
        if (!createSelfClosingInstruction) {
            var span = (_f = element.endSourceSpan) !== null && _f !== void 0 ? _f : element.sourceSpan;
            if (isI18nRootElement) {
                this.i18nEnd(span, createSelfClosingI18nInstruction);
            }
            if (isNonBindableMode) {
                this.creationInstruction(span, r3_identifiers_1.Identifiers.enableBindings);
            }
            this.creationInstruction(span, isNgContainer ? r3_identifiers_1.Identifiers.elementContainerEnd : r3_identifiers_1.Identifiers.elementEnd);
        }
    };
    TemplateDefinitionBuilder.prototype.createEmbeddedTemplateFn = function (tagName, children, contextNameSuffix, sourceSpan, variables, attrsExprs, references, i18n) {
        var _this = this;
        if (variables === void 0) { variables = []; }
        var templateIndex = this.allocateDataSlot();
        if (this.i18n && i18n) {
            this.i18n.appendTemplate(i18n, templateIndex);
        }
        var contextName = "".concat(this.contextName).concat(contextNameSuffix, "_").concat(templateIndex);
        var templateName = "".concat(contextName, "_Template");
        var parameters = [
            o.literal(templateIndex),
            o.variable(templateName),
            o.literal(tagName),
            this.addAttrsToConsts(attrsExprs || null),
        ];
        if (references && references.length > 0) {
            var refs = this.prepareRefsArray(references);
            parameters.push(this.addToConsts(refs));
            parameters.push(o.importExpr(r3_identifiers_1.Identifiers.templateRefExtractor));
        }
        var templateVisitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, templateIndex, templateName, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this.deferBlocks, this._constants);
        this._nestedTemplateFns.push(function () {
            var _a;
            var templateFunctionExpr = templateVisitor.buildTemplateFunction(children, variables, _this._ngContentReservedSlots.length + _this._ngContentSelectorsOffset, i18n);
            _this.constantPool.statements.push(templateFunctionExpr.toDeclStmt(templateName));
            if (templateVisitor._ngContentReservedSlots.length) {
                (_a = _this._ngContentReservedSlots).push.apply(_a, __spreadArray([], __read(templateVisitor._ngContentReservedSlots), false));
            }
        });
        this.creationInstruction(sourceSpan, r3_identifiers_1.Identifiers.templateCreate, function () {
            parameters.splice(2, 0, o.literal(templateVisitor.getConstCount()), o.literal(templateVisitor.getVarCount()));
            return (0, util_4.trimTrailingNulls)(parameters);
        });
        return templateIndex;
    };
    TemplateDefinitionBuilder.prototype.visitTemplate = function (template) {
        var e_6, _a;
        var _b;
        var tagNameWithoutNamespace = template.tagName ? (0, tags_1.splitNsName)(template.tagName)[1] : template.tagName;
        var contextNameSuffix = template.tagName ? '_' + (0, parse_util_1.sanitizeIdentifier)(template.tagName) : '';
        var NG_TEMPLATE_TAG_NAME = 'ng-template';
        var attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, template.attributes, template.inputs, template.outputs, undefined, template.templateAttrs);
        var templateIndex = this.createEmbeddedTemplateFn(tagNameWithoutNamespace, template.children, contextNameSuffix, template.sourceSpan, template.variables, attrsExprs, template.references, template.i18n);
        this.templatePropertyBindings(templateIndex, template.templateAttrs);
        if (tagNameWithoutNamespace === NG_TEMPLATE_TAG_NAME) {
            var _c = __read((0, util_1.partitionArray)(template.inputs, util_3.hasI18nMeta), 2), i18nInputs = _c[0], inputs = _c[1];
            if (i18nInputs.length > 0) {
                this.i18nAttributesInstruction(templateIndex, i18nInputs, (_b = template.startSourceSpan) !== null && _b !== void 0 ? _b : template.sourceSpan);
            }
            if (inputs.length > 0) {
                this.templatePropertyBindings(templateIndex, inputs);
            }
            try {
                for (var _d = __values(template.outputs), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var outputAst = _e.value;
                    this.creationInstruction(outputAst.sourceSpan, r3_identifiers_1.Identifiers.listener, this.prepareListenerParameter('ng_template', outputAst, templateIndex));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
    };
    TemplateDefinitionBuilder.prototype.visitBoundText = function (text) {
        var _this = this;
        if (this.i18n) {
            var value_3 = text.value.visit(this._valueConverter);
            this.allocateBindingSlots(value_3);
            if (value_3 instanceof ast_1.Interpolation) {
                this.i18n.appendBoundText(text.i18n);
                this.i18nAppendBindings(value_3.expressions);
            }
            return;
        }
        var nodeIndex = this.allocateDataSlot();
        this.creationInstruction(text.sourceSpan, r3_identifiers_1.Identifiers.text, [o.literal(nodeIndex)]);
        var value = text.value.visit(this._valueConverter);
        this.allocateBindingSlots(value);
        if (value instanceof ast_1.Interpolation) {
            this.updateInstructionWithAdvance(nodeIndex, text.sourceSpan, getTextInterpolationExpression(value), function () { return _this.getUpdateInstructionArguments(value); });
        }
        else {
            (0, util_1.error)('Text nodes should be interpolated and never bound directly.');
        }
    };
    TemplateDefinitionBuilder.prototype.visitText = function (text) {
        if (!this.i18n) {
            this.creationInstruction(text.sourceSpan, r3_identifiers_1.Identifiers.text, [o.literal(this.allocateDataSlot()), o.literal(text.value)]);
        }
    };
    TemplateDefinitionBuilder.prototype.visitIcu = function (icu) {
        var initWasInvoked = false;
        if (!this.i18n) {
            initWasInvoked = true;
            this.i18nStart(null, icu.i18n, true);
        }
        var i18n = this.i18n;
        var vars = this.i18nBindProps(icu.vars);
        var placeholders = this.i18nBindProps(icu.placeholders);
        var message = icu.i18n;
        var transformFn = function (raw) {
            var params = __assign(__assign({}, vars), placeholders);
            var formatted = (0, util_3.formatI18nPlaceholderNamesInMap)(params, false);
            return (0, util_4.invokeInstruction)(null, r3_identifiers_1.Identifiers.i18nPostprocess, [raw, (0, map_util_1.mapLiteral)(formatted, true)]);
        };
        if ((0, util_3.isSingleI18nIcu)(i18n.meta)) {
            this.i18nTranslate(message, {}, i18n.ref, transformFn);
        }
        else {
            var ref = this.i18nTranslate(message, {}, undefined, transformFn);
            i18n.appendIcu((0, util_3.icuFromI18nMessage)(message).name, ref);
        }
        if (initWasInvoked) {
            this.i18nEnd(null, true);
        }
        return null;
    };
    TemplateDefinitionBuilder.prototype.visitIfBlock = function (block) {
        var _this = this;
        var branchData = block.branches.map(function (_a) {
            var expression = _a.expression, expressionAlias = _a.expressionAlias, children = _a.children, sourceSpan = _a.sourceSpan;
            var processedExpression = null;
            if (expression !== null) {
                processedExpression = expression.visit(_this._valueConverter);
                _this.allocateBindingSlots(processedExpression);
            }
            var variables = expressionAlias ?
                [new t.Variable(expressionAlias, util_4.DIRECT_CONTEXT_REFERENCE, sourceSpan, sourceSpan)] :
                undefined;
            return {
                index: _this.createEmbeddedTemplateFn(null, children, '_Conditional', sourceSpan, variables),
                expression: processedExpression,
                alias: expressionAlias
            };
        });
        var containerIndex = branchData[0].index;
        var paramsCallback = function () {
            var contextVariable = null;
            var generateBranch = function (branchIndex) {
                if (branchIndex > branchData.length - 1) {
                    return o.literal(-1);
                }
                var _a = branchData[branchIndex], index = _a.index, expression = _a.expression, alias = _a.alias;
                if (expression === null) {
                    return o.literal(index);
                }
                var comparisonTarget;
                if (alias) {
                    contextVariable = _this.allocateControlFlowTempVariable();
                    comparisonTarget = contextVariable.set(_this.convertPropertyBinding(expression));
                }
                else {
                    comparisonTarget = _this.convertPropertyBinding(expression);
                }
                return comparisonTarget.conditional(o.literal(index), generateBranch(branchIndex + 1));
            };
            var params = [o.literal(containerIndex), generateBranch(0)];
            if (contextVariable !== null) {
                params.push(contextVariable);
            }
            return params;
        };
        this.updateInstructionWithAdvance(containerIndex, block.branches[0].sourceSpan, r3_identifiers_1.Identifiers.conditional, paramsCallback);
    };
    TemplateDefinitionBuilder.prototype.visitSwitchBlock = function (block) {
        var _this = this;
        var blockExpression = block.expression.visit(this._valueConverter);
        this.allocateBindingSlots(blockExpression);
        var caseData = block.cases.map(function (currentCase) {
            var index = _this.createEmbeddedTemplateFn(null, currentCase.children, '_Case', currentCase.sourceSpan);
            var expression = null;
            if (currentCase.expression !== null) {
                expression = currentCase.expression.visit(_this._valueConverter);
                _this.allocateBindingSlots(expression);
            }
            return { index: index, expression: expression };
        });
        var containerIndex = caseData[0].index;
        this.updateInstructionWithAdvance(containerIndex, block.sourceSpan, r3_identifiers_1.Identifiers.conditional, function () {
            var generateCases = function (caseIndex) {
                if (caseIndex > caseData.length - 1) {
                    return o.literal(-1);
                }
                var _a = caseData[caseIndex], index = _a.index, expression = _a.expression;
                if (expression === null) {
                    return o.literal(index);
                }
                var comparisonTarget = caseIndex === 0 ?
                    _this.allocateControlFlowTempVariable().set(_this.convertPropertyBinding(blockExpression)) :
                    _this.allocateControlFlowTempVariable();
                return comparisonTarget.identical(_this.convertPropertyBinding(expression))
                    .conditional(o.literal(index), generateCases(caseIndex + 1));
            };
            return [o.literal(containerIndex), generateCases(0)];
        });
    };
    TemplateDefinitionBuilder.prototype.visitDeferredBlock = function (deferred) {
        var loading = deferred.loading, placeholder = deferred.placeholder, error = deferred.error, triggers = deferred.triggers, prefetchTriggers = deferred.prefetchTriggers;
        var primaryTemplateIndex = this.createEmbeddedTemplateFn(null, deferred.children, '_Defer', deferred.sourceSpan);
        var loadingIndex = loading ?
            this.createEmbeddedTemplateFn(null, loading.children, '_DeferLoading', loading.sourceSpan) :
            null;
        var loadingConsts = loading ?
            (0, util_4.trimTrailingNulls)([o.literal(loading.minimumTime), o.literal(loading.afterTime)]) :
            null;
        var placeholderIndex = placeholder ?
            this.createEmbeddedTemplateFn(null, placeholder.children, '_DeferPlaceholder', placeholder.sourceSpan) :
            null;
        var placeholderConsts = placeholder && placeholder.minimumTime !== null ?
            o.literalArr([o.literal(placeholder.minimumTime)]) :
            null;
        var errorIndex = error ?
            this.createEmbeddedTemplateFn(null, error.children, '_DeferError', error.sourceSpan) :
            null;
        var deferredIndex = this.allocateDataSlot();
        var depsFnName = "".concat(this.contextName, "_Defer_").concat(deferredIndex, "_DepsFn");
        this.creationInstruction(deferred.sourceSpan, r3_identifiers_1.Identifiers.defer, (0, util_4.trimTrailingNulls)([
            o.literal(deferredIndex),
            o.literal(primaryTemplateIndex),
            this.createDeferredDepsFunction(depsFnName, deferred),
            o.literal(loadingIndex),
            o.literal(placeholderIndex),
            o.literal(errorIndex),
            (loadingConsts === null || loadingConsts === void 0 ? void 0 : loadingConsts.length) ? this.addToConsts(o.literalArr(loadingConsts)) : o.TYPED_NULL_EXPR,
            placeholderConsts ? this.addToConsts(placeholderConsts) : o.TYPED_NULL_EXPR,
        ]));
        this.createDeferTriggerInstructions(deferredIndex, triggers, false);
        this.createDeferTriggerInstructions(deferredIndex, prefetchTriggers, true);
    };
    TemplateDefinitionBuilder.prototype.createDeferredDepsFunction = function (name, deferred) {
        var e_7, _a;
        var deferredDeps = this.deferBlocks.get(deferred);
        if (!deferredDeps || deferredDeps.length === 0) {
            return o.TYPED_NULL_EXPR;
        }
        var dependencyExp = [];
        try {
            for (var deferredDeps_1 = __values(deferredDeps), deferredDeps_1_1 = deferredDeps_1.next(); !deferredDeps_1_1.done; deferredDeps_1_1 = deferredDeps_1.next()) {
                var deferredDep = deferredDeps_1_1.value;
                if (deferredDep.isDeferrable) {
                    var innerFn = o.fn([new o.FnParam('m', o.DYNAMIC_TYPE)], [new o.ReturnStatement(o.variable('m').prop(deferredDep.symbolName))]);
                    var importExpr = (new o.DynamicImportExpr(deferredDep.importPath)).prop('then').callFn([innerFn]);
                    dependencyExp.push(importExpr);
                }
                else {
                    dependencyExp.push(deferredDep.type);
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (deferredDeps_1_1 && !deferredDeps_1_1.done && (_a = deferredDeps_1.return)) _a.call(deferredDeps_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        var depsFnExpr = o.fn([], [new o.ReturnStatement(o.literalArr(dependencyExp))], o.INFERRED_TYPE, null, name);
        this.constantPool.statements.push(depsFnExpr.toDeclStmt(name));
        return o.variable(name);
    };
    TemplateDefinitionBuilder.prototype.createDeferTriggerInstructions = function (deferredIndex, triggers, prefetch) {
        var _this = this;
        var when = triggers.when, idle = triggers.idle, immediate = triggers.immediate, timer = triggers.timer, hover = triggers.hover, interaction = triggers.interaction, viewport = triggers.viewport;
        if (when) {
            var value_4 = when.value.visit(this._valueConverter);
            this.allocateBindingSlots(value_4);
            this.updateInstructionWithAdvance(deferredIndex, when.sourceSpan, prefetch ? r3_identifiers_1.Identifiers.deferPrefetchWhen : r3_identifiers_1.Identifiers.deferWhen, function () { return _this.convertPropertyBinding(value_4); });
        }
        if (idle || (!prefetch && Object.keys(triggers).length === 0)) {
            this.creationInstruction((idle === null || idle === void 0 ? void 0 : idle.sourceSpan) || null, prefetch ? r3_identifiers_1.Identifiers.deferPrefetchOnIdle : r3_identifiers_1.Identifiers.deferOnIdle);
        }
        if (immediate) {
            this.creationInstruction(immediate.sourceSpan, prefetch ? r3_identifiers_1.Identifiers.deferPrefetchOnImmediate : r3_identifiers_1.Identifiers.deferOnImmediate);
        }
        if (timer) {
            this.creationInstruction(timer.sourceSpan, prefetch ? r3_identifiers_1.Identifiers.deferPrefetchOnTimer : r3_identifiers_1.Identifiers.deferOnTimer, [o.literal(timer.delay)]);
        }
        if (hover) {
            this.creationInstruction(hover.sourceSpan, prefetch ? r3_identifiers_1.Identifiers.deferPrefetchOnHover : r3_identifiers_1.Identifiers.deferOnHover);
        }
        if (interaction) {
            this.creationInstruction(interaction.sourceSpan, prefetch ? r3_identifiers_1.Identifiers.deferPrefetchOnInteraction : r3_identifiers_1.Identifiers.deferOnInteraction, [o.literal(interaction.reference)]);
        }
        if (viewport) {
            this.creationInstruction(viewport.sourceSpan, prefetch ? r3_identifiers_1.Identifiers.deferPrefetchOnViewport : r3_identifiers_1.Identifiers.deferOnViewport, [o.literal(viewport.reference)]);
        }
    };
    TemplateDefinitionBuilder.prototype.allocateDataSlot = function () {
        return this._dataIndex++;
    };
    TemplateDefinitionBuilder.prototype.visitForLoopBlock = function (block) { };
    TemplateDefinitionBuilder.prototype.visitForLoopBlockEmpty = function (block) { };
    TemplateDefinitionBuilder.prototype.getConstCount = function () {
        return this._dataIndex;
    };
    TemplateDefinitionBuilder.prototype.getVarCount = function () {
        return this._pureFunctionSlots;
    };
    TemplateDefinitionBuilder.prototype.getConsts = function () {
        return this._constants;
    };
    TemplateDefinitionBuilder.prototype.getNgContentSelectors = function () {
        return this._ngContentReservedSlots.length ?
            this.constantPool.getConstLiteral((0, util_4.asLiteral)(this._ngContentReservedSlots), true) :
            null;
    };
    TemplateDefinitionBuilder.prototype.bindingContext = function () {
        return "".concat(this._bindingContext++);
    };
    TemplateDefinitionBuilder.prototype.templatePropertyBindings = function (templateIndex, attrs) {
        var e_8, _a, e_9, _b;
        var _this = this;
        var propertyBindings = [];
        var _loop_2 = function (input) {
            if (!(input instanceof t.BoundAttribute)) {
                return "continue";
            }
            var value = input.value.visit(this_2._valueConverter);
            if (value === undefined) {
                return "continue";
            }
            this_2.allocateBindingSlots(value);
            if (value instanceof ast_1.Interpolation) {
                var params = [];
                this_2.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), templateIndex, input.name, input, value, params);
            }
            else {
                propertyBindings.push({
                    span: input.sourceSpan,
                    paramsOrFn: getBindingFunctionParams(function () { return _this.convertPropertyBinding(value); }, input.name)
                });
            }
        };
        var this_2 = this;
        try {
            for (var attrs_1 = __values(attrs), attrs_1_1 = attrs_1.next(); !attrs_1_1.done; attrs_1_1 = attrs_1.next()) {
                var input = attrs_1_1.value;
                _loop_2(input);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (attrs_1_1 && !attrs_1_1.done && (_a = attrs_1.return)) _a.call(attrs_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        try {
            for (var propertyBindings_2 = __values(propertyBindings), propertyBindings_2_1 = propertyBindings_2.next(); !propertyBindings_2_1.done; propertyBindings_2_1 = propertyBindings_2.next()) {
                var propertyBinding = propertyBindings_2_1.value;
                this.updateInstructionWithAdvance(templateIndex, propertyBinding.span, r3_identifiers_1.Identifiers.property, propertyBinding.paramsOrFn);
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (propertyBindings_2_1 && !propertyBindings_2_1.done && (_b = propertyBindings_2.return)) _b.call(propertyBindings_2);
            }
            finally { if (e_9) throw e_9.error; }
        }
    };
    TemplateDefinitionBuilder.prototype.instructionFn = function (fns, span, reference, paramsOrFn, prepend) {
        if (prepend === void 0) { prepend = false; }
        fns[prepend ? 'unshift' : 'push']({ span: span, reference: reference, paramsOrFn: paramsOrFn });
    };
    TemplateDefinitionBuilder.prototype.processStylingUpdateInstruction = function (elementIndex, instruction) {
        var e_10, _a;
        var _this = this;
        var allocateBindingSlots = 0;
        if (instruction) {
            var _loop_3 = function (call) {
                allocateBindingSlots += call.allocateBindingSlots;
                this_3.updateInstructionWithAdvance(elementIndex, call.sourceSpan, instruction.reference, function () { return call.params(function (value) { return (call.supportsInterpolation && value instanceof ast_1.Interpolation) ?
                    _this.getUpdateInstructionArguments(value) :
                    _this.convertPropertyBinding(value); }); });
            };
            var this_3 = this;
            try {
                for (var _b = __values(instruction.calls), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var call = _c.value;
                    _loop_3(call);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        return allocateBindingSlots;
    };
    TemplateDefinitionBuilder.prototype.creationInstruction = function (span, reference, paramsOrFn, prepend) {
        this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);
    };
    TemplateDefinitionBuilder.prototype.updateInstructionWithAdvance = function (nodeIndex, span, reference, paramsOrFn) {
        this.addAdvanceInstructionIfNecessary(nodeIndex, span);
        this.updateInstruction(span, reference, paramsOrFn);
    };
    TemplateDefinitionBuilder.prototype.updateInstruction = function (span, reference, paramsOrFn) {
        this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);
    };
    TemplateDefinitionBuilder.prototype.addAdvanceInstructionIfNecessary = function (nodeIndex, span) {
        if (nodeIndex !== this._currentIndex) {
            var delta = nodeIndex - this._currentIndex;
            if (delta < 1) {
                throw new Error('advance instruction can only go forwards');
            }
            this.instructionFn(this._updateCodeFns, span, r3_identifiers_1.Identifiers.advance, [o.literal(delta)]);
            this._currentIndex = nodeIndex;
        }
    };
    TemplateDefinitionBuilder.prototype.allocatePureFunctionSlots = function (numSlots) {
        var originalSlots = this._pureFunctionSlots;
        this._pureFunctionSlots += numSlots;
        return originalSlots;
    };
    TemplateDefinitionBuilder.prototype.allocateBindingSlots = function (value) {
        this._bindingSlots += value instanceof ast_1.Interpolation ? value.expressions.length : 1;
    };
    TemplateDefinitionBuilder.prototype.getImplicitReceiverExpr = function () {
        if (this._implicitReceiverExpr) {
            return this._implicitReceiverExpr;
        }
        return this._implicitReceiverExpr = this.level === 0 ?
            o.variable(util_4.CONTEXT_NAME) :
            this._bindingScope.getOrCreateSharedContextVar(0);
    };
    TemplateDefinitionBuilder.prototype.convertPropertyBinding = function (value) {
        var _a;
        var convertedPropertyBinding = (0, expression_converter_1.convertPropertyBinding)(this, this.getImplicitReceiverExpr(), value, this.bindingContext());
        var valExpr = convertedPropertyBinding.currValExpr;
        (_a = this._tempVariables).push.apply(_a, __spreadArray([], __read(convertedPropertyBinding.stmts), false));
        return valExpr;
    };
    TemplateDefinitionBuilder.prototype.getUpdateInstructionArguments = function (value) {
        var _a;
        var _b = (0, expression_converter_1.convertUpdateArguments)(this, this.getImplicitReceiverExpr(), value, this.bindingContext()), args = _b.args, stmts = _b.stmts;
        (_a = this._tempVariables).push.apply(_a, __spreadArray([], __read(stmts), false));
        return args;
    };
    TemplateDefinitionBuilder.prototype.allocateControlFlowTempVariable = function () {
        if (this._controlFlowTempVariable === null) {
            var name_2 = "".concat(this.contextName, "_contFlowTmp");
            this._tempVariables.push(new o.DeclareVarStmt(name_2));
            this._controlFlowTempVariable = o.variable(name_2);
        }
        return this._controlFlowTempVariable;
    };
    TemplateDefinitionBuilder.prototype.getAttributeExpressions = function (elementName, renderAttributes, inputs, outputs, styles, templateAttrs, boundI18nAttrs) {
        var e_11, _a;
        if (templateAttrs === void 0) { templateAttrs = []; }
        if (boundI18nAttrs === void 0) { boundI18nAttrs = []; }
        var alreadySeen = new Set();
        var attrExprs = [];
        var ngProjectAsAttr;
        try {
            for (var renderAttributes_1 = __values(renderAttributes), renderAttributes_1_1 = renderAttributes_1.next(); !renderAttributes_1_1.done; renderAttributes_1_1 = renderAttributes_1.next()) {
                var attr = renderAttributes_1_1.value;
                if (attr.name === NG_PROJECT_AS_ATTR_NAME) {
                    ngProjectAsAttr = attr;
                }
                if (attr.i18n) {
                    var i18nVarRefsCache = this._constants.i18nVarRefsCache;
                    var i18nVarRef = void 0;
                    if (i18nVarRefsCache.has(attr.i18n)) {
                        i18nVarRef = i18nVarRefsCache.get(attr.i18n);
                    }
                    else {
                        i18nVarRef = this.i18nTranslate(attr.i18n);
                        i18nVarRefsCache.set(attr.i18n, i18nVarRef);
                    }
                    attrExprs.push(o.literal(attr.name), i18nVarRef);
                }
                else {
                    attrExprs.push.apply(attrExprs, __spreadArray(__spreadArray([], __read(getAttributeNameLiterals(attr.name)), false), [trustedConstAttribute(elementName, attr)], false));
                }
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (renderAttributes_1_1 && !renderAttributes_1_1.done && (_a = renderAttributes_1.return)) _a.call(renderAttributes_1);
            }
            finally { if (e_11) throw e_11.error; }
        }
        if (ngProjectAsAttr) {
            attrExprs.push.apply(attrExprs, __spreadArray([], __read(getNgProjectAsLiteral(ngProjectAsAttr)), false));
        }
        function addAttrExpr(key, value) {
            if (typeof key === 'string') {
                if (!alreadySeen.has(key)) {
                    attrExprs.push.apply(attrExprs, __spreadArray([], __read(getAttributeNameLiterals(key)), false));
                    value !== undefined && attrExprs.push(value);
                    alreadySeen.add(key);
                }
            }
            else {
                attrExprs.push(o.literal(key));
            }
        }
        if (styles) {
            styles.populateInitialStylingAttrs(attrExprs);
        }
        if (inputs.length || outputs.length) {
            var attrsLengthBeforeInputs = attrExprs.length;
            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                if (input.type !== 4 && input.type !== 1) {
                    addAttrExpr(input.name);
                }
            }
            for (var i = 0; i < outputs.length; i++) {
                var output = outputs[i];
                if (output.type !== 1) {
                    addAttrExpr(output.name);
                }
            }
            if (attrExprs.length !== attrsLengthBeforeInputs) {
                attrExprs.splice(attrsLengthBeforeInputs, 0, o.literal(3));
            }
        }
        if (templateAttrs.length) {
            attrExprs.push(o.literal(4));
            templateAttrs.forEach(function (attr) { return addAttrExpr(attr.name); });
        }
        if (boundI18nAttrs.length) {
            attrExprs.push(o.literal(6));
            boundI18nAttrs.forEach(function (attr) { return addAttrExpr(attr.name); });
        }
        return attrExprs;
    };
    TemplateDefinitionBuilder.prototype.addToConsts = function (expression) {
        if (o.isNull(expression)) {
            return o.TYPED_NULL_EXPR;
        }
        var consts = this._constants.constExpressions;
        for (var i = 0; i < consts.length; i++) {
            if (consts[i].isEquivalent(expression)) {
                return o.literal(i);
            }
        }
        return o.literal(consts.push(expression) - 1);
    };
    TemplateDefinitionBuilder.prototype.addAttrsToConsts = function (attrs) {
        return attrs !== null && attrs.length > 0 ? this.addToConsts(o.literalArr(attrs)) :
            o.TYPED_NULL_EXPR;
    };
    TemplateDefinitionBuilder.prototype.prepareRefsArray = function (references) {
        var _this = this;
        if (!references || references.length === 0) {
            return o.TYPED_NULL_EXPR;
        }
        var refsParam = references.flatMap(function (reference) {
            var slot = _this.allocateDataSlot();
            var variableName = _this._bindingScope.freshReferenceName();
            var retrievalLevel = _this.level;
            var lhs = o.variable(variableName);
            _this._bindingScope.set(retrievalLevel, reference.name, lhs, 0, function (scope, relativeLevel) {
                var nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : [];
                var refExpr = lhs.set(o.importExpr(r3_identifiers_1.Identifiers.reference).callFn([o.literal(slot)]));
                return nextContextStmt.concat(refExpr.toConstDecl());
            }, true);
            return [reference.name, reference.value];
        });
        return (0, util_4.asLiteral)(refsParam);
    };
    TemplateDefinitionBuilder.prototype.prepareListenerParameter = function (tagName, outputAst, index) {
        var _this = this;
        return function () {
            var eventName = outputAst.name;
            var bindingFnName = outputAst.type === 1 ?
                (0, util_2.prepareSyntheticListenerFunctionName)(eventName, outputAst.phase) :
                (0, parse_util_1.sanitizeIdentifier)(eventName);
            var handlerName = "".concat(_this.templateName, "_").concat(tagName, "_").concat(bindingFnName, "_").concat(index, "_listener");
            var scope = _this._bindingScope.nestedScope(_this._bindingScope.bindingLevel, EVENT_BINDING_SCOPE_GLOBALS);
            return prepareEventListenerParameters(outputAst, handlerName, scope);
        };
    };
    return TemplateDefinitionBuilder;
}());
exports.TemplateDefinitionBuilder = TemplateDefinitionBuilder;
var ValueConverter = (function (_super) {
    __extends(ValueConverter, _super);
    function ValueConverter(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {
        var _this = _super.call(this) || this;
        _this.constantPool = constantPool;
        _this.allocateSlot = allocateSlot;
        _this.allocatePureFunctionSlots = allocatePureFunctionSlots;
        _this.definePipe = definePipe;
        _this._pipeBindExprs = [];
        return _this;
    }
    ValueConverter.prototype.visitPipe = function (pipe, context) {
        var slot = this.allocateSlot();
        var slotPseudoLocal = "PIPE:".concat(slot);
        var pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);
        var target = new ast_1.PropertyRead(pipe.span, pipe.sourceSpan, pipe.nameSpan, new ast_1.ImplicitReceiver(pipe.span, pipe.sourceSpan), slotPseudoLocal);
        var _a = pipeBindingCallInfo(pipe.args), identifier = _a.identifier, isVarLength = _a.isVarLength;
        this.definePipe(pipe.name, slotPseudoLocal, slot, o.importExpr(identifier));
        var args = __spreadArray([pipe.exp], __read(pipe.args), false);
        var convertedArgs = isVarLength ?
            this.visitAll([new ast_1.LiteralArray(pipe.span, pipe.sourceSpan, args)]) :
            this.visitAll(args);
        var pipeBindExpr = new ast_1.Call(pipe.span, pipe.sourceSpan, target, __spreadArray([
            new ast_1.LiteralPrimitive(pipe.span, pipe.sourceSpan, slot),
            new ast_1.LiteralPrimitive(pipe.span, pipe.sourceSpan, pureFunctionSlot)
        ], __read(convertedArgs), false), null);
        this._pipeBindExprs.push(pipeBindExpr);
        return pipeBindExpr;
    };
    ValueConverter.prototype.updatePipeSlotOffsets = function (bindingSlots) {
        this._pipeBindExprs.forEach(function (pipe) {
            var slotOffset = pipe.args[1];
            slotOffset.value += bindingSlots;
        });
    };
    ValueConverter.prototype.visitLiteralArray = function (array, context) {
        var _this = this;
        return new expression_converter_1.BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), function (values) {
            var literal = o.literalArr(values);
            return getLiteralFactory(_this.constantPool, literal, _this.allocatePureFunctionSlots);
        });
    };
    ValueConverter.prototype.visitLiteralMap = function (map, context) {
        var _this = this;
        return new expression_converter_1.BuiltinFunctionCall(map.span, map.sourceSpan, this.visitAll(map.values), function (values) {
            var literal = o.literalMap(values.map(function (value, index) { return ({ key: map.keys[index].key, value: value, quoted: map.keys[index].quoted }); }));
            return getLiteralFactory(_this.constantPool, literal, _this.allocatePureFunctionSlots);
        });
    };
    return ValueConverter;
}(ast_1.AstMemoryEfficientTransformer));
exports.ValueConverter = ValueConverter;
var pipeBindingIdentifiers = [r3_identifiers_1.Identifiers.pipeBind1, r3_identifiers_1.Identifiers.pipeBind2, r3_identifiers_1.Identifiers.pipeBind3, r3_identifiers_1.Identifiers.pipeBind4];
function pipeBindingCallInfo(args) {
    var identifier = pipeBindingIdentifiers[args.length];
    return {
        identifier: identifier || r3_identifiers_1.Identifiers.pipeBindV,
        isVarLength: !identifier,
    };
}
var pureFunctionIdentifiers = [
    r3_identifiers_1.Identifiers.pureFunction0, r3_identifiers_1.Identifiers.pureFunction1, r3_identifiers_1.Identifiers.pureFunction2, r3_identifiers_1.Identifiers.pureFunction3, r3_identifiers_1.Identifiers.pureFunction4,
    r3_identifiers_1.Identifiers.pureFunction5, r3_identifiers_1.Identifiers.pureFunction6, r3_identifiers_1.Identifiers.pureFunction7, r3_identifiers_1.Identifiers.pureFunction8
];
function pureFunctionCallInfo(args) {
    var identifier = pureFunctionIdentifiers[args.length];
    return {
        identifier: identifier || r3_identifiers_1.Identifiers.pureFunctionV,
        isVarLength: !identifier,
    };
}
function generateNextContextExpr(relativeLevelDiff) {
    return o.importExpr(r3_identifiers_1.Identifiers.nextContext)
        .callFn(relativeLevelDiff > 1 ? [o.literal(relativeLevelDiff)] : []);
}
function getLiteralFactory(constantPool, literal, allocateSlots) {
    var _a = constantPool.getLiteralFactory(literal), literalFactory = _a.literalFactory, literalFactoryArguments = _a.literalFactoryArguments;
    var startSlot = allocateSlots(1 + literalFactoryArguments.length);
    var _b = pureFunctionCallInfo(literalFactoryArguments), identifier = _b.identifier, isVarLength = _b.isVarLength;
    var args = [o.literal(startSlot), literalFactory];
    if (isVarLength) {
        args.push(o.literalArr(literalFactoryArguments));
    }
    else {
        args.push.apply(args, __spreadArray([], __read(literalFactoryArguments), false));
    }
    return o.importExpr(identifier).callFn(args);
}
function getAttributeNameLiterals(name) {
    var _a = __read((0, tags_1.splitNsName)(name), 2), attributeNamespace = _a[0], attributeName = _a[1];
    var nameLiteral = o.literal(attributeName);
    if (attributeNamespace) {
        return [
            o.literal(0), o.literal(attributeNamespace), nameLiteral
        ];
    }
    return [nameLiteral];
}
var SHARED_CONTEXT_KEY = '$$shared_ctx$$';
var BindingScope = (function () {
    function BindingScope(bindingLevel, parent, globals) {
        var e_12, _a;
        if (bindingLevel === void 0) { bindingLevel = 0; }
        if (parent === void 0) { parent = null; }
        this.bindingLevel = bindingLevel;
        this.parent = parent;
        this.globals = globals;
        this.map = new Map();
        this.referenceNameIndex = 0;
        this.restoreViewVariable = null;
        this.usesRestoredViewContext = false;
        if (globals !== undefined) {
            try {
                for (var globals_1 = __values(globals), globals_1_1 = globals_1.next(); !globals_1_1.done; globals_1_1 = globals_1.next()) {
                    var name_3 = globals_1_1.value;
                    this.set(0, name_3, o.variable(name_3));
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (globals_1_1 && !globals_1_1.done && (_a = globals_1.return)) _a.call(globals_1);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
    }
    BindingScope.createRootScope = function () {
        return new BindingScope();
    };
    BindingScope.prototype.get = function (name) {
        var current = this;
        while (current) {
            var value = current.map.get(name);
            if (value != null) {
                if (current !== this) {
                    value = {
                        retrievalLevel: value.retrievalLevel,
                        lhs: value.lhs,
                        declareLocalCallback: value.declareLocalCallback,
                        declare: false,
                        priority: value.priority
                    };
                    this.map.set(name, value);
                    this.maybeGenerateSharedContextVar(value);
                    this.maybeRestoreView();
                }
                if (value.declareLocalCallback && !value.declare) {
                    value.declare = true;
                }
                return typeof value.lhs === 'function' ? value.lhs(this) : value.lhs;
            }
            current = current.parent;
        }
        return this.bindingLevel === 0 ? null : this.getComponentProperty(name);
    };
    BindingScope.prototype.set = function (retrievalLevel, name, lhs, priority, declareLocalCallback, localRef) {
        if (priority === void 0) { priority = 0; }
        if (this.map.has(name)) {
            if (localRef) {
                return this;
            }
            (0, util_1.error)("The name ".concat(name, " is already defined in scope to be ").concat(this.map.get(name)));
        }
        this.map.set(name, {
            retrievalLevel: retrievalLevel,
            lhs: lhs,
            declare: false,
            declareLocalCallback: declareLocalCallback,
            priority: priority,
        });
        return this;
    };
    BindingScope.prototype.getLocal = function (name) {
        return this.get(name);
    };
    BindingScope.prototype.notifyImplicitReceiverUse = function () {
        if (this.bindingLevel !== 0) {
            this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;
        }
    };
    BindingScope.prototype.nestedScope = function (level, globals) {
        var newScope = new BindingScope(level, this, globals);
        if (level > 0)
            newScope.generateSharedContextVar(0);
        return newScope;
    };
    BindingScope.prototype.getOrCreateSharedContextVar = function (retrievalLevel) {
        var bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;
        if (!this.map.has(bindingKey)) {
            this.generateSharedContextVar(retrievalLevel);
        }
        return this.map.get(bindingKey).lhs;
    };
    BindingScope.prototype.getSharedContextName = function (retrievalLevel) {
        var sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel);
        return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;
    };
    BindingScope.prototype.maybeGenerateSharedContextVar = function (value) {
        if (value.priority === 1 &&
            value.retrievalLevel < this.bindingLevel) {
            var sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);
            if (sharedCtxObj) {
                sharedCtxObj.declare = true;
            }
            else {
                this.generateSharedContextVar(value.retrievalLevel);
            }
        }
    };
    BindingScope.prototype.generateSharedContextVar = function (retrievalLevel) {
        var lhs = o.variable(util_4.CONTEXT_NAME + this.freshReferenceName());
        this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {
            retrievalLevel: retrievalLevel,
            lhs: lhs,
            declareLocalCallback: function (scope, relativeLevel) {
                return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];
            },
            declare: false,
            priority: 2,
        });
    };
    BindingScope.prototype.getComponentProperty = function (name) {
        var componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);
        componentValue.declare = true;
        this.maybeRestoreView();
        var lhs = typeof componentValue.lhs === 'function' ? componentValue.lhs(this) : componentValue.lhs;
        return name === util_4.DIRECT_CONTEXT_REFERENCE ? lhs : lhs.prop(name);
    };
    BindingScope.prototype.maybeRestoreView = function () {
        if (this.isListenerScope()) {
            if (!this.parent.restoreViewVariable) {
                this.parent.restoreViewVariable = o.variable(this.parent.freshReferenceName());
            }
            this.restoreViewVariable = this.parent.restoreViewVariable;
        }
    };
    BindingScope.prototype.restoreViewStatement = function () {
        if (this.restoreViewVariable) {
            var restoreCall = (0, util_4.invokeInstruction)(null, r3_identifiers_1.Identifiers.restoreView, [this.restoreViewVariable]);
            return this.usesRestoredViewContext ?
                o.variable(util_4.RESTORED_VIEW_CONTEXT_NAME).set(restoreCall).toConstDecl() :
                restoreCall.toStmt();
        }
        return null;
    };
    BindingScope.prototype.viewSnapshotStatements = function () {
        return this.restoreViewVariable ?
            [
                this.restoreViewVariable.set((0, util_4.invokeInstruction)(null, r3_identifiers_1.Identifiers.getCurrentView, [])).toConstDecl()
            ] :
            [];
    };
    BindingScope.prototype.isListenerScope = function () {
        return this.parent && this.parent.bindingLevel === this.bindingLevel;
    };
    BindingScope.prototype.variableDeclarations = function () {
        var _this = this;
        var currentContextLevel = 0;
        return Array.from(this.map.values())
            .filter(function (value) { return value.declare; })
            .sort(function (a, b) { return b.retrievalLevel - a.retrievalLevel || b.priority - a.priority; })
            .reduce(function (stmts, value) {
            var levelDiff = _this.bindingLevel - value.retrievalLevel;
            var currStmts = value.declareLocalCallback(_this, levelDiff - currentContextLevel);
            currentContextLevel = levelDiff;
            return stmts.concat(currStmts);
        }, []);
    };
    BindingScope.prototype.freshReferenceName = function () {
        var current = this;
        while (current.parent)
            current = current.parent;
        var ref = "".concat(util_4.REFERENCE_PREFIX).concat(current.referenceNameIndex++);
        return ref;
    };
    BindingScope.prototype.hasRestoreViewVariable = function () {
        return !!this.restoreViewVariable;
    };
    BindingScope.prototype.notifyRestoredViewContextUse = function () {
        this.usesRestoredViewContext = true;
    };
    return BindingScope;
}());
exports.BindingScope = BindingScope;
function createCssSelector(elementName, attributes) {
    var cssSelector = new selector_1.CssSelector();
    var elementNameNoNs = (0, tags_1.splitNsName)(elementName)[1];
    cssSelector.setElement(elementNameNoNs);
    Object.getOwnPropertyNames(attributes).forEach(function (name) {
        var nameNoNs = (0, tags_1.splitNsName)(name)[1];
        var value = attributes[name];
        cssSelector.addAttribute(nameNoNs, value);
        if (name.toLowerCase() === 'class') {
            var classes = value.trim().split(/\s+/);
            classes.forEach(function (className) { return cssSelector.addClassName(className); });
        }
    });
    return cssSelector;
}
exports.createCssSelector = createCssSelector;
function getNgProjectAsLiteral(attribute) {
    var parsedR3Selector = core.parseSelectorToR3Selector(attribute.value)[0];
    return [o.literal(5), (0, util_4.asLiteral)(parsedR3Selector)];
}
function getPropertyInterpolationExpression(interpolation) {
    switch ((0, util_4.getInterpolationArgsLength)(interpolation)) {
        case 1:
            return r3_identifiers_1.Identifiers.propertyInterpolate;
        case 3:
            return r3_identifiers_1.Identifiers.propertyInterpolate1;
        case 5:
            return r3_identifiers_1.Identifiers.propertyInterpolate2;
        case 7:
            return r3_identifiers_1.Identifiers.propertyInterpolate3;
        case 9:
            return r3_identifiers_1.Identifiers.propertyInterpolate4;
        case 11:
            return r3_identifiers_1.Identifiers.propertyInterpolate5;
        case 13:
            return r3_identifiers_1.Identifiers.propertyInterpolate6;
        case 15:
            return r3_identifiers_1.Identifiers.propertyInterpolate7;
        case 17:
            return r3_identifiers_1.Identifiers.propertyInterpolate8;
        default:
            return r3_identifiers_1.Identifiers.propertyInterpolateV;
    }
}
function getAttributeInterpolationExpression(interpolation) {
    switch ((0, util_4.getInterpolationArgsLength)(interpolation)) {
        case 3:
            return r3_identifiers_1.Identifiers.attributeInterpolate1;
        case 5:
            return r3_identifiers_1.Identifiers.attributeInterpolate2;
        case 7:
            return r3_identifiers_1.Identifiers.attributeInterpolate3;
        case 9:
            return r3_identifiers_1.Identifiers.attributeInterpolate4;
        case 11:
            return r3_identifiers_1.Identifiers.attributeInterpolate5;
        case 13:
            return r3_identifiers_1.Identifiers.attributeInterpolate6;
        case 15:
            return r3_identifiers_1.Identifiers.attributeInterpolate7;
        case 17:
            return r3_identifiers_1.Identifiers.attributeInterpolate8;
        default:
            return r3_identifiers_1.Identifiers.attributeInterpolateV;
    }
}
function getTextInterpolationExpression(interpolation) {
    switch ((0, util_4.getInterpolationArgsLength)(interpolation)) {
        case 1:
            return r3_identifiers_1.Identifiers.textInterpolate;
        case 3:
            return r3_identifiers_1.Identifiers.textInterpolate1;
        case 5:
            return r3_identifiers_1.Identifiers.textInterpolate2;
        case 7:
            return r3_identifiers_1.Identifiers.textInterpolate3;
        case 9:
            return r3_identifiers_1.Identifiers.textInterpolate4;
        case 11:
            return r3_identifiers_1.Identifiers.textInterpolate5;
        case 13:
            return r3_identifiers_1.Identifiers.textInterpolate6;
        case 15:
            return r3_identifiers_1.Identifiers.textInterpolate7;
        case 17:
            return r3_identifiers_1.Identifiers.textInterpolate8;
        default:
            return r3_identifiers_1.Identifiers.textInterpolateV;
    }
}
function parseTemplate(template, templateUrl, options) {
    if (options === void 0) { options = {}; }
    var interpolationConfig = options.interpolationConfig, preserveWhitespaces = options.preserveWhitespaces, enableI18nLegacyMessageIdFormat = options.enableI18nLegacyMessageIdFormat;
    var bindingParser = makeBindingParser(interpolationConfig);
    var htmlParser = new html_parser_1.HtmlParser();
    var parseResult = htmlParser.parse(template, templateUrl, __assign(__assign({ leadingTriviaChars: exports.LEADING_TRIVIA_CHARS }, options), { tokenizeExpansionForms: true, tokenizeBlocks: options.enabledBlockTypes != null && options.enabledBlockTypes.size > 0 }));
    if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors &&
        parseResult.errors.length > 0) {
        var parsedTemplate_1 = {
            interpolationConfig: interpolationConfig,
            preserveWhitespaces: preserveWhitespaces,
            errors: parseResult.errors,
            nodes: [],
            styleUrls: [],
            styles: [],
            ngContentSelectors: []
        };
        if (options.collectCommentNodes) {
            parsedTemplate_1.commentNodes = [];
        }
        return parsedTemplate_1;
    }
    var rootNodes = parseResult.rootNodes;
    var i18nMetaVisitor = new meta_1.I18nMetaVisitor(interpolationConfig, !preserveWhitespaces, enableI18nLegacyMessageIdFormat);
    var i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);
    if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors &&
        i18nMetaResult.errors.length > 0) {
        var parsedTemplate_2 = {
            interpolationConfig: interpolationConfig,
            preserveWhitespaces: preserveWhitespaces,
            errors: i18nMetaResult.errors,
            nodes: [],
            styleUrls: [],
            styles: [],
            ngContentSelectors: []
        };
        if (options.collectCommentNodes) {
            parsedTemplate_2.commentNodes = [];
        }
        return parsedTemplate_2;
    }
    rootNodes = i18nMetaResult.rootNodes;
    if (!preserveWhitespaces) {
        rootNodes = html.visitAll(new html_whitespaces_1.WhitespaceVisitor(), rootNodes);
        if (i18nMetaVisitor.hasI18nMeta) {
            rootNodes = html.visitAll(new meta_1.I18nMetaVisitor(interpolationConfig, false), rootNodes);
        }
    }
    var _a = (0, r3_template_transform_1.htmlAstToRender3Ast)(rootNodes, bindingParser, {
        collectCommentNodes: !!options.collectCommentNodes,
        enabledBlockTypes: options.enabledBlockTypes || new Set(),
    }), nodes = _a.nodes, errors = _a.errors, styleUrls = _a.styleUrls, styles = _a.styles, ngContentSelectors = _a.ngContentSelectors, commentNodes = _a.commentNodes;
    errors.push.apply(errors, __spreadArray(__spreadArray([], __read(parseResult.errors), false), __read(i18nMetaResult.errors), false));
    var parsedTemplate = {
        interpolationConfig: interpolationConfig,
        preserveWhitespaces: preserveWhitespaces,
        errors: errors.length > 0 ? errors : null,
        nodes: nodes,
        styleUrls: styleUrls,
        styles: styles,
        ngContentSelectors: ngContentSelectors
    };
    if (options.collectCommentNodes) {
        parsedTemplate.commentNodes = commentNodes;
    }
    return parsedTemplate;
}
exports.parseTemplate = parseTemplate;
var elementRegistry = new dom_element_schema_registry_1.DomElementSchemaRegistry();
function makeBindingParser(interpolationConfig) {
    if (interpolationConfig === void 0) { interpolationConfig = interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG; }
    return new binding_parser_1.BindingParser(new parser_1.Parser(new lexer_1.Lexer()), interpolationConfig, elementRegistry, []);
}
exports.makeBindingParser = makeBindingParser;
function resolveSanitizationFn(context, isAttribute) {
    switch (context) {
        case core.SecurityContext.HTML:
            return o.importExpr(r3_identifiers_1.Identifiers.sanitizeHtml);
        case core.SecurityContext.SCRIPT:
            return o.importExpr(r3_identifiers_1.Identifiers.sanitizeScript);
        case core.SecurityContext.STYLE:
            return isAttribute ? o.importExpr(r3_identifiers_1.Identifiers.sanitizeStyle) : null;
        case core.SecurityContext.URL:
            return o.importExpr(r3_identifiers_1.Identifiers.sanitizeUrl);
        case core.SecurityContext.RESOURCE_URL:
            return o.importExpr(r3_identifiers_1.Identifiers.sanitizeResourceUrl);
        default:
            return null;
    }
}
exports.resolveSanitizationFn = resolveSanitizationFn;
function trustedConstAttribute(tagName, attr) {
    var value = (0, util_4.asLiteral)(attr.value);
    if ((0, trusted_types_sinks_1.isTrustedTypesSink)(tagName, attr.name)) {
        switch (elementRegistry.securityContext(tagName, attr.name, true)) {
            case core.SecurityContext.HTML:
                return o.taggedTemplate(o.importExpr(r3_identifiers_1.Identifiers.trustConstantHtml), new o.TemplateLiteral([new o.TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);
            case core.SecurityContext.RESOURCE_URL:
                return o.taggedTemplate(o.importExpr(r3_identifiers_1.Identifiers.trustConstantResourceUrl), new o.TemplateLiteral([new o.TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);
            default:
                return value;
        }
    }
    else {
        return value;
    }
}
function isSingleElementTemplate(children) {
    return children.length === 1 && children[0] instanceof t.Element;
}
function isTextNode(node) {
    return node instanceof t.Text || node instanceof t.BoundText || node instanceof t.Icu;
}
function isIframeElement(tagName) {
    return tagName.toLowerCase() === 'iframe';
}
function hasTextChildrenOnly(children) {
    return children.every(isTextNode);
}
function getBindingFunctionParams(deferredParams, name, eagerParams) {
    return function () {
        var value = deferredParams();
        var fnParams = Array.isArray(value) ? value : [value];
        if (eagerParams) {
            fnParams.push.apply(fnParams, __spreadArray([], __read(eagerParams), false));
        }
        if (name) {
            fnParams.unshift(o.literal(name));
        }
        return fnParams;
    };
}
var NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';
function getTranslationDeclStmts(message, variable, closureVar, params, transformFn) {
    if (params === void 0) { params = {}; }
    var statements = [
        (0, util_3.declareI18nVariable)(variable),
        o.ifStmt(createClosureModeGuard(), (0, get_msg_utils_1.createGoogleGetMsgStatements)(variable, message, closureVar, params), (0, localize_utils_1.createLocalizeStatements)(variable, message, (0, util_3.formatI18nPlaceholderNamesInMap)(params, false))),
    ];
    if (transformFn) {
        statements.push(new o.ExpressionStatement(variable.set(transformFn(variable))));
    }
    return statements;
}
exports.getTranslationDeclStmts = getTranslationDeclStmts;
function createClosureModeGuard() {
    return o.typeofExpr(o.variable(NG_I18N_CLOSURE_MODE))
        .notIdentical(o.literal('undefined', o.STRING_TYPE))
        .and(o.variable(NG_I18N_CLOSURE_MODE));
}
