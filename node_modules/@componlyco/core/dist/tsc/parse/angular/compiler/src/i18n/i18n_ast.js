"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecurseVisitor = exports.CloneVisitor = exports.IcuPlaceholder = exports.Placeholder = exports.TagPlaceholder = exports.Icu = exports.Container = exports.Text = exports.Message = void 0;
var Message = (function () {
    function Message(nodes, placeholders, placeholderToMessage, meaning, description, customId) {
        this.nodes = nodes;
        this.placeholders = placeholders;
        this.placeholderToMessage = placeholderToMessage;
        this.meaning = meaning;
        this.description = description;
        this.customId = customId;
        this.legacyIds = [];
        this.id = this.customId;
        this.messageString = serializeMessage(this.nodes);
        if (nodes.length) {
            this.sources = [{
                    filePath: nodes[0].sourceSpan.start.file.url,
                    startLine: nodes[0].sourceSpan.start.line + 1,
                    startCol: nodes[0].sourceSpan.start.col + 1,
                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
                    endCol: nodes[0].sourceSpan.start.col + 1
                }];
        }
        else {
            this.sources = [];
        }
    }
    return Message;
}());
exports.Message = Message;
var Text = (function () {
    function Text(value, sourceSpan) {
        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    Text.prototype.visit = function (visitor, context) {
        return visitor.visitText(this, context);
    };
    return Text;
}());
exports.Text = Text;
var Container = (function () {
    function Container(children, sourceSpan) {
        this.children = children;
        this.sourceSpan = sourceSpan;
    }
    Container.prototype.visit = function (visitor, context) {
        return visitor.visitContainer(this, context);
    };
    return Container;
}());
exports.Container = Container;
var Icu = (function () {
    function Icu(expression, type, cases, sourceSpan, expressionPlaceholder) {
        this.expression = expression;
        this.type = type;
        this.cases = cases;
        this.sourceSpan = sourceSpan;
        this.expressionPlaceholder = expressionPlaceholder;
    }
    Icu.prototype.visit = function (visitor, context) {
        return visitor.visitIcu(this, context);
    };
    return Icu;
}());
exports.Icu = Icu;
var TagPlaceholder = (function () {
    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan, startSourceSpan, endSourceSpan) {
        this.tag = tag;
        this.attrs = attrs;
        this.startName = startName;
        this.closeName = closeName;
        this.children = children;
        this.isVoid = isVoid;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    TagPlaceholder.prototype.visit = function (visitor, context) {
        return visitor.visitTagPlaceholder(this, context);
    };
    return TagPlaceholder;
}());
exports.TagPlaceholder = TagPlaceholder;
var Placeholder = (function () {
    function Placeholder(value, name, sourceSpan) {
        this.value = value;
        this.name = name;
        this.sourceSpan = sourceSpan;
    }
    Placeholder.prototype.visit = function (visitor, context) {
        return visitor.visitPlaceholder(this, context);
    };
    return Placeholder;
}());
exports.Placeholder = Placeholder;
var IcuPlaceholder = (function () {
    function IcuPlaceholder(value, name, sourceSpan) {
        this.value = value;
        this.name = name;
        this.sourceSpan = sourceSpan;
    }
    IcuPlaceholder.prototype.visit = function (visitor, context) {
        return visitor.visitIcuPlaceholder(this, context);
    };
    return IcuPlaceholder;
}());
exports.IcuPlaceholder = IcuPlaceholder;
var CloneVisitor = (function () {
    function CloneVisitor() {
    }
    CloneVisitor.prototype.visitText = function (text, context) {
        return new Text(text.value, text.sourceSpan);
    };
    CloneVisitor.prototype.visitContainer = function (container, context) {
        var _this = this;
        var children = container.children.map(function (n) { return n.visit(_this, context); });
        return new Container(children, container.sourceSpan);
    };
    CloneVisitor.prototype.visitIcu = function (icu, context) {
        var _this = this;
        var cases = {};
        Object.keys(icu.cases).forEach(function (key) { return cases[key] = icu.cases[key].visit(_this, context); });
        var msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan, icu.expressionPlaceholder);
        return msg;
    };
    CloneVisitor.prototype.visitTagPlaceholder = function (ph, context) {
        var _this = this;
        var children = ph.children.map(function (n) { return n.visit(_this, context); });
        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);
    };
    CloneVisitor.prototype.visitPlaceholder = function (ph, context) {
        return new Placeholder(ph.value, ph.name, ph.sourceSpan);
    };
    CloneVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
    };
    return CloneVisitor;
}());
exports.CloneVisitor = CloneVisitor;
var RecurseVisitor = (function () {
    function RecurseVisitor() {
    }
    RecurseVisitor.prototype.visitText = function (text, context) { };
    RecurseVisitor.prototype.visitContainer = function (container, context) {
        var _this = this;
        container.children.forEach(function (child) { return child.visit(_this); });
    };
    RecurseVisitor.prototype.visitIcu = function (icu, context) {
        var _this = this;
        Object.keys(icu.cases).forEach(function (k) {
            icu.cases[k].visit(_this);
        });
    };
    RecurseVisitor.prototype.visitTagPlaceholder = function (ph, context) {
        var _this = this;
        ph.children.forEach(function (child) { return child.visit(_this); });
    };
    RecurseVisitor.prototype.visitPlaceholder = function (ph, context) { };
    RecurseVisitor.prototype.visitIcuPlaceholder = function (ph, context) { };
    return RecurseVisitor;
}());
exports.RecurseVisitor = RecurseVisitor;
function serializeMessage(messageNodes) {
    var visitor = new LocalizeMessageStringVisitor();
    var str = messageNodes.map(function (n) { return n.visit(visitor); }).join('');
    return str;
}
var LocalizeMessageStringVisitor = (function () {
    function LocalizeMessageStringVisitor() {
    }
    LocalizeMessageStringVisitor.prototype.visitText = function (text) {
        return text.value;
    };
    LocalizeMessageStringVisitor.prototype.visitContainer = function (container) {
        var _this = this;
        return container.children.map(function (child) { return child.visit(_this); }).join('');
    };
    LocalizeMessageStringVisitor.prototype.visitIcu = function (icu) {
        var _this = this;
        var strCases = Object.keys(icu.cases).map(function (k) { return "".concat(k, " {").concat(icu.cases[k].visit(_this), "}"); });
        return "{".concat(icu.expressionPlaceholder, ", ").concat(icu.type, ", ").concat(strCases.join(' '), "}");
    };
    LocalizeMessageStringVisitor.prototype.visitTagPlaceholder = function (ph) {
        var _this = this;
        var children = ph.children.map(function (child) { return child.visit(_this); }).join('');
        return "{$".concat(ph.startName, "}").concat(children, "{$").concat(ph.closeName, "}");
    };
    LocalizeMessageStringVisitor.prototype.visitPlaceholder = function (ph) {
        return "{$".concat(ph.name, "}");
    };
    LocalizeMessageStringVisitor.prototype.visitIcuPlaceholder = function (ph) {
        return "{$".concat(ph.name, "}");
    };
    return LocalizeMessageStringVisitor;
}());
