"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ingestHostEvent = exports.ingestHostProperty = exports.ingestHostBinding = exports.ingestComponent = void 0;
var core_1 = require("../../../core");
var e = __importStar(require("../../../expression_parser/ast"));
var tags_1 = require("../../../ml_parser/tags");
var o = __importStar(require("../../../output/output_ast"));
var t = __importStar(require("../../../render3/r3_ast"));
var ir = __importStar(require("../ir"));
var compilation_1 = require("./compilation");
var conversion_1 = require("./conversion");
var compatibilityMode = ir.CompatibilityMode.TemplateDefinitionBuilder;
function ingestComponent(componentName, template, constantPool) {
    var cpl = new compilation_1.ComponentCompilationJob(componentName, constantPool, compatibilityMode);
    ingestNodes(cpl.root, template);
    return cpl;
}
exports.ingestComponent = ingestComponent;
function ingestHostBinding(input, bindingParser, constantPool) {
    var e_1, _a, e_2, _b;
    var _c, _d;
    var job = new compilation_1.HostBindingCompilationJob(input.componentName, constantPool, compatibilityMode);
    try {
        for (var _e = __values((_c = input.properties) !== null && _c !== void 0 ? _c : []), _f = _e.next(); !_f.done; _f = _e.next()) {
            var property = _f.value;
            ingestHostProperty(job, property, false);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var _g = __values((_d = input.events) !== null && _d !== void 0 ? _d : []), _h = _g.next(); !_h.done; _h = _g.next()) {
            var event_1 = _h.value;
            ingestHostEvent(job, event_1);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return job;
}
exports.ingestHostBinding = ingestHostBinding;
function ingestHostProperty(job, property, isTextAttribute) {
    var expression;
    var ast = property.expression.ast;
    if (ast instanceof e.Interpolation) {
        expression =
            new ir.Interpolation(ast.strings, ast.expressions.map(function (expr) { return convertAst(expr, job); }));
    }
    else {
        expression = convertAst(ast, job);
    }
    var bindingKind = ir.BindingKind.Property;
    if (property.name.startsWith('attr.')) {
        property.name = property.name.substring('attr.'.length);
        bindingKind = ir.BindingKind.Attribute;
    }
    job.update.push(ir.createBindingOp(job.root.xref, bindingKind, property.name, expression, null, core_1.SecurityContext
        .NONE, isTextAttribute, false, property.sourceSpan));
}
exports.ingestHostProperty = ingestHostProperty;
function ingestHostEvent(job, event) { }
exports.ingestHostEvent = ingestHostEvent;
function ingestNodes(view, template) {
    var e_3, _a;
    try {
        for (var template_1 = __values(template), template_1_1 = template_1.next(); !template_1_1.done; template_1_1 = template_1.next()) {
            var node = template_1_1.value;
            if (node instanceof t.Element) {
                ingestElement(view, node);
            }
            else if (node instanceof t.Template) {
                ingestTemplate(view, node);
            }
            else if (node instanceof t.Text) {
                ingestText(view, node);
            }
            else if (node instanceof t.BoundText) {
                ingestBoundText(view, node);
            }
            else {
                throw new Error("Unsupported template node: ".concat(node.constructor.name));
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (template_1_1 && !template_1_1.done && (_a = template_1.return)) _a.call(template_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
}
function ingestElement(view, element) {
    var e_4, _a;
    var staticAttributes = {};
    try {
        for (var _b = __values(element.attributes), _c = _b.next(); !_c.done; _c = _b.next()) {
            var attr = _c.value;
            staticAttributes[attr.name] = attr.value;
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_4) throw e_4.error; }
    }
    var id = view.job.allocateXrefId();
    var _d = __read((0, tags_1.splitNsName)(element.name), 2), namespaceKey = _d[0], elementName = _d[1];
    var startOp = ir.createElementStartOp(elementName, id, (0, conversion_1.namespaceForKey)(namespaceKey), element.startSourceSpan);
    view.create.push(startOp);
    ingestBindings(view, startOp, element);
    ingestReferences(startOp, element);
    ingestNodes(view, element.children);
    view.create.push(ir.createElementEndOp(id, element.endSourceSpan));
}
function ingestTemplate(view, tmpl) {
    var _a, e_5, _b;
    var childView = view.job.allocateView(view.xref);
    var tagNameWithoutNamespace = tmpl.tagName;
    var namespacePrefix = '';
    if (tmpl.tagName) {
        _a = __read((0, tags_1.splitNsName)(tmpl.tagName), 2), namespacePrefix = _a[0], tagNameWithoutNamespace = _a[1];
    }
    var tplOp = ir.createTemplateOp(childView.xref, tagNameWithoutNamespace !== null && tagNameWithoutNamespace !== void 0 ? tagNameWithoutNamespace : 'ng-template', (0, conversion_1.namespaceForKey)(namespacePrefix), tmpl.startSourceSpan);
    view.create.push(tplOp);
    ingestBindings(view, tplOp, tmpl);
    ingestReferences(tplOp, tmpl);
    ingestNodes(childView, tmpl.children);
    try {
        for (var _c = __values(tmpl.variables), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = _d.value, name_1 = _e.name, value = _e.value;
            childView.contextVariables.set(name_1, value);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
        }
        finally { if (e_5) throw e_5.error; }
    }
}
function ingestText(view, text) {
    view.create.push(ir.createTextOp(view.job.allocateXrefId(), text.value, text.sourceSpan));
}
function ingestBoundText(view, text) {
    var value = text.value;
    if (value instanceof e.ASTWithSource) {
        value = value.ast;
    }
    if (!(value instanceof e.Interpolation)) {
        throw new Error("AssertionError: expected Interpolation for BoundText node, got ".concat(value.constructor.name));
    }
    var textXref = view.job.allocateXrefId();
    view.create.push(ir.createTextOp(textXref, '', text.sourceSpan));
    view.update.push(ir.createInterpolateTextOp(textXref, new ir.Interpolation(value.strings, value.expressions.map(function (expr) { return convertAst(expr, view.job); })), text.sourceSpan));
}
function convertAst(ast, cpl) {
    if (ast instanceof e.ASTWithSource) {
        return convertAst(ast.ast, cpl);
    }
    else if (ast instanceof e.PropertyRead) {
        if (ast.receiver instanceof e.ImplicitReceiver && !(ast.receiver instanceof e.ThisReceiver)) {
            return new ir.LexicalReadExpr(ast.name);
        }
        else {
            return new o.ReadPropExpr(convertAst(ast.receiver, cpl), ast.name);
        }
    }
    else if (ast instanceof e.PropertyWrite) {
        return new o.WritePropExpr(convertAst(ast.receiver, cpl), ast.name, convertAst(ast.value, cpl));
    }
    else if (ast instanceof e.KeyedWrite) {
        return new o.WriteKeyExpr(convertAst(ast.receiver, cpl), convertAst(ast.key, cpl), convertAst(ast.value, cpl));
    }
    else if (ast instanceof e.Call) {
        if (ast.receiver instanceof e.ImplicitReceiver) {
            throw new Error("Unexpected ImplicitReceiver");
        }
        else {
            return new o.InvokeFunctionExpr(convertAst(ast.receiver, cpl), ast.args.map(function (arg) { return convertAst(arg, cpl); }));
        }
    }
    else if (ast instanceof e.LiteralPrimitive) {
        return o.literal(ast.value);
    }
    else if (ast instanceof e.Binary) {
        var operator = conversion_1.BINARY_OPERATORS.get(ast.operation);
        if (operator === undefined) {
            throw new Error("AssertionError: unknown binary operator ".concat(ast.operation));
        }
        return new o.BinaryOperatorExpr(operator, convertAst(ast.left, cpl), convertAst(ast.right, cpl));
    }
    else if (ast instanceof e.ThisReceiver) {
        return new ir.ContextExpr(cpl.root.xref);
    }
    else if (ast instanceof e.KeyedRead) {
        return new o.ReadKeyExpr(convertAst(ast.receiver, cpl), convertAst(ast.key, cpl));
    }
    else if (ast instanceof e.Chain) {
        throw new Error("AssertionError: Chain in unknown context");
    }
    else if (ast instanceof e.LiteralMap) {
        var entries = ast.keys.map(function (key, idx) {
            var value = ast.values[idx];
            return new o.LiteralMapEntry(key.key, convertAst(value, cpl), key.quoted);
        });
        return new o.LiteralMapExpr(entries);
    }
    else if (ast instanceof e.LiteralArray) {
        return new o.LiteralArrayExpr(ast.expressions.map(function (expr) { return convertAst(expr, cpl); }));
    }
    else if (ast instanceof e.Conditional) {
        return new o.ConditionalExpr(convertAst(ast.condition, cpl), convertAst(ast.trueExp, cpl), convertAst(ast.falseExp, cpl));
    }
    else if (ast instanceof e.NonNullAssert) {
        return convertAst(ast.expression, cpl);
    }
    else if (ast instanceof e.BindingPipe) {
        return new ir.PipeBindingExpr(cpl.allocateXrefId(), ast.name, __spreadArray([
            convertAst(ast.exp, cpl)
        ], __read(ast.args.map(function (arg) { return convertAst(arg, cpl); })), false));
    }
    else if (ast instanceof e.SafeKeyedRead) {
        return new ir.SafeKeyedReadExpr(convertAst(ast.receiver, cpl), convertAst(ast.key, cpl));
    }
    else if (ast instanceof e.SafePropertyRead) {
        return new ir.SafePropertyReadExpr(convertAst(ast.receiver, cpl), ast.name);
    }
    else if (ast instanceof e.SafeCall) {
        return new ir.SafeInvokeFunctionExpr(convertAst(ast.receiver, cpl), ast.args.map(function (a) { return convertAst(a, cpl); }));
    }
    else if (ast instanceof e.EmptyExpr) {
        return new ir.EmptyExpr();
    }
    else {
        throw new Error("Unhandled expression type: ".concat(ast.constructor.name));
    }
}
function ingestBindings(view, op, element) {
    var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;
    if (element instanceof t.Template) {
        try {
            for (var _f = __values(element.templateAttrs), _g = _f.next(); !_g.done; _g = _f.next()) {
                var attr = _g.value;
                if (attr instanceof t.TextAttribute) {
                    ingestBinding(view, op.xref, attr.name, o.literal(attr.value), 1, null, core_1.SecurityContext.NONE, attr.sourceSpan, true, true);
                }
                else {
                    ingestBinding(view, op.xref, attr.name, attr.value, attr.type, attr.unit, attr.securityContext, attr.sourceSpan, false, true);
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
            }
            finally { if (e_6) throw e_6.error; }
        }
    }
    try {
        for (var _h = __values(element.attributes), _j = _h.next(); !_j.done; _j = _h.next()) {
            var attr = _j.value;
            ingestBinding(view, op.xref, attr.name, o.literal(attr.value), 1, null, core_1.SecurityContext.NONE, attr.sourceSpan, true, false);
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
        }
        finally { if (e_7) throw e_7.error; }
    }
    try {
        for (var _k = __values(element.inputs), _l = _k.next(); !_l.done; _l = _k.next()) {
            var input = _l.value;
            ingestBinding(view, op.xref, input.name, input.value, input.type, input.unit, input.securityContext, input.sourceSpan, false, false);
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
        }
        finally { if (e_8) throw e_8.error; }
    }
    try {
        for (var _m = __values(element.outputs), _o = _m.next(); !_o.done; _o = _m.next()) {
            var output = _o.value;
            var listenerOp = void 0;
            if (output.type === 1) {
                if (output.phase === null) {
                    throw Error('Animation listener should have a phase');
                }
                listenerOp = ir.createListenerOpForAnimation(op.xref, output.name, output.phase, op.tag);
            }
            else {
                listenerOp = ir.createListenerOp(op.xref, output.name, op.tag);
            }
            var inputExprs = void 0;
            var handler = output.handler;
            if (handler instanceof e.ASTWithSource) {
                handler = handler.ast;
            }
            if (handler instanceof e.Chain) {
                inputExprs = handler.expressions;
            }
            else {
                inputExprs = [handler];
            }
            if (inputExprs.length === 0) {
                throw new Error('Expected listener to have non-empty expression list.');
            }
            var expressions = inputExprs.map(function (expr) { return convertAst(expr, view.job); });
            var returnExpr = expressions.pop();
            try {
                for (var expressions_1 = (e_10 = void 0, __values(expressions)), expressions_1_1 = expressions_1.next(); !expressions_1_1.done; expressions_1_1 = expressions_1.next()) {
                    var expr = expressions_1_1.value;
                    var stmtOp = ir.createStatementOp(new o.ExpressionStatement(expr));
                    listenerOp.handlerOps.push(stmtOp);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (expressions_1_1 && !expressions_1_1.done && (_e = expressions_1.return)) _e.call(expressions_1);
                }
                finally { if (e_10) throw e_10.error; }
            }
            listenerOp.handlerOps.push(ir.createStatementOp(new o.ReturnStatement(returnExpr)));
            view.create.push(listenerOp);
        }
    }
    catch (e_9_1) { e_9 = { error: e_9_1 }; }
    finally {
        try {
            if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
        }
        finally { if (e_9) throw e_9.error; }
    }
}
var BINDING_KINDS = new Map([
    [0, ir.BindingKind.Property],
    [1, ir.BindingKind.Attribute],
    [2, ir.BindingKind.ClassName],
    [3, ir.BindingKind.StyleProperty],
    [4, ir.BindingKind.Animation],
]);
function ingestBinding(view, xref, name, value, type, unit, securityContext, sourceSpan, isTextAttribute, isTemplateBinding) {
    if (value instanceof e.ASTWithSource) {
        value = value.ast;
    }
    var expression;
    if (value instanceof e.Interpolation) {
        expression = new ir.Interpolation(value.strings, value.expressions.map(function (expr) { return convertAst(expr, view.job); }));
    }
    else if (value instanceof e.AST) {
        expression = convertAst(value, view.job);
    }
    else {
        expression = value;
    }
    var kind = BINDING_KINDS.get(type);
    view.update.push(ir.createBindingOp(xref, kind, name, expression, unit, securityContext, isTextAttribute, isTemplateBinding, sourceSpan));
}
function ingestReferences(op, element) {
    var e_11, _a;
    assertIsArray(op.localRefs);
    try {
        for (var _b = __values(element.references), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = _c.value, name_2 = _d.name, value = _d.value;
            op.localRefs.push({
                name: name_2,
                target: value,
            });
        }
    }
    catch (e_11_1) { e_11 = { error: e_11_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_11) throw e_11.error; }
    }
}
function assertIsArray(value) {
    if (!Array.isArray(value)) {
        throw new Error("AssertionError: expected an array");
    }
}
