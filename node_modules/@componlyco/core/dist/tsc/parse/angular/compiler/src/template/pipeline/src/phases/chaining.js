"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phaseChaining = void 0;
var o = __importStar(require("../../../../output/output_ast"));
var r3_identifiers_1 = require("../../../../render3/r3_identifiers");
var ir = __importStar(require("../../ir"));
var CHAINABLE = new Set([
    r3_identifiers_1.Identifiers.elementStart,
    r3_identifiers_1.Identifiers.elementEnd,
    r3_identifiers_1.Identifiers.element,
    r3_identifiers_1.Identifiers.property,
    r3_identifiers_1.Identifiers.hostProperty,
    r3_identifiers_1.Identifiers.styleProp,
    r3_identifiers_1.Identifiers.attribute,
    r3_identifiers_1.Identifiers.stylePropInterpolate1,
    r3_identifiers_1.Identifiers.stylePropInterpolate2,
    r3_identifiers_1.Identifiers.stylePropInterpolate3,
    r3_identifiers_1.Identifiers.stylePropInterpolate4,
    r3_identifiers_1.Identifiers.stylePropInterpolate5,
    r3_identifiers_1.Identifiers.stylePropInterpolate6,
    r3_identifiers_1.Identifiers.stylePropInterpolate7,
    r3_identifiers_1.Identifiers.stylePropInterpolate8,
    r3_identifiers_1.Identifiers.stylePropInterpolateV,
    r3_identifiers_1.Identifiers.classProp,
    r3_identifiers_1.Identifiers.listener,
    r3_identifiers_1.Identifiers.elementContainerStart,
    r3_identifiers_1.Identifiers.elementContainerEnd,
    r3_identifiers_1.Identifiers.elementContainer,
    r3_identifiers_1.Identifiers.listener,
]);
function phaseChaining(job) {
    var e_1, _a;
    try {
        for (var _b = __values(job.units), _c = _b.next(); !_c.done; _c = _b.next()) {
            var unit = _c.value;
            chainOperationsInList(unit.create);
            chainOperationsInList(unit.update);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
exports.phaseChaining = phaseChaining;
function chainOperationsInList(opList) {
    var e_2, _a;
    var chain = null;
    try {
        for (var opList_1 = __values(opList), opList_1_1 = opList_1.next(); !opList_1_1.done; opList_1_1 = opList_1.next()) {
            var op = opList_1_1.value;
            if (op.kind !== ir.OpKind.Statement || !(op.statement instanceof o.ExpressionStatement)) {
                chain = null;
                continue;
            }
            if (!(op.statement.expr instanceof o.InvokeFunctionExpr) ||
                !(op.statement.expr.fn instanceof o.ExternalExpr)) {
                chain = null;
                continue;
            }
            var instruction = op.statement.expr.fn.value;
            if (!CHAINABLE.has(instruction)) {
                chain = null;
                continue;
            }
            if (chain !== null && chain.instruction === instruction) {
                var expression = chain.expression.callFn(op.statement.expr.args, op.statement.expr.sourceSpan, op.statement.expr.pure);
                chain.expression = expression;
                chain.op.statement = expression.toStmt();
                ir.OpList.remove(op);
            }
            else {
                chain = {
                    op: op,
                    instruction: instruction,
                    expression: op.statement.expr,
                };
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (opList_1_1 && !opList_1_1.done && (_a = opList_1.return)) _a.call(opList_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
