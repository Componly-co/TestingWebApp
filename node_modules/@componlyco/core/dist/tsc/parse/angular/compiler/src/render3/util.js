"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateForwardRef = exports.convertFromMaybeForwardRefExpression = exports.createMayBeForwardRefExpression = exports.refsToArray = exports.wrapReference = exports.guardedExpression = exports.devOnlyGuardedExpression = exports.jitOnlyGuardedExpression = exports.prepareSyntheticListenerFunctionName = exports.getSafePropertyAccessString = exports.prepareSyntheticListenerName = exports.prepareSyntheticPropertyName = exports.typeWithParameters = void 0;
var abstract_emitter_1 = require("../output/abstract_emitter");
var o = __importStar(require("../output/output_ast"));
var r3_identifiers_1 = require("./r3_identifiers");
function typeWithParameters(type, numParams) {
    if (numParams === 0) {
        return o.expressionType(type);
    }
    var params = [];
    for (var i = 0; i < numParams; i++) {
        params.push(o.DYNAMIC_TYPE);
    }
    return o.expressionType(type, undefined, params);
}
exports.typeWithParameters = typeWithParameters;
var ANIMATE_SYMBOL_PREFIX = '@';
function prepareSyntheticPropertyName(name) {
    return "".concat(ANIMATE_SYMBOL_PREFIX).concat(name);
}
exports.prepareSyntheticPropertyName = prepareSyntheticPropertyName;
function prepareSyntheticListenerName(name, phase) {
    return "".concat(ANIMATE_SYMBOL_PREFIX).concat(name, ".").concat(phase);
}
exports.prepareSyntheticListenerName = prepareSyntheticListenerName;
function getSafePropertyAccessString(accessor, name) {
    var escapedName = (0, abstract_emitter_1.escapeIdentifier)(name, false, false);
    return escapedName !== name ? "".concat(accessor, "[").concat(escapedName, "]") : "".concat(accessor, ".").concat(name);
}
exports.getSafePropertyAccessString = getSafePropertyAccessString;
function prepareSyntheticListenerFunctionName(name, phase) {
    return "animation_".concat(name, "_").concat(phase);
}
exports.prepareSyntheticListenerFunctionName = prepareSyntheticListenerFunctionName;
function jitOnlyGuardedExpression(expr) {
    return guardedExpression('ngJitMode', expr);
}
exports.jitOnlyGuardedExpression = jitOnlyGuardedExpression;
function devOnlyGuardedExpression(expr) {
    return guardedExpression('ngDevMode', expr);
}
exports.devOnlyGuardedExpression = devOnlyGuardedExpression;
function guardedExpression(guard, expr) {
    var guardExpr = new o.ExternalExpr({ name: guard, moduleName: null });
    var guardNotDefined = new o.BinaryOperatorExpr(o.BinaryOperator.Identical, new o.TypeofExpr(guardExpr), o.literal('undefined'));
    var guardUndefinedOrTrue = new o.BinaryOperatorExpr(o.BinaryOperator.Or, guardNotDefined, guardExpr, undefined, undefined, true);
    return new o.BinaryOperatorExpr(o.BinaryOperator.And, guardUndefinedOrTrue, expr);
}
exports.guardedExpression = guardedExpression;
function wrapReference(value) {
    var wrapped = new o.WrappedNodeExpr(value);
    return { value: wrapped, type: wrapped };
}
exports.wrapReference = wrapReference;
function refsToArray(refs, shouldForwardDeclare) {
    var values = o.literalArr(refs.map(function (ref) { return ref.value; }));
    return shouldForwardDeclare ? o.fn([], [new o.ReturnStatement(values)]) : values;
}
exports.refsToArray = refsToArray;
function createMayBeForwardRefExpression(expression, forwardRef) {
    return { expression: expression, forwardRef: forwardRef };
}
exports.createMayBeForwardRefExpression = createMayBeForwardRefExpression;
function convertFromMaybeForwardRefExpression(_a) {
    var expression = _a.expression, forwardRef = _a.forwardRef;
    switch (forwardRef) {
        case 0:
        case 1:
            return expression;
        case 2:
            return generateForwardRef(expression);
    }
}
exports.convertFromMaybeForwardRefExpression = convertFromMaybeForwardRefExpression;
function generateForwardRef(expr) {
    return o.importExpr(r3_identifiers_1.Identifiers.forwardRef).callFn([o.fn([], [new o.ReturnStatement(expr)])]);
}
exports.generateForwardRef = generateForwardRef;
