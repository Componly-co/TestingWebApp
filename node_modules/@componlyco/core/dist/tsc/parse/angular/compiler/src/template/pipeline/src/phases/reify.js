"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phaseReify = void 0;
var o = __importStar(require("../../../../output/output_ast"));
var r3_identifiers_1 = require("../../../../render3/r3_identifiers");
var ir = __importStar(require("../../ir"));
var compilation_1 = require("../compilation");
var ng = __importStar(require("../instruction"));
var sanitizerIdentifierMap = new Map([
    [ir.SanitizerFn.Html, r3_identifiers_1.Identifiers.sanitizeHtml],
    [ir.SanitizerFn.IframeAttribute, r3_identifiers_1.Identifiers.validateIframeAttribute],
    [ir.SanitizerFn.ResourceUrl, r3_identifiers_1.Identifiers.sanitizeResourceUrl],
    [ir.SanitizerFn.Script, r3_identifiers_1.Identifiers.sanitizeScript],
    [ir.SanitizerFn.Style, r3_identifiers_1.Identifiers.sanitizeStyle], [ir.SanitizerFn.Url, r3_identifiers_1.Identifiers.sanitizeUrl]
]);
function phaseReify(cpl) {
    var e_1, _a;
    try {
        for (var _b = __values(cpl.units), _c = _b.next(); !_c.done; _c = _b.next()) {
            var unit = _c.value;
            reifyCreateOperations(unit, unit.create);
            reifyUpdateOperations(unit, unit.update);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
exports.phaseReify = phaseReify;
function reifyCreateOperations(unit, ops) {
    var e_2, _a;
    try {
        for (var ops_1 = __values(ops), ops_1_1 = ops_1.next(); !ops_1_1.done; ops_1_1 = ops_1.next()) {
            var op = ops_1_1.value;
            ir.transformExpressionsInOp(op, reifyIrExpression, ir.VisitorContextFlag.None);
            switch (op.kind) {
                case ir.OpKind.Text:
                    ir.OpList.replace(op, ng.text(op.slot, op.initialValue, op.sourceSpan));
                    break;
                case ir.OpKind.ElementStart:
                    ir.OpList.replace(op, ng.elementStart(op.slot, op.tag, op.attributes, op.localRefs, op.sourceSpan));
                    break;
                case ir.OpKind.Element:
                    ir.OpList.replace(op, ng.element(op.slot, op.tag, op.attributes, op.localRefs, op.sourceSpan));
                    break;
                case ir.OpKind.ElementEnd:
                    ir.OpList.replace(op, ng.elementEnd(op.sourceSpan));
                    break;
                case ir.OpKind.ContainerStart:
                    ir.OpList.replace(op, ng.elementContainerStart(op.slot, op.attributes, op.localRefs, op.sourceSpan));
                    break;
                case ir.OpKind.Container:
                    ir.OpList.replace(op, ng.elementContainer(op.slot, op.attributes, op.localRefs, op.sourceSpan));
                    break;
                case ir.OpKind.ContainerEnd:
                    ir.OpList.replace(op, ng.elementContainerEnd());
                    break;
                case ir.OpKind.Template:
                    if (!(unit instanceof compilation_1.ViewCompilationUnit)) {
                        throw new Error("AssertionError: must be compiling a component");
                    }
                    var childView = unit.job.views.get(op.xref);
                    ir.OpList.replace(op, ng.template(op.slot, o.variable(childView.fnName), childView.decls, childView.vars, op.tag, op.attributes, op.sourceSpan));
                    break;
                case ir.OpKind.DisableBindings:
                    ir.OpList.replace(op, ng.disableBindings());
                    break;
                case ir.OpKind.EnableBindings:
                    ir.OpList.replace(op, ng.enableBindings());
                    break;
                case ir.OpKind.Pipe:
                    ir.OpList.replace(op, ng.pipe(op.slot, op.name));
                    break;
                case ir.OpKind.Listener:
                    var listenerFn = reifyListenerHandler(unit, op.handlerFnName, op.handlerOps, op.consumesDollarEvent);
                    ir.OpList.replace(op, ng.listener(op.name, listenerFn));
                    break;
                case ir.OpKind.Variable:
                    if (op.variable.name === null) {
                        throw new Error("AssertionError: unnamed variable ".concat(op.xref));
                    }
                    ir.OpList.replace(op, ir.createStatementOp(new o.DeclareVarStmt(op.variable.name, op.initializer, undefined, o.StmtModifier.Final)));
                    break;
                case ir.OpKind.Namespace:
                    switch (op.active) {
                        case ir.Namespace.HTML:
                            ir.OpList.replace(op, ng.namespaceHTML());
                            break;
                        case ir.Namespace.SVG:
                            ir.OpList.replace(op, ng.namespaceSVG());
                            break;
                        case ir.Namespace.Math:
                            ir.OpList.replace(op, ng.namespaceMath());
                            break;
                    }
                    break;
                case ir.OpKind.Statement:
                    break;
                default:
                    throw new Error("AssertionError: Unsupported reification of create op ".concat(ir.OpKind[op.kind]));
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (ops_1_1 && !ops_1_1.done && (_a = ops_1.return)) _a.call(ops_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
function reifyUpdateOperations(_unit, ops) {
    var e_3, _a;
    try {
        for (var ops_2 = __values(ops), ops_2_1 = ops_2.next(); !ops_2_1.done; ops_2_1 = ops_2.next()) {
            var op = ops_2_1.value;
            ir.transformExpressionsInOp(op, reifyIrExpression, ir.VisitorContextFlag.None);
            switch (op.kind) {
                case ir.OpKind.Advance:
                    ir.OpList.replace(op, ng.advance(op.delta, op.sourceSpan));
                    break;
                case ir.OpKind.Property:
                    if (op.expression instanceof ir.Interpolation) {
                        ir.OpList.replace(op, ng.propertyInterpolate(op.name, op.expression.strings, op.expression.expressions, op.sanitizer, op.sourceSpan));
                    }
                    else {
                        ir.OpList.replace(op, ng.property(op.name, op.expression, op.sanitizer, op.sourceSpan));
                    }
                    break;
                case ir.OpKind.StyleProp:
                    if (op.expression instanceof ir.Interpolation) {
                        ir.OpList.replace(op, ng.stylePropInterpolate(op.name, op.expression.strings, op.expression.expressions, op.unit));
                    }
                    else {
                        ir.OpList.replace(op, ng.styleProp(op.name, op.expression, op.unit));
                    }
                    break;
                case ir.OpKind.ClassProp:
                    ir.OpList.replace(op, ng.classProp(op.name, op.expression));
                    break;
                case ir.OpKind.StyleMap:
                    if (op.expression instanceof ir.Interpolation) {
                        ir.OpList.replace(op, ng.styleMapInterpolate(op.expression.strings, op.expression.expressions));
                    }
                    else {
                        ir.OpList.replace(op, ng.styleMap(op.expression));
                    }
                    break;
                case ir.OpKind.ClassMap:
                    if (op.expression instanceof ir.Interpolation) {
                        ir.OpList.replace(op, ng.classMapInterpolate(op.expression.strings, op.expression.expressions));
                    }
                    else {
                        ir.OpList.replace(op, ng.classMap(op.expression));
                    }
                    break;
                case ir.OpKind.InterpolateText:
                    ir.OpList.replace(op, ng.textInterpolate(op.interpolation.strings, op.interpolation.expressions, op.sourceSpan));
                    break;
                case ir.OpKind.Attribute:
                    if (op.expression instanceof ir.Interpolation) {
                        ir.OpList.replace(op, ng.attributeInterpolate(op.name, op.expression.strings, op.expression.expressions, op.sanitizer));
                    }
                    else {
                        ir.OpList.replace(op, ng.attribute(op.name, op.expression, op.sanitizer));
                    }
                    break;
                case ir.OpKind.HostProperty:
                    if (op.expression instanceof ir.Interpolation) {
                        throw new Error('not yet handled');
                    }
                    else {
                        ir.OpList.replace(op, ng.hostProperty(op.name, op.expression));
                    }
                    break;
                case ir.OpKind.Variable:
                    if (op.variable.name === null) {
                        throw new Error("AssertionError: unnamed variable ".concat(op.xref));
                    }
                    ir.OpList.replace(op, ir.createStatementOp(new o.DeclareVarStmt(op.variable.name, op.initializer, undefined, o.StmtModifier.Final)));
                    break;
                case ir.OpKind.Statement:
                    break;
                default:
                    throw new Error("AssertionError: Unsupported reification of update op ".concat(ir.OpKind[op.kind]));
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (ops_2_1 && !ops_2_1.done && (_a = ops_2.return)) _a.call(ops_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
}
function reifyIrExpression(expr) {
    if (!ir.isIrExpression(expr)) {
        return expr;
    }
    switch (expr.kind) {
        case ir.ExpressionKind.NextContext:
            return ng.nextContext(expr.steps);
        case ir.ExpressionKind.Reference:
            return ng.reference(expr.slot + 1 + expr.offset);
        case ir.ExpressionKind.LexicalRead:
            throw new Error("AssertionError: unresolved LexicalRead of ".concat(expr.name));
        case ir.ExpressionKind.RestoreView:
            if (typeof expr.view === 'number') {
                throw new Error("AssertionError: unresolved RestoreView");
            }
            return ng.restoreView(expr.view);
        case ir.ExpressionKind.ResetView:
            return ng.resetView(expr.expr);
        case ir.ExpressionKind.GetCurrentView:
            return ng.getCurrentView();
        case ir.ExpressionKind.ReadVariable:
            if (expr.name === null) {
                throw new Error("Read of unnamed variable ".concat(expr.xref));
            }
            return o.variable(expr.name);
        case ir.ExpressionKind.ReadTemporaryExpr:
            if (expr.name === null) {
                throw new Error("Read of unnamed temporary ".concat(expr.xref));
            }
            return o.variable(expr.name);
        case ir.ExpressionKind.AssignTemporaryExpr:
            if (expr.name === null) {
                throw new Error("Assign of unnamed temporary ".concat(expr.xref));
            }
            return o.variable(expr.name).set(expr.expr);
        case ir.ExpressionKind.PureFunctionExpr:
            if (expr.fn === null) {
                throw new Error("AssertionError: expected PureFunctions to have been extracted");
            }
            return ng.pureFunction(expr.varOffset, expr.fn, expr.args);
        case ir.ExpressionKind.PureFunctionParameterExpr:
            throw new Error("AssertionError: expected PureFunctionParameterExpr to have been extracted");
        case ir.ExpressionKind.PipeBinding:
            return ng.pipeBind(expr.slot, expr.varOffset, expr.args);
        case ir.ExpressionKind.PipeBindingVariadic:
            return ng.pipeBindV(expr.slot, expr.varOffset, expr.args);
        case ir.ExpressionKind.SanitizerExpr:
            return o.importExpr(sanitizerIdentifierMap.get(expr.fn));
        default:
            throw new Error("AssertionError: Unsupported reification of ir.Expression kind: ".concat(ir.ExpressionKind[expr.kind]));
    }
}
function reifyListenerHandler(unit, name, handlerOps, consumesDollarEvent) {
    var e_4, _a;
    reifyUpdateOperations(unit, handlerOps);
    var handlerStmts = [];
    try {
        for (var handlerOps_1 = __values(handlerOps), handlerOps_1_1 = handlerOps_1.next(); !handlerOps_1_1.done; handlerOps_1_1 = handlerOps_1.next()) {
            var op = handlerOps_1_1.value;
            if (op.kind !== ir.OpKind.Statement) {
                throw new Error("AssertionError: expected reified statements, but found op ".concat(ir.OpKind[op.kind]));
            }
            handlerStmts.push(op.statement);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (handlerOps_1_1 && !handlerOps_1_1.done && (_a = handlerOps_1.return)) _a.call(handlerOps_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    var params = [];
    if (consumesDollarEvent) {
        params.push(new o.FnParam('$event'));
    }
    return o.fn(params, handlerStmts, undefined, undefined, name);
}
