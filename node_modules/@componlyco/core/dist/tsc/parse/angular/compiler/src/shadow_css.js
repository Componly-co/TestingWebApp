"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.repeatGroups = exports.processRules = exports.CssRule = exports.ShadowCss = void 0;
var animationKeywords = new Set([
    'inherit', 'initial', 'revert', 'unset',
    'alternate', 'alternate-reverse', 'normal', 'reverse',
    'backwards', 'both', 'forwards', 'none',
    'paused', 'running',
    'ease', 'ease-in', 'ease-in-out', 'ease-out', 'linear', 'step-start', 'step-end',
    'end', 'jump-both', 'jump-end', 'jump-none', 'jump-start', 'start'
]);
var ShadowCss = (function () {
    function ShadowCss() {
        this._animationDeclarationKeyframesRe = /(^|\s+)(?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))(?=[,\s]|$)/g;
    }
    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
        if (hostSelector === void 0) { hostSelector = ''; }
        var comments = [];
        cssText = cssText.replace(_commentRe, function (m) {
            var _a;
            if (m.match(_commentWithHashRe)) {
                comments.push(m);
            }
            else {
                var newLinesMatches = m.match(_newLinesRe);
                comments.push(((_a = newLinesMatches === null || newLinesMatches === void 0 ? void 0 : newLinesMatches.join('')) !== null && _a !== void 0 ? _a : '') + '\n');
            }
            return COMMENT_PLACEHOLDER;
        });
        cssText = this._insertDirectives(cssText);
        var scopedCssText = this._scopeCssText(cssText, selector, hostSelector);
        var commentIdx = 0;
        return scopedCssText.replace(_commentWithHashPlaceHolderRe, function () { return comments[commentIdx++]; });
    };
    ShadowCss.prototype._insertDirectives = function (cssText) {
        cssText = this._insertPolyfillDirectivesInCssText(cssText);
        return this._insertPolyfillRulesInCssText(cssText);
    };
    ShadowCss.prototype._scopeKeyframesRelatedCss = function (cssText, scopeSelector) {
        var _this = this;
        var unscopedKeyframesSet = new Set();
        var scopedKeyframesCssText = processRules(cssText, function (rule) { return _this._scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet); });
        return processRules(scopedKeyframesCssText, function (rule) { return _this._scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet); });
    };
    ShadowCss.prototype._scopeLocalKeyframeDeclarations = function (rule, scopeSelector, unscopedKeyframesSet) {
        return __assign(__assign({}, rule), { selector: rule.selector.replace(/(^@(?:-webkit-)?keyframes(?:\s+))(['"]?)(.+)\2(\s*)$/, function (_, start, quote, keyframeName, endSpaces) {
                unscopedKeyframesSet.add(unescapeQuotes(keyframeName, quote));
                return "".concat(start).concat(quote).concat(scopeSelector, "_").concat(keyframeName).concat(quote).concat(endSpaces);
            }) });
    };
    ShadowCss.prototype._scopeAnimationKeyframe = function (keyframe, scopeSelector, unscopedKeyframesSet) {
        return keyframe.replace(/^(\s*)(['"]?)(.+?)\2(\s*)$/, function (_, spaces1, quote, name, spaces2) {
            name = "".concat(unscopedKeyframesSet.has(unescapeQuotes(name, quote)) ? scopeSelector + '_' : '').concat(name);
            return "".concat(spaces1).concat(quote).concat(name).concat(quote).concat(spaces2);
        });
    };
    ShadowCss.prototype._scopeAnimationRule = function (rule, scopeSelector, unscopedKeyframesSet) {
        var _this = this;
        var content = rule.content.replace(/((?:^|\s+|;)(?:-webkit-)?animation(?:\s*):(?:\s*))([^;]+)/g, function (_, start, animationDeclarations) { return start +
            animationDeclarations.replace(_this._animationDeclarationKeyframesRe, function (original, leadingSpaces, quote, quotedName, nonQuotedName) {
                if (quote === void 0) { quote = ''; }
                if (quotedName) {
                    return "".concat(leadingSpaces).concat(_this._scopeAnimationKeyframe("".concat(quote).concat(quotedName).concat(quote), scopeSelector, unscopedKeyframesSet));
                }
                else {
                    return animationKeywords.has(nonQuotedName) ?
                        original :
                        "".concat(leadingSpaces).concat(_this._scopeAnimationKeyframe(nonQuotedName, scopeSelector, unscopedKeyframesSet));
                }
            }); });
        content = content.replace(/((?:^|\s+|;)(?:-webkit-)?animation-name(?:\s*):(?:\s*))([^;]+)/g, function (_match, start, commaSeparatedKeyframes) { return "".concat(start).concat(commaSeparatedKeyframes.split(',')
            .map(function (keyframe) {
            return _this._scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet);
        })
            .join(',')); });
        return __assign(__assign({}, rule), { content: content });
    };
    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
        return cssText.replace(_cssContentNextSelectorRe, function () {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                m[_i] = arguments[_i];
            }
            return m[2] + '{';
        });
    };
    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
        return cssText.replace(_cssContentRuleRe, function () {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                m[_i] = arguments[_i];
            }
            var rule = m[0].replace(m[1], '').replace(m[2], '');
            return m[4] + rule;
        });
    };
    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
        var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
        cssText = this._insertPolyfillHostInCssText(cssText);
        cssText = this._convertColonHost(cssText);
        cssText = this._convertColonHostContext(cssText);
        cssText = this._convertShadowDOMSelectors(cssText);
        if (scopeSelector) {
            cssText = this._scopeKeyframesRelatedCss(cssText, scopeSelector);
            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
        }
        cssText = cssText + '\n' + unscopedRules;
        return cssText.trim();
    };
    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
        var r = '';
        var m;
        _cssContentUnscopedRuleRe.lastIndex = 0;
        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
            var rule = m[0].replace(m[2], '').replace(m[1], m[4]);
            r += rule + '\n\n';
        }
        return r;
    };
    ShadowCss.prototype._convertColonHost = function (cssText) {
        return cssText.replace(_cssColonHostRe, function (_, hostSelectors, otherSelectors) {
            var e_1, _a;
            if (hostSelectors) {
                var convertedSelectors = [];
                var hostSelectorArray = hostSelectors.split(',').map(function (p) { return p.trim(); });
                try {
                    for (var hostSelectorArray_1 = __values(hostSelectorArray), hostSelectorArray_1_1 = hostSelectorArray_1.next(); !hostSelectorArray_1_1.done; hostSelectorArray_1_1 = hostSelectorArray_1.next()) {
                        var hostSelector = hostSelectorArray_1_1.value;
                        if (!hostSelector)
                            break;
                        var convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;
                        convertedSelectors.push(convertedSelector);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (hostSelectorArray_1_1 && !hostSelectorArray_1_1.done && (_a = hostSelectorArray_1.return)) _a.call(hostSelectorArray_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return convertedSelectors.join(',');
            }
            else {
                return _polyfillHostNoCombinator + otherSelectors;
            }
        });
    };
    ShadowCss.prototype._convertColonHostContext = function (cssText) {
        return cssText.replace(_cssColonHostContextReGlobal, function (selectorText) {
            var _a;
            var contextSelectorGroups = [[]];
            var match;
            while ((match = _cssColonHostContextRe.exec(selectorText))) {
                var newContextSelectors = ((_a = match[1]) !== null && _a !== void 0 ? _a : '').trim().split(',').map(function (m) { return m.trim(); }).filter(function (m) { return m !== ''; });
                var contextSelectorGroupsLength = contextSelectorGroups.length;
                repeatGroups(contextSelectorGroups, newContextSelectors.length);
                for (var i = 0; i < newContextSelectors.length; i++) {
                    for (var j = 0; j < contextSelectorGroupsLength; j++) {
                        contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);
                    }
                }
                selectorText = match[2];
            }
            return contextSelectorGroups
                .map(function (contextSelectors) { return combineHostContextSelectors(contextSelectors, selectorText); })
                .join(', ');
        });
    };
    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
        return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);
    };
    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
        var _this = this;
        return processRules(cssText, function (rule) {
            var selector = rule.selector;
            var content = rule.content;
            if (rule.selector[0] !== '@') {
                selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector);
            }
            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||
                rule.selector.startsWith('@document') || rule.selector.startsWith('@layer') ||
                rule.selector.startsWith('@container') || rule.selector.startsWith('@scope')) {
                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
            }
            else if (rule.selector.startsWith('@font-face') || rule.selector.startsWith('@page')) {
                content = _this._stripScopingSelectors(rule.content);
            }
            return new CssRule(selector, content);
        });
    };
    ShadowCss.prototype._stripScopingSelectors = function (cssText) {
        return processRules(cssText, function (rule) {
            var selector = rule.selector.replace(_shadowDeepSelectors, ' ')
                .replace(_polyfillHostNoCombinatorRe, ' ');
            return new CssRule(selector, rule.content);
        });
    };
    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector) {
        var _this = this;
        return selector.split(',')
            .map(function (part) { return part.trim().split(_shadowDeepSelectors); })
            .map(function (deepParts) {
            var _a = __read(deepParts), shallowPart = _a[0], otherParts = _a.slice(1);
            var applyScope = function (shallowPart) {
                if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
                    return _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
                }
                else {
                    return shallowPart;
                }
            };
            return __spreadArray([applyScope(shallowPart)], __read(otherParts), false).join(' ');
        })
            .join(', ');
    };
    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
        var re = this._makeScopeMatcher(scopeSelector);
        return !re.test(selector);
    };
    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
        var lre = /\[/g;
        var rre = /\]/g;
        scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
    };
    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
        _polyfillHostRe.lastIndex = 0;
        if (_polyfillHostRe.test(selector)) {
            var replaceBy_1 = "[".concat(hostSelector, "]");
            return selector
                .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
                return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
                    return before + replaceBy_1 + colon + after;
                });
            })
                .replace(_polyfillHostRe, replaceBy_1 + ' ');
        }
        return scopeSelector + ' ' + selector;
    };
    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
        var _this = this;
        var _a;
        var isRe = /\[is=([^\]]*)\]/g;
        scopeSelector = scopeSelector.replace(isRe, function (_) {
            var parts = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                parts[_i - 1] = arguments[_i];
            }
            return parts[0];
        });
        var attrName = '[' + scopeSelector + ']';
        var _scopeSelectorPart = function (p) {
            var scopedP = p.trim();
            if (!scopedP) {
                return '';
            }
            if (p.indexOf(_polyfillHostNoCombinator) > -1) {
                scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
            }
            else {
                var t = p.replace(_polyfillHostRe, '');
                if (t.length > 0) {
                    var matches = t.match(/([^:]*)(:*)(.*)/);
                    if (matches) {
                        scopedP = matches[1] + attrName + matches[2] + matches[3];
                    }
                }
            }
            return scopedP;
        };
        var safeContent = new SafeSelector(selector);
        selector = safeContent.content();
        var scopedSelector = '';
        var startIndex = 0;
        var res;
        var sep = /( |>|\+|~(?!=))\s*/g;
        var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;
        var shouldScope = !hasHost;
        while ((res = sep.exec(selector)) !== null) {
            var separator = res[1];
            var part_1 = selector.slice(startIndex, res.index).trim();
            if (part_1.match(_placeholderRe) && ((_a = selector[res.index + 1]) === null || _a === void 0 ? void 0 : _a.match(/[a-fA-F\d]/))) {
                continue;
            }
            shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;
            var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;
            scopedSelector += "".concat(scopedPart, " ").concat(separator, " ");
            startIndex = sep.lastIndex;
        }
        var part = selector.substring(startIndex);
        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;
        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;
        return safeContent.restore(scopedSelector);
    };
    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
        return selector.replace(_colonHostContextRe, _polyfillHostContext)
            .replace(_colonHostRe, _polyfillHost);
    };
    return ShadowCss;
}());
exports.ShadowCss = ShadowCss;
var SafeSelector = (function () {
    function SafeSelector(selector) {
        var _this = this;
        this.placeholders = [];
        this.index = 0;
        selector = this._escapeRegexMatches(selector, /(\[[^\]]*\])/g);
        selector = this._escapeRegexMatches(selector, /(\\.)/g);
        this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
            var replaceBy = "__ph-".concat(_this.index, "__");
            _this.placeholders.push(exp);
            _this.index++;
            return pseudo + replaceBy;
        });
    }
    SafeSelector.prototype.restore = function (content) {
        var _this = this;
        return content.replace(_placeholderRe, function (_ph, index) { return _this.placeholders[+index]; });
    };
    SafeSelector.prototype.content = function () {
        return this._content;
    };
    SafeSelector.prototype._escapeRegexMatches = function (content, pattern) {
        var _this = this;
        return content.replace(pattern, function (_, keep) {
            var replaceBy = "__ph-".concat(_this.index, "__");
            _this.placeholders.push(keep);
            _this.index++;
            return replaceBy;
        });
    };
    return SafeSelector;
}());
var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var _polyfillHost = '-shadowcsshost';
var _polyfillHostContext = '-shadowcsscontext';
var _parenSuffix = '(?:\\((' +
    '(?:\\([^)(]*\\)|[^)(]*)+?' +
    ')\\))?([^,{]*)';
var _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');
var _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');
var _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');
var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
var _shadowDOMSelectorsRe = [
    /::shadow/g,
    /::content/g,
    /\/shadow-deep\//g,
    /\/shadow\//g,
];
var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)|(?:::ng-deep)/g;
var _selectorReSuffix = '([>\\s~+[.,{:][\\s\\S]*)?$';
var _polyfillHostRe = /-shadowcsshost/gim;
var _colonHostRe = /:host/gim;
var _colonHostContextRe = /:host-context/gim;
var _newLinesRe = /\r?\n/g;
var _commentRe = /\/\*[\s\S]*?\*\//g;
var _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=/g;
var COMMENT_PLACEHOLDER = '%COMMENT%';
var _commentWithHashPlaceHolderRe = new RegExp(COMMENT_PLACEHOLDER, 'g');
var _placeholderRe = /__ph-(\d+)__/g;
var BLOCK_PLACEHOLDER = '%BLOCK%';
var _ruleRe = new RegExp("(\\s*(?:".concat(COMMENT_PLACEHOLDER, "\\s*)*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))"), 'g');
var CONTENT_PAIRS = new Map([['{', '}']]);
var COMMA_IN_PLACEHOLDER = '%COMMA_IN_PLACEHOLDER%';
var SEMI_IN_PLACEHOLDER = '%SEMI_IN_PLACEHOLDER%';
var COLON_IN_PLACEHOLDER = '%COLON_IN_PLACEHOLDER%';
var _cssCommaInPlaceholderReGlobal = new RegExp(COMMA_IN_PLACEHOLDER, 'g');
var _cssSemiInPlaceholderReGlobal = new RegExp(SEMI_IN_PLACEHOLDER, 'g');
var _cssColonInPlaceholderReGlobal = new RegExp(COLON_IN_PLACEHOLDER, 'g');
var CssRule = (function () {
    function CssRule(selector, content) {
        this.selector = selector;
        this.content = content;
    }
    return CssRule;
}());
exports.CssRule = CssRule;
function processRules(input, ruleCallback) {
    var escaped = escapeInStrings(input);
    var inputWithEscapedBlocks = escapeBlocks(escaped, CONTENT_PAIRS, BLOCK_PLACEHOLDER);
    var nextBlockIndex = 0;
    var escapedResult = inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            m[_i] = arguments[_i];
        }
        var selector = m[2];
        var content = '';
        var suffix = m[4];
        var contentPrefix = '';
        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
            contentPrefix = '{';
        }
        var rule = ruleCallback(new CssRule(selector, content));
        return "".concat(m[1]).concat(rule.selector).concat(m[3]).concat(contentPrefix).concat(rule.content).concat(suffix);
    });
    return unescapeInStrings(escapedResult);
}
exports.processRules = processRules;
var StringWithEscapedBlocks = (function () {
    function StringWithEscapedBlocks(escapedString, blocks) {
        this.escapedString = escapedString;
        this.blocks = blocks;
    }
    return StringWithEscapedBlocks;
}());
function escapeBlocks(input, charPairs, placeholder) {
    var resultParts = [];
    var escapedBlocks = [];
    var openCharCount = 0;
    var nonBlockStartIndex = 0;
    var blockStartIndex = -1;
    var openChar;
    var closeChar;
    for (var i = 0; i < input.length; i++) {
        var char = input[i];
        if (char === '\\') {
            i++;
        }
        else if (char === closeChar) {
            openCharCount--;
            if (openCharCount === 0) {
                escapedBlocks.push(input.substring(blockStartIndex, i));
                resultParts.push(placeholder);
                nonBlockStartIndex = i;
                blockStartIndex = -1;
                openChar = closeChar = undefined;
            }
        }
        else if (char === openChar) {
            openCharCount++;
        }
        else if (openCharCount === 0 && charPairs.has(char)) {
            openChar = char;
            closeChar = charPairs.get(char);
            openCharCount = 1;
            blockStartIndex = i + 1;
            resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));
        }
    }
    if (blockStartIndex !== -1) {
        escapedBlocks.push(input.substring(blockStartIndex));
        resultParts.push(placeholder);
    }
    else {
        resultParts.push(input.substring(nonBlockStartIndex));
    }
    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
}
var ESCAPE_IN_STRING_MAP = {
    ';': SEMI_IN_PLACEHOLDER,
    ',': COMMA_IN_PLACEHOLDER,
    ':': COLON_IN_PLACEHOLDER
};
function escapeInStrings(input) {
    var result = input;
    var currentQuoteChar = null;
    for (var i = 0; i < result.length; i++) {
        var char = result[i];
        if (char === '\\') {
            i++;
        }
        else {
            if (currentQuoteChar !== null) {
                if (char === currentQuoteChar) {
                    currentQuoteChar = null;
                }
                else {
                    var placeholder = ESCAPE_IN_STRING_MAP[char];
                    if (placeholder) {
                        result = "".concat(result.substr(0, i)).concat(placeholder).concat(result.substr(i + 1));
                        i += placeholder.length - 1;
                    }
                }
            }
            else if (char === '\'' || char === '"') {
                currentQuoteChar = char;
            }
        }
    }
    return result;
}
function unescapeInStrings(input) {
    var result = input.replace(_cssCommaInPlaceholderReGlobal, ',');
    result = result.replace(_cssSemiInPlaceholderReGlobal, ';');
    result = result.replace(_cssColonInPlaceholderReGlobal, ':');
    return result;
}
function unescapeQuotes(str, isQuoted) {
    return !isQuoted ? str : str.replace(/((?:^|[^\\])(?:\\\\)*)\\(?=['"])/g, '$1');
}
function combineHostContextSelectors(contextSelectors, otherSelectors) {
    var hostMarker = _polyfillHostNoCombinator;
    _polyfillHostRe.lastIndex = 0;
    var otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);
    if (contextSelectors.length === 0) {
        return hostMarker + otherSelectors;
    }
    var combined = [contextSelectors.pop() || ''];
    while (contextSelectors.length > 0) {
        var length_1 = combined.length;
        var contextSelector = contextSelectors.pop();
        for (var i = 0; i < length_1; i++) {
            var previousSelectors = combined[i];
            combined[length_1 * 2 + i] = previousSelectors + ' ' + contextSelector;
            combined[length_1 + i] = contextSelector + ' ' + previousSelectors;
            combined[i] = contextSelector + previousSelectors;
        }
    }
    return combined
        .map(function (s) { return otherSelectorsHasHost ?
        "".concat(s).concat(otherSelectors) :
        "".concat(s).concat(hostMarker).concat(otherSelectors, ", ").concat(s, " ").concat(hostMarker).concat(otherSelectors); })
        .join(',');
}
function repeatGroups(groups, multiples) {
    var length = groups.length;
    for (var i = 1; i < multiples; i++) {
        for (var j = 0; j < length; j++) {
            groups[j + (i * length)] = groups[j].slice(0);
        }
    }
}
exports.repeatGroups = repeatGroups;
