"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createExtractedAttributeOp = exports.createNamespaceOp = exports.Namespace = exports.createPipeOp = exports.createListenerOpForAnimation = exports.createListenerOp = exports.createTextOp = exports.createEnableBindingsOp = exports.createDisableBindingsOp = exports.createElementEndOp = exports.createTemplateOp = exports.createElementStartOp = exports.isElementOrContainerOp = void 0;
var enums_1 = require("../enums");
var operations_1 = require("../operations");
var traits_1 = require("../traits");
var shared_1 = require("./shared");
var elementContainerOpKinds = new Set([
    enums_1.OpKind.Element, enums_1.OpKind.ElementStart, enums_1.OpKind.Container, enums_1.OpKind.ContainerStart, enums_1.OpKind.Template
]);
function isElementOrContainerOp(op) {
    return elementContainerOpKinds.has(op.kind);
}
exports.isElementOrContainerOp = isElementOrContainerOp;
function createElementStartOp(tag, xref, namespace, sourceSpan) {
    return __assign(__assign({ kind: enums_1.OpKind.ElementStart, xref: xref, tag: tag, attributes: null, localRefs: [], nonBindable: false, namespace: namespace, sourceSpan: sourceSpan }, traits_1.TRAIT_CONSUMES_SLOT), shared_1.NEW_OP);
}
exports.createElementStartOp = createElementStartOp;
function createTemplateOp(xref, tag, namespace, sourceSpan) {
    return __assign(__assign({ kind: enums_1.OpKind.Template, xref: xref, attributes: null, tag: tag, decls: null, vars: null, localRefs: [], nonBindable: false, namespace: namespace, sourceSpan: sourceSpan }, traits_1.TRAIT_CONSUMES_SLOT), shared_1.NEW_OP);
}
exports.createTemplateOp = createTemplateOp;
function createElementEndOp(xref, sourceSpan) {
    return __assign({ kind: enums_1.OpKind.ElementEnd, xref: xref, sourceSpan: sourceSpan }, shared_1.NEW_OP);
}
exports.createElementEndOp = createElementEndOp;
function createDisableBindingsOp(xref) {
    return __assign({ kind: enums_1.OpKind.DisableBindings, xref: xref }, shared_1.NEW_OP);
}
exports.createDisableBindingsOp = createDisableBindingsOp;
function createEnableBindingsOp(xref) {
    return __assign({ kind: enums_1.OpKind.EnableBindings, xref: xref }, shared_1.NEW_OP);
}
exports.createEnableBindingsOp = createEnableBindingsOp;
function createTextOp(xref, initialValue, sourceSpan) {
    return __assign(__assign({ kind: enums_1.OpKind.Text, xref: xref, initialValue: initialValue, sourceSpan: sourceSpan }, traits_1.TRAIT_CONSUMES_SLOT), shared_1.NEW_OP);
}
exports.createTextOp = createTextOp;
function createListenerOp(target, name, tag) {
    return __assign(__assign({ kind: enums_1.OpKind.Listener, target: target, tag: tag, name: name, handlerOps: new operations_1.OpList(), handlerFnName: null, consumesDollarEvent: false, isAnimationListener: false, animationPhase: null }, shared_1.NEW_OP), traits_1.TRAIT_USES_SLOT_INDEX);
}
exports.createListenerOp = createListenerOp;
function createListenerOpForAnimation(target, name, animationPhase, tag) {
    return __assign(__assign({ kind: enums_1.OpKind.Listener, target: target, tag: tag, name: name, handlerOps: new operations_1.OpList(), handlerFnName: null, consumesDollarEvent: false, isAnimationListener: true, animationPhase: animationPhase }, shared_1.NEW_OP), traits_1.TRAIT_USES_SLOT_INDEX);
}
exports.createListenerOpForAnimation = createListenerOpForAnimation;
function createPipeOp(xref, name) {
    return __assign(__assign({ kind: enums_1.OpKind.Pipe, xref: xref, name: name }, shared_1.NEW_OP), traits_1.TRAIT_CONSUMES_SLOT);
}
exports.createPipeOp = createPipeOp;
var Namespace;
(function (Namespace) {
    Namespace[Namespace["HTML"] = 0] = "HTML";
    Namespace[Namespace["SVG"] = 1] = "SVG";
    Namespace[Namespace["Math"] = 2] = "Math";
})(Namespace = exports.Namespace || (exports.Namespace = {}));
function createNamespaceOp(namespace) {
    return __assign({ kind: enums_1.OpKind.Namespace, active: namespace }, shared_1.NEW_OP);
}
exports.createNamespaceOp = createNamespaceOp;
function createExtractedAttributeOp(target, bindingKind, name, expression) {
    return __assign({ kind: enums_1.OpKind.ExtractedAttribute, target: target, bindingKind: bindingKind, name: name, expression: expression }, shared_1.NEW_OP);
}
exports.createExtractedAttributeOp = createExtractedAttributeOp;
