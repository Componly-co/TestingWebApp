"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeNsAndName = exports.getNsPrefix = exports.isNgTemplate = exports.isNgContent = exports.isNgContainer = exports.splitNsName = exports.TagContentType = void 0;
var TagContentType;
(function (TagContentType) {
    TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
    TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
    TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
})(TagContentType = exports.TagContentType || (exports.TagContentType = {}));
function splitNsName(elementName) {
    if (elementName[0] != ':') {
        return [null, elementName];
    }
    var colonIndex = elementName.indexOf(':', 1);
    if (colonIndex === -1) {
        throw new Error("Unsupported format \"".concat(elementName, "\" expecting \":namespace:name\""));
    }
    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
}
exports.splitNsName = splitNsName;
function isNgContainer(tagName) {
    return splitNsName(tagName)[1] === 'ng-container';
}
exports.isNgContainer = isNgContainer;
function isNgContent(tagName) {
    return splitNsName(tagName)[1] === 'ng-content';
}
exports.isNgContent = isNgContent;
function isNgTemplate(tagName) {
    return splitNsName(tagName)[1] === 'ng-template';
}
exports.isNgTemplate = isNgTemplate;
function getNsPrefix(fullName) {
    return fullName === null ? null : splitNsName(fullName)[0];
}
exports.getNsPrefix = getNsPrefix;
function mergeNsAndName(prefix, localName) {
    return prefix ? ":".concat(prefix, ":").concat(localName) : localName;
}
exports.mergeNsAndName = mergeNsAndName;
