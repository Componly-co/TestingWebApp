"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phasePipeCreation = void 0;
var ir = __importStar(require("../../ir"));
function phasePipeCreation(cpl) {
    var e_1, _a;
    try {
        for (var _b = __values(cpl.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var view = _c.value;
            processPipeBindingsInView(view);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
exports.phasePipeCreation = phasePipeCreation;
function processPipeBindingsInView(view) {
    var e_2, _a;
    var _loop_1 = function (updateOp) {
        ir.visitExpressionsInOp(updateOp, function (expr, flags) {
            if (!ir.isIrExpression(expr)) {
                return;
            }
            if (expr.kind !== ir.ExpressionKind.PipeBinding) {
                return;
            }
            if (flags & ir.VisitorContextFlag.InChildOperation) {
                throw new Error("AssertionError: pipe bindings should not appear in child expressions");
            }
            if (!ir.hasDependsOnSlotContextTrait(updateOp)) {
                throw new Error("AssertionError: pipe binding associated with non-slot operation ".concat(ir.OpKind[updateOp.kind]));
            }
            addPipeToCreationBlock(view, updateOp.target, expr);
        });
    };
    try {
        for (var _b = __values(view.update), _c = _b.next(); !_c.done; _c = _b.next()) {
            var updateOp = _c.value;
            _loop_1(updateOp);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
function addPipeToCreationBlock(view, afterTargetXref, binding) {
    for (var op = view.create.head.next; op.kind !== ir.OpKind.ListEnd; op = op.next) {
        if (!ir.hasConsumesSlotTrait(op)) {
            continue;
        }
        if (op.xref !== afterTargetXref) {
            continue;
        }
        while (op.next.kind === ir.OpKind.Pipe) {
            op = op.next;
        }
        var pipe = ir.createPipeOp(binding.target, binding.name);
        ir.OpList.insertBefore(pipe, op.next);
        return;
    }
    throw new Error("AssertionError: unable to find insertion point for pipe ".concat(binding.name));
}
