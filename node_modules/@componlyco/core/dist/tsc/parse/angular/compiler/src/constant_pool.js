"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericKeyFn = exports.ConstantPool = void 0;
var o = __importStar(require("./output/output_ast"));
var CONSTANT_PREFIX = '_c';
var UNKNOWN_VALUE_KEY = o.variable('<unknown>');
var KEY_CONTEXT = {};
var POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;
var FixupExpression = (function (_super) {
    __extends(FixupExpression, _super);
    function FixupExpression(resolved) {
        var _this = _super.call(this, resolved.type) || this;
        _this.resolved = resolved;
        _this.shared = false;
        _this.original = resolved;
        return _this;
    }
    FixupExpression.prototype.visitExpression = function (visitor, context) {
        if (context === KEY_CONTEXT) {
            return this.original.visitExpression(visitor, context);
        }
        else {
            return this.resolved.visitExpression(visitor, context);
        }
    };
    FixupExpression.prototype.isEquivalent = function (e) {
        return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);
    };
    FixupExpression.prototype.isConstant = function () {
        return true;
    };
    FixupExpression.prototype.clone = function () {
        throw new Error("Not supported.");
    };
    FixupExpression.prototype.fixup = function (expression) {
        this.resolved = expression;
        this.shared = true;
    };
    return FixupExpression;
}(o.Expression));
var ConstantPool = (function () {
    function ConstantPool(isClosureCompilerEnabled) {
        if (isClosureCompilerEnabled === void 0) { isClosureCompilerEnabled = false; }
        this.isClosureCompilerEnabled = isClosureCompilerEnabled;
        this.statements = [];
        this.literals = new Map();
        this.literalFactories = new Map();
        this.sharedConstants = new Map();
        this.nextNameIndex = 0;
    }
    ConstantPool.prototype.getConstLiteral = function (literal, forceShared) {
        if ((literal instanceof o.LiteralExpr && !isLongStringLiteral(literal)) ||
            literal instanceof FixupExpression) {
            return literal;
        }
        var key = GenericKeyFn.INSTANCE.keyOf(literal);
        var fixup = this.literals.get(key);
        var newValue = false;
        if (!fixup) {
            fixup = new FixupExpression(literal);
            this.literals.set(key, fixup);
            newValue = true;
        }
        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {
            var name_1 = this.freshName();
            var definition = void 0;
            var usage = void 0;
            if (this.isClosureCompilerEnabled && isLongStringLiteral(literal)) {
                definition = o.variable(name_1).set(new o.FunctionExpr([], [
                    new o.ReturnStatement(literal),
                ]));
                usage = o.variable(name_1).callFn([]);
            }
            else {
                definition = o.variable(name_1).set(literal);
                usage = o.variable(name_1);
            }
            this.statements.push(definition.toDeclStmt(o.INFERRED_TYPE, o.StmtModifier.Final));
            fixup.fixup(usage);
        }
        return fixup;
    };
    ConstantPool.prototype.getSharedConstant = function (def, expr) {
        var key = def.keyOf(expr);
        if (!this.sharedConstants.has(key)) {
            var id = this.freshName();
            this.sharedConstants.set(key, o.variable(id));
            this.statements.push(def.toSharedConstantDeclaration(id, expr));
        }
        return this.sharedConstants.get(key);
    };
    ConstantPool.prototype.getLiteralFactory = function (literal) {
        if (literal instanceof o.LiteralArrayExpr) {
            var argumentsForKey = literal.entries.map(function (e) { return e.isConstant() ? e : UNKNOWN_VALUE_KEY; });
            var key = GenericKeyFn.INSTANCE.keyOf(o.literalArr(argumentsForKey));
            return this._getLiteralFactory(key, literal.entries, function (entries) { return o.literalArr(entries); });
        }
        else {
            var expressionForKey = o.literalMap(literal.entries.map(function (e) { return ({
                key: e.key,
                value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,
                quoted: e.quoted
            }); }));
            var key = GenericKeyFn.INSTANCE.keyOf(expressionForKey);
            return this._getLiteralFactory(key, literal.entries.map(function (e) { return e.value; }), function (entries) { return o.literalMap(entries.map(function (value, index) { return ({
                key: literal.entries[index].key,
                value: value,
                quoted: literal.entries[index].quoted
            }); })); });
        }
    };
    ConstantPool.prototype._getLiteralFactory = function (key, values, resultMap) {
        var _this = this;
        var literalFactory = this.literalFactories.get(key);
        var literalFactoryArguments = values.filter((function (e) { return !e.isConstant(); }));
        if (!literalFactory) {
            var resultExpressions = values.map(function (e, index) { return e.isConstant() ? _this.getConstLiteral(e, true) : o.variable("a".concat(index)); });
            var parameters = resultExpressions.filter(isVariable).map(function (e) { return new o.FnParam(e.name, o.DYNAMIC_TYPE); });
            var pureFunctionDeclaration = o.fn(parameters, [new o.ReturnStatement(resultMap(resultExpressions))], o.INFERRED_TYPE);
            var name_2 = this.freshName();
            this.statements.push(o.variable(name_2)
                .set(pureFunctionDeclaration)
                .toDeclStmt(o.INFERRED_TYPE, o.StmtModifier.Final));
            literalFactory = o.variable(name_2);
            this.literalFactories.set(key, literalFactory);
        }
        return { literalFactory: literalFactory, literalFactoryArguments: literalFactoryArguments };
    };
    ConstantPool.prototype.uniqueName = function (prefix) {
        return "".concat(prefix).concat(this.nextNameIndex++);
    };
    ConstantPool.prototype.freshName = function () {
        return this.uniqueName(CONSTANT_PREFIX);
    };
    return ConstantPool;
}());
exports.ConstantPool = ConstantPool;
var GenericKeyFn = exports.GenericKeyFn = (function () {
    function GenericKeyFn() {
    }
    GenericKeyFn.prototype.keyOf = function (expr) {
        var e_1, _a, e_2, _b;
        if (expr instanceof o.LiteralExpr && typeof expr.value === 'string') {
            return "\"".concat(expr.value, "\"");
        }
        else if (expr instanceof o.LiteralExpr) {
            return String(expr.value);
        }
        else if (expr instanceof o.LiteralArrayExpr) {
            var entries = [];
            try {
                for (var _c = __values(expr.entries), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var entry = _d.value;
                    entries.push(this.keyOf(entry));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return "[".concat(entries.join(','), "]");
        }
        else if (expr instanceof o.LiteralMapExpr) {
            var entries = [];
            try {
                for (var _e = __values(expr.entries), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var entry = _f.value;
                    var key = entry.key;
                    if (entry.quoted) {
                        key = "\"".concat(key, "\"");
                    }
                    entries.push(key + ':' + this.keyOf(entry.value));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return "{".concat(entries.join(','), "}");
        }
        else if (expr instanceof o.ExternalExpr) {
            return "import(\"".concat(expr.value.moduleName, "\", ").concat(expr.value.name, ")");
        }
        else if (expr instanceof o.ReadVarExpr) {
            return "read(".concat(expr.name, ")");
        }
        else if (expr instanceof o.TypeofExpr) {
            return "typeof(".concat(this.keyOf(expr.expr), ")");
        }
        else {
            throw new Error("".concat(this.constructor.name, " does not handle expressions of type ").concat(expr.constructor.name));
        }
    };
    GenericKeyFn.INSTANCE = new GenericKeyFn();
    return GenericKeyFn;
}());
function isVariable(e) {
    return e instanceof o.ReadVarExpr;
}
function isLongStringLiteral(expr) {
    return expr instanceof o.LiteralExpr && typeof expr.value === 'string' &&
        expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;
}
