"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phaseSlotAllocation = void 0;
var ir = __importStar(require("../../ir"));
function phaseSlotAllocation(cpl) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
    var slotMap = new Map();
    try {
        for (var _e = __values(cpl.views), _f = _e.next(); !_f.done; _f = _e.next()) {
            var _g = __read(_f.value, 2), _1 = _g[0], view = _g[1];
            var slotCount = 0;
            try {
                for (var _h = (e_2 = void 0, __values(view.create)), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var op = _j.value;
                    if (!ir.hasConsumesSlotTrait(op)) {
                        continue;
                    }
                    op.slot = slotCount;
                    slotMap.set(op.xref, op.slot);
                    slotCount += op.numSlotsUsed;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                }
                finally { if (e_2) throw e_2.error; }
            }
            view.decls = slotCount;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var _k = __values(cpl.views), _l = _k.next(); !_l.done; _l = _k.next()) {
            var _m = __read(_l.value, 2), _2 = _m[0], view = _m[1];
            try {
                for (var _o = (e_4 = void 0, __values(view.ops())), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var op = _p.value;
                    if (op.kind === ir.OpKind.Template) {
                        var childView = cpl.views.get(op.xref);
                        op.decls = childView.decls;
                    }
                    if (ir.hasUsesSlotIndexTrait(op) && op.slot === null) {
                        if (!slotMap.has(op.target)) {
                            throw new Error("AssertionError: no slot allocated for ".concat(ir.OpKind[op.kind], " target ").concat(op.target));
                        }
                        op.slot = slotMap.get(op.target);
                    }
                    ir.visitExpressionsInOp(op, function (expr) {
                        if (!ir.isIrExpression(expr)) {
                            return;
                        }
                        if (!ir.hasUsesSlotIndexTrait(expr) || expr.slot !== null) {
                            return;
                        }
                        if (!slotMap.has(expr.target)) {
                            throw new Error("AssertionError: no slot allocated for ".concat(expr.constructor.name, " target ").concat(expr.target));
                        }
                        expr.slot = slotMap.get(expr.target);
                    });
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
        }
        finally { if (e_3) throw e_3.error; }
    }
}
exports.phaseSlotAllocation = phaseSlotAllocation;
