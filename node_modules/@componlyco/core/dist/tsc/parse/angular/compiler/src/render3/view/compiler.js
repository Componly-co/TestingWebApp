"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHostDirectivesMappingArray = exports.verifyHostBindings = exports.parseHostBindings = exports.createDirectiveType = exports.createComponentType = exports.compileComponentFromMetadata = exports.compileDirectiveFromMetadata = void 0;
var expression_converter_1 = require("../../compiler_util/expression_converter");
var core = __importStar(require("../../core"));
var o = __importStar(require("../../output/output_ast"));
var parse_util_1 = require("../../parse_util");
var dom_security_schema_1 = require("../../schema/dom_security_schema");
var selector_1 = require("../../selector");
var shadow_css_1 = require("../../shadow_css");
var emit_1 = require("../../template/pipeline/src/emit");
var ingest_1 = require("../../template/pipeline/src/ingest");
var switch_1 = require("../../template/pipeline/switch");
var util_1 = require("../../util");
var r3_ast_1 = require("../r3_ast");
var r3_identifiers_1 = require("../r3_identifiers");
var util_2 = require("../util");
var styling_builder_1 = require("./styling_builder");
var template_1 = require("./template");
var util_3 = require("./util");
var ATTR_REGEX = /attr\.([^\]]+)/;
var COMPONENT_VARIABLE = '%COMP%';
var HOST_ATTR = "_nghost-".concat(COMPONENT_VARIABLE);
var CONTENT_ATTR = "_ngcontent-".concat(COMPONENT_VARIABLE);
function baseDirectiveFields(meta, constantPool, bindingParser) {
    var definitionMap = new util_3.DefinitionMap();
    var selectors = core.parseSelectorToR3Selector(meta.selector);
    definitionMap.set('type', meta.type.value);
    if (selectors.length > 0) {
        definitionMap.set('selectors', (0, util_3.asLiteral)(selectors));
    }
    if (meta.queries.length > 0) {
        definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));
    }
    if (meta.viewQueries.length) {
        definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));
    }
    definitionMap.set('hostBindings', createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || '', meta.name, definitionMap));
    definitionMap.set('inputs', (0, util_3.conditionallyCreateDirectiveBindingLiteral)(meta.inputs, true));
    definitionMap.set('outputs', (0, util_3.conditionallyCreateDirectiveBindingLiteral)(meta.outputs));
    if (meta.exportAs !== null) {
        definitionMap.set('exportAs', o.literalArr(meta.exportAs.map(function (e) { return o.literal(e); })));
    }
    if (meta.isStandalone) {
        definitionMap.set('standalone', o.literal(true));
    }
    if (meta.isSignal) {
        definitionMap.set('signals', o.literal(true));
    }
    return definitionMap;
}
function addFeatures(definitionMap, meta) {
    var e_1, _a;
    var _b;
    var features = [];
    var providers = meta.providers;
    var viewProviders = meta.viewProviders;
    var inputKeys = Object.keys(meta.inputs);
    if (providers || viewProviders) {
        var args = [providers || new o.LiteralArrayExpr([])];
        if (viewProviders) {
            args.push(viewProviders);
        }
        features.push(o.importExpr(r3_identifiers_1.Identifiers.ProvidersFeature).callFn(args));
    }
    try {
        for (var inputKeys_1 = __values(inputKeys), inputKeys_1_1 = inputKeys_1.next(); !inputKeys_1_1.done; inputKeys_1_1 = inputKeys_1.next()) {
            var key = inputKeys_1_1.value;
            if (meta.inputs[key].transformFunction !== null) {
                features.push(o.importExpr(r3_identifiers_1.Identifiers.InputTransformsFeatureFeature));
                break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (inputKeys_1_1 && !inputKeys_1_1.done && (_a = inputKeys_1.return)) _a.call(inputKeys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (meta.usesInheritance) {
        features.push(o.importExpr(r3_identifiers_1.Identifiers.InheritDefinitionFeature));
    }
    if (meta.fullInheritance) {
        features.push(o.importExpr(r3_identifiers_1.Identifiers.CopyDefinitionFeature));
    }
    if (meta.lifecycle.usesOnChanges) {
        features.push(o.importExpr(r3_identifiers_1.Identifiers.NgOnChangesFeature));
    }
    if (meta.hasOwnProperty('template') && meta.isStandalone) {
        features.push(o.importExpr(r3_identifiers_1.Identifiers.StandaloneFeature));
    }
    if ((_b = meta.hostDirectives) === null || _b === void 0 ? void 0 : _b.length) {
        features.push(o.importExpr(r3_identifiers_1.Identifiers.HostDirectivesFeature).callFn([createHostDirectivesFeatureArg(meta.hostDirectives)]));
    }
    if (features.length) {
        definitionMap.set('features', o.literalArr(features));
    }
}
function compileDirectiveFromMetadata(meta, constantPool, bindingParser) {
    var definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
    addFeatures(definitionMap, meta);
    var expression = o.importExpr(r3_identifiers_1.Identifiers.defineDirective).callFn([definitionMap.toLiteralMap()], undefined, true);
    var type = createDirectiveType(meta);
    return { expression: expression, type: type, statements: [] };
}
exports.compileDirectiveFromMetadata = compileDirectiveFromMetadata;
function compileComponentFromMetadata(meta, constantPool, bindingParser) {
    var definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
    addFeatures(definitionMap, meta);
    var selector = meta.selector && selector_1.CssSelector.parse(meta.selector);
    var firstSelector = selector && selector[0];
    if (firstSelector) {
        var selectorAttributes = firstSelector.getAttrs();
        if (selectorAttributes.length) {
            definitionMap.set('attrs', constantPool.getConstLiteral(o.literalArr(selectorAttributes.map(function (value) { return value != null ? o.literal(value) : o.literal(undefined); })), true));
        }
    }
    var templateTypeName = meta.name;
    var templateName = templateTypeName ? "".concat(templateTypeName, "_Template") : null;
    var changeDetection = meta.changeDetection;
    if (!switch_1.USE_TEMPLATE_PIPELINE) {
        var template = meta.template;
        var templateBuilder = new template_1.TemplateDefinitionBuilder(constantPool, template_1.BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, r3_identifiers_1.Identifiers.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds, meta.deferBlocks);
        var templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []);
        var ngContentSelectors = templateBuilder.getNgContentSelectors();
        if (ngContentSelectors) {
            definitionMap.set('ngContentSelectors', ngContentSelectors);
        }
        definitionMap.set('decls', o.literal(templateBuilder.getConstCount()));
        definitionMap.set('vars', o.literal(templateBuilder.getVarCount()));
        var _a = templateBuilder.getConsts(), constExpressions = _a.constExpressions, prepareStatements = _a.prepareStatements;
        if (constExpressions.length > 0) {
            var constsExpr = o.literalArr(constExpressions);
            if (prepareStatements.length > 0) {
                constsExpr = o.fn([], __spreadArray(__spreadArray([], __read(prepareStatements), false), [new o.ReturnStatement(constsExpr)], false));
            }
            definitionMap.set('consts', constsExpr);
        }
        definitionMap.set('template', templateFunctionExpression);
    }
    else {
        var tpl = (0, ingest_1.ingestComponent)(meta.name, meta.template.nodes, constantPool);
        (0, emit_1.transformTemplate)(tpl);
        var templateFn = (0, emit_1.emitTemplateFn)(tpl, constantPool);
        definitionMap.set('decls', o.literal(tpl.root.decls));
        definitionMap.set('vars', o.literal(tpl.root.vars));
        if (tpl.consts.length > 0) {
            definitionMap.set('consts', o.literalArr(tpl.consts));
        }
        definitionMap.set('template', templateFn);
    }
    if (meta.declarationListEmitMode !== 3 &&
        meta.declarations.length > 0) {
        definitionMap.set('dependencies', compileDeclarationList(o.literalArr(meta.declarations.map(function (decl) { return decl.type; })), meta.declarationListEmitMode));
    }
    else if (meta.declarationListEmitMode === 3) {
        var args = [meta.type.value];
        if (meta.rawImports) {
            args.push(meta.rawImports);
        }
        definitionMap.set('dependencies', o.importExpr(r3_identifiers_1.Identifiers.getComponentDepsFactory).callFn(args));
    }
    if (meta.encapsulation === null) {
        meta.encapsulation = core.ViewEncapsulation.Emulated;
    }
    if (meta.styles && meta.styles.length) {
        var styleValues = meta.encapsulation == core.ViewEncapsulation.Emulated ?
            compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) :
            meta.styles;
        var styleNodes = styleValues.reduce(function (result, style) {
            if (style.trim().length > 0) {
                result.push(constantPool.getConstLiteral(o.literal(style)));
            }
            return result;
        }, []);
        if (styleNodes.length > 0) {
            definitionMap.set('styles', o.literalArr(styleNodes));
        }
    }
    else if (meta.encapsulation === core.ViewEncapsulation.Emulated) {
        meta.encapsulation = core.ViewEncapsulation.None;
    }
    if (meta.encapsulation !== core.ViewEncapsulation.Emulated) {
        definitionMap.set('encapsulation', o.literal(meta.encapsulation));
    }
    if (meta.animations !== null) {
        definitionMap.set('data', o.literalMap([{ key: 'animation', value: meta.animations, quoted: false }]));
    }
    if (changeDetection != null && changeDetection !== core.ChangeDetectionStrategy.Default) {
        definitionMap.set('changeDetection', o.literal(changeDetection));
    }
    var expression = o.importExpr(r3_identifiers_1.Identifiers.defineComponent).callFn([definitionMap.toLiteralMap()], undefined, true);
    var type = createComponentType(meta);
    return { expression: expression, type: type, statements: [] };
}
exports.compileComponentFromMetadata = compileComponentFromMetadata;
function createComponentType(meta) {
    var typeParams = createBaseDirectiveTypeParams(meta);
    typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));
    typeParams.push(o.expressionType(o.literal(meta.isStandalone)));
    typeParams.push(createHostDirectivesType(meta));
    if (meta.isSignal) {
        typeParams.push(o.expressionType(o.literal(meta.isSignal)));
    }
    return o.expressionType(o.importExpr(r3_identifiers_1.Identifiers.ComponentDeclaration, typeParams));
}
exports.createComponentType = createComponentType;
function compileDeclarationList(list, mode) {
    switch (mode) {
        case 0:
            return list;
        case 1:
            return o.fn([], [new o.ReturnStatement(list)]);
        case 2:
            var resolvedList = list.prop('map').callFn([o.importExpr(r3_identifiers_1.Identifiers.resolveForwardRef)]);
            return o.fn([], [new o.ReturnStatement(resolvedList)]);
        case 3:
            throw new Error("Unsupported with an array of pre-resolved dependencies");
    }
}
function prepareQueryParams(query, constantPool) {
    var parameters = [(0, util_3.getQueryPredicate)(query, constantPool), o.literal(toQueryFlags(query))];
    if (query.read) {
        parameters.push(query.read);
    }
    return parameters;
}
function toQueryFlags(query) {
    return (query.descendants ? 1 : 0) |
        (query.static ? 2 : 0) |
        (query.emitDistinctChangesOnly ? 4 : 0);
}
function convertAttributesToExpressions(attributes) {
    var e_2, _a;
    var values = [];
    try {
        for (var _b = __values(Object.getOwnPropertyNames(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var value = attributes[key];
            values.push(o.literal(key), value);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return values;
}
function createContentQueriesFunction(queries, constantPool, name) {
    var e_3, _a;
    var createStatements = [];
    var updateStatements = [];
    var tempAllocator = (0, util_3.temporaryAllocator)(updateStatements, util_3.TEMPORARY_NAME);
    try {
        for (var queries_1 = __values(queries), queries_1_1 = queries_1.next(); !queries_1_1.done; queries_1_1 = queries_1.next()) {
            var query = queries_1_1.value;
            createStatements.push(o.importExpr(r3_identifiers_1.Identifiers.contentQuery)
                .callFn(__spreadArray([o.variable('dirIndex')], __read(prepareQueryParams(query, constantPool)), false))
                .toStmt());
            var temporary = tempAllocator();
            var getQueryList = o.importExpr(r3_identifiers_1.Identifiers.loadQuery).callFn([]);
            var refresh = o.importExpr(r3_identifiers_1.Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
            var updateDirective = o.variable(util_3.CONTEXT_NAME)
                .prop(query.propertyName)
                .set(query.first ? temporary.prop('first') : temporary);
            updateStatements.push(refresh.and(updateDirective).toStmt());
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (queries_1_1 && !queries_1_1.done && (_a = queries_1.return)) _a.call(queries_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    var contentQueriesFnName = name ? "".concat(name, "_ContentQueries") : null;
    return o.fn([
        new o.FnParam(util_3.RENDER_FLAGS, o.NUMBER_TYPE), new o.FnParam(util_3.CONTEXT_NAME, null),
        new o.FnParam('dirIndex', null)
    ], [
        (0, template_1.renderFlagCheckIfStmt)(1, createStatements),
        (0, template_1.renderFlagCheckIfStmt)(2, updateStatements)
    ], o.INFERRED_TYPE, null, contentQueriesFnName);
}
function stringAsType(str) {
    return o.expressionType(o.literal(str));
}
function stringMapAsLiteralExpression(map) {
    var mapValues = Object.keys(map).map(function (key) {
        var value = Array.isArray(map[key]) ? map[key][0] : map[key];
        return {
            key: key,
            value: o.literal(value),
            quoted: true,
        };
    });
    return o.literalMap(mapValues);
}
function stringArrayAsType(arr) {
    return arr.length > 0 ? o.expressionType(o.literalArr(arr.map(function (value) { return o.literal(value); }))) :
        o.NONE_TYPE;
}
function createBaseDirectiveTypeParams(meta) {
    var selectorForType = meta.selector !== null ? meta.selector.replace(/\n/g, '') : null;
    return [
        (0, util_2.typeWithParameters)(meta.type.type, meta.typeArgumentCount),
        selectorForType !== null ? stringAsType(selectorForType) : o.NONE_TYPE,
        meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : o.NONE_TYPE,
        o.expressionType(getInputsTypeExpression(meta)),
        o.expressionType(stringMapAsLiteralExpression(meta.outputs)),
        stringArrayAsType(meta.queries.map(function (q) { return q.propertyName; })),
    ];
}
function getInputsTypeExpression(meta) {
    return o.literalMap(Object.keys(meta.inputs).map(function (key) {
        var value = meta.inputs[key];
        return {
            key: key,
            value: o.literalMap([
                { key: 'alias', value: o.literal(value.bindingPropertyName), quoted: true },
                { key: 'required', value: o.literal(value.required), quoted: true }
            ]),
            quoted: true
        };
    }));
}
function createDirectiveType(meta) {
    var typeParams = createBaseDirectiveTypeParams(meta);
    typeParams.push(o.NONE_TYPE);
    typeParams.push(o.expressionType(o.literal(meta.isStandalone)));
    typeParams.push(createHostDirectivesType(meta));
    if (meta.isSignal) {
        typeParams.push(o.expressionType(o.literal(meta.isSignal)));
    }
    return o.expressionType(o.importExpr(r3_identifiers_1.Identifiers.DirectiveDeclaration, typeParams));
}
exports.createDirectiveType = createDirectiveType;
function createViewQueriesFunction(viewQueries, constantPool, name) {
    var createStatements = [];
    var updateStatements = [];
    var tempAllocator = (0, util_3.temporaryAllocator)(updateStatements, util_3.TEMPORARY_NAME);
    viewQueries.forEach(function (query) {
        var queryDefinition = o.importExpr(r3_identifiers_1.Identifiers.viewQuery).callFn(prepareQueryParams(query, constantPool));
        createStatements.push(queryDefinition.toStmt());
        var temporary = tempAllocator();
        var getQueryList = o.importExpr(r3_identifiers_1.Identifiers.loadQuery).callFn([]);
        var refresh = o.importExpr(r3_identifiers_1.Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
        var updateDirective = o.variable(util_3.CONTEXT_NAME)
            .prop(query.propertyName)
            .set(query.first ? temporary.prop('first') : temporary);
        updateStatements.push(refresh.and(updateDirective).toStmt());
    });
    var viewQueryFnName = name ? "".concat(name, "_Query") : null;
    return o.fn([new o.FnParam(util_3.RENDER_FLAGS, o.NUMBER_TYPE), new o.FnParam(util_3.CONTEXT_NAME, null)], [
        (0, template_1.renderFlagCheckIfStmt)(1, createStatements),
        (0, template_1.renderFlagCheckIfStmt)(2, updateStatements)
    ], o.INFERRED_TYPE, null, viewQueryFnName);
}
function createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {
    var e_4, _a, e_5, _b, e_6, _c, e_7, _d;
    var bindings = bindingParser.createBoundHostProperties(hostBindingsMetadata.properties, typeSourceSpan);
    var eventBindings = bindingParser.createDirectiveHostEventAsts(hostBindingsMetadata.listeners, typeSourceSpan);
    if (switch_1.USE_TEMPLATE_PIPELINE) {
        var hostJob = (0, ingest_1.ingestHostBinding)({
            componentName: name,
            properties: bindings,
            events: eventBindings,
        }, bindingParser, constantPool);
        (0, emit_1.transformHostBinding)(hostJob);
        var varCount = hostJob.root.vars;
        if (varCount !== null && varCount > 0) {
            definitionMap.set('hostVars', o.literal(varCount));
        }
        return (0, emit_1.emitHostBindingFunction)(hostJob);
    }
    var bindingContext = o.variable(util_3.CONTEXT_NAME);
    var styleBuilder = new styling_builder_1.StylingBuilder(bindingContext);
    var _e = hostBindingsMetadata.specialAttributes, styleAttr = _e.styleAttr, classAttr = _e.classAttr;
    if (styleAttr !== undefined) {
        styleBuilder.registerStyleAttr(styleAttr);
    }
    if (classAttr !== undefined) {
        styleBuilder.registerClassAttr(classAttr);
    }
    var createInstructions = [];
    var updateInstructions = [];
    var updateVariables = [];
    var hostBindingSourceSpan = typeSourceSpan;
    if (eventBindings && eventBindings.length) {
        createInstructions.push.apply(createInstructions, __spreadArray([], __read(createHostListeners(eventBindings, name)), false));
    }
    var allOtherBindings = [];
    var totalHostVarsCount = 0;
    bindings && bindings.forEach(function (binding) {
        var stylingInputWasSet = styleBuilder.registerInputBasedOnName(binding.name, binding.expression, hostBindingSourceSpan);
        if (stylingInputWasSet) {
            totalHostVarsCount += styling_builder_1.MIN_STYLING_BINDING_SLOTS_REQUIRED;
        }
        else {
            allOtherBindings.push(binding);
            totalHostVarsCount++;
        }
    });
    var valueConverter;
    var getValueConverter = function () {
        if (!valueConverter) {
            var hostVarsCountFn = function (numSlots) {
                var originalVarsCount = totalHostVarsCount;
                totalHostVarsCount += numSlots;
                return originalVarsCount;
            };
            valueConverter = new template_1.ValueConverter(constantPool, function () { return (0, util_1.error)('Unexpected node'); }, hostVarsCountFn, function () { return (0, util_1.error)('Unexpected pipe'); });
        }
        return valueConverter;
    };
    var propertyBindings = [];
    var attributeBindings = [];
    var syntheticHostBindings = [];
    try {
        for (var allOtherBindings_1 = __values(allOtherBindings), allOtherBindings_1_1 = allOtherBindings_1.next(); !allOtherBindings_1_1.done; allOtherBindings_1_1 = allOtherBindings_1.next()) {
            var binding = allOtherBindings_1_1.value;
            var value = binding.expression.visit(getValueConverter());
            var bindingExpr = bindingFn(bindingContext, value);
            var _f = getBindingNameAndInstruction(binding), bindingName = _f.bindingName, instruction = _f.instruction, isAttribute = _f.isAttribute;
            var securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute)
                .filter(function (context) { return context !== core.SecurityContext.NONE; });
            var sanitizerFn = null;
            if (securityContexts.length) {
                if (securityContexts.length === 2 &&
                    securityContexts.indexOf(core.SecurityContext.URL) > -1 &&
                    securityContexts.indexOf(core.SecurityContext.RESOURCE_URL) > -1) {
                    sanitizerFn = o.importExpr(r3_identifiers_1.Identifiers.sanitizeUrlOrResourceUrl);
                }
                else {
                    sanitizerFn = (0, template_1.resolveSanitizationFn)(securityContexts[0], isAttribute);
                }
            }
            var instructionParams = [o.literal(bindingName), bindingExpr.currValExpr];
            if (sanitizerFn) {
                instructionParams.push(sanitizerFn);
            }
            else {
                if ((0, dom_security_schema_1.isIframeSecuritySensitiveAttr)(bindingName)) {
                    instructionParams.push(o.importExpr(r3_identifiers_1.Identifiers.validateIframeAttribute));
                }
            }
            updateVariables.push.apply(updateVariables, __spreadArray([], __read(bindingExpr.stmts), false));
            if (instruction === r3_identifiers_1.Identifiers.hostProperty) {
                propertyBindings.push(instructionParams);
            }
            else if (instruction === r3_identifiers_1.Identifiers.attribute) {
                attributeBindings.push(instructionParams);
            }
            else if (instruction === r3_identifiers_1.Identifiers.syntheticHostProperty) {
                syntheticHostBindings.push(instructionParams);
            }
            else {
                updateInstructions.push({ reference: instruction, paramsOrFn: instructionParams, span: null });
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (allOtherBindings_1_1 && !allOtherBindings_1_1.done && (_a = allOtherBindings_1.return)) _a.call(allOtherBindings_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    try {
        for (var propertyBindings_1 = __values(propertyBindings), propertyBindings_1_1 = propertyBindings_1.next(); !propertyBindings_1_1.done; propertyBindings_1_1 = propertyBindings_1.next()) {
            var bindingParams = propertyBindings_1_1.value;
            updateInstructions.push({ reference: r3_identifiers_1.Identifiers.hostProperty, paramsOrFn: bindingParams, span: null });
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (propertyBindings_1_1 && !propertyBindings_1_1.done && (_b = propertyBindings_1.return)) _b.call(propertyBindings_1);
        }
        finally { if (e_5) throw e_5.error; }
    }
    try {
        for (var attributeBindings_1 = __values(attributeBindings), attributeBindings_1_1 = attributeBindings_1.next(); !attributeBindings_1_1.done; attributeBindings_1_1 = attributeBindings_1.next()) {
            var bindingParams = attributeBindings_1_1.value;
            updateInstructions.push({ reference: r3_identifiers_1.Identifiers.attribute, paramsOrFn: bindingParams, span: null });
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (attributeBindings_1_1 && !attributeBindings_1_1.done && (_c = attributeBindings_1.return)) _c.call(attributeBindings_1);
        }
        finally { if (e_6) throw e_6.error; }
    }
    try {
        for (var syntheticHostBindings_1 = __values(syntheticHostBindings), syntheticHostBindings_1_1 = syntheticHostBindings_1.next(); !syntheticHostBindings_1_1.done; syntheticHostBindings_1_1 = syntheticHostBindings_1.next()) {
            var bindingParams = syntheticHostBindings_1_1.value;
            updateInstructions.push({ reference: r3_identifiers_1.Identifiers.syntheticHostProperty, paramsOrFn: bindingParams, span: null });
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (syntheticHostBindings_1_1 && !syntheticHostBindings_1_1.done && (_d = syntheticHostBindings_1.return)) _d.call(syntheticHostBindings_1);
        }
        finally { if (e_7) throw e_7.error; }
    }
    var hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);
    styleBuilder.assignHostAttrs(hostAttrs, definitionMap);
    if (styleBuilder.hasBindings) {
        styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(function (instruction) {
            var e_8, _a;
            try {
                for (var _b = __values(instruction.calls), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var call = _c.value;
                    totalHostVarsCount +=
                        Math.max(call.allocateBindingSlots - styling_builder_1.MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);
                    updateInstructions.push({
                        reference: instruction.reference,
                        paramsOrFn: convertStylingCall(call, bindingContext, bindingFn),
                        span: null
                    });
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    if (totalHostVarsCount) {
        definitionMap.set('hostVars', o.literal(totalHostVarsCount));
    }
    if (createInstructions.length > 0 || updateInstructions.length > 0) {
        var hostBindingsFnName = name ? "".concat(name, "_HostBindings") : null;
        var statements = [];
        if (createInstructions.length > 0) {
            statements.push((0, template_1.renderFlagCheckIfStmt)(1, (0, util_3.getInstructionStatements)(createInstructions)));
        }
        if (updateInstructions.length > 0) {
            statements.push((0, template_1.renderFlagCheckIfStmt)(2, updateVariables.concat((0, util_3.getInstructionStatements)(updateInstructions))));
        }
        return o.fn([new o.FnParam(util_3.RENDER_FLAGS, o.NUMBER_TYPE), new o.FnParam(util_3.CONTEXT_NAME, null)], statements, o.INFERRED_TYPE, null, hostBindingsFnName);
    }
    return null;
}
function bindingFn(implicit, value) {
    return (0, expression_converter_1.convertPropertyBinding)(null, implicit, value, 'b');
}
function convertStylingCall(call, bindingContext, bindingFn) {
    return call.params(function (value) { return bindingFn(bindingContext, value).currValExpr; });
}
function getBindingNameAndInstruction(binding) {
    var bindingName = binding.name;
    var instruction;
    var attrMatches = bindingName.match(ATTR_REGEX);
    if (attrMatches) {
        bindingName = attrMatches[1];
        instruction = r3_identifiers_1.Identifiers.attribute;
    }
    else {
        if (binding.isAnimation) {
            bindingName = (0, util_2.prepareSyntheticPropertyName)(bindingName);
            instruction = r3_identifiers_1.Identifiers.syntheticHostProperty;
        }
        else {
            instruction = r3_identifiers_1.Identifiers.hostProperty;
        }
    }
    return { bindingName: bindingName, instruction: instruction, isAttribute: !!attrMatches };
}
function createHostListeners(eventBindings, name) {
    var e_9, _a, e_10, _b, e_11, _c;
    var listenerParams = [];
    var syntheticListenerParams = [];
    var instructions = [];
    try {
        for (var eventBindings_1 = __values(eventBindings), eventBindings_1_1 = eventBindings_1.next(); !eventBindings_1_1.done; eventBindings_1_1 = eventBindings_1.next()) {
            var binding = eventBindings_1_1.value;
            var bindingName = binding.name && (0, parse_util_1.sanitizeIdentifier)(binding.name);
            var bindingFnName = binding.type === 1 ?
                (0, util_2.prepareSyntheticListenerFunctionName)(bindingName, binding.targetOrPhase) :
                bindingName;
            var handlerName = name && bindingName ? "".concat(name, "_").concat(bindingFnName, "_HostBindingHandler") : null;
            var params = (0, template_1.prepareEventListenerParameters)(r3_ast_1.BoundEvent.fromParsedEvent(binding), handlerName);
            if (binding.type == 1) {
                syntheticListenerParams.push(params);
            }
            else {
                listenerParams.push(params);
            }
        }
    }
    catch (e_9_1) { e_9 = { error: e_9_1 }; }
    finally {
        try {
            if (eventBindings_1_1 && !eventBindings_1_1.done && (_a = eventBindings_1.return)) _a.call(eventBindings_1);
        }
        finally { if (e_9) throw e_9.error; }
    }
    try {
        for (var syntheticListenerParams_1 = __values(syntheticListenerParams), syntheticListenerParams_1_1 = syntheticListenerParams_1.next(); !syntheticListenerParams_1_1.done; syntheticListenerParams_1_1 = syntheticListenerParams_1.next()) {
            var params = syntheticListenerParams_1_1.value;
            instructions.push({ reference: r3_identifiers_1.Identifiers.syntheticHostListener, paramsOrFn: params, span: null });
        }
    }
    catch (e_10_1) { e_10 = { error: e_10_1 }; }
    finally {
        try {
            if (syntheticListenerParams_1_1 && !syntheticListenerParams_1_1.done && (_b = syntheticListenerParams_1.return)) _b.call(syntheticListenerParams_1);
        }
        finally { if (e_10) throw e_10.error; }
    }
    try {
        for (var listenerParams_1 = __values(listenerParams), listenerParams_1_1 = listenerParams_1.next(); !listenerParams_1_1.done; listenerParams_1_1 = listenerParams_1.next()) {
            var params = listenerParams_1_1.value;
            instructions.push({ reference: r3_identifiers_1.Identifiers.listener, paramsOrFn: params, span: null });
        }
    }
    catch (e_11_1) { e_11 = { error: e_11_1 }; }
    finally {
        try {
            if (listenerParams_1_1 && !listenerParams_1_1.done && (_c = listenerParams_1.return)) _c.call(listenerParams_1);
        }
        finally { if (e_11) throw e_11.error; }
    }
    return instructions;
}
var HOST_REG_EXP = /^(?:\[([^\]]+)\])|(?:\(([^\)]+)\))$/;
function parseHostBindings(host) {
    var e_12, _a;
    var attributes = {};
    var listeners = {};
    var properties = {};
    var specialAttributes = {};
    try {
        for (var _b = __values(Object.keys(host)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var value = host[key];
            var matches = key.match(HOST_REG_EXP);
            if (matches === null) {
                switch (key) {
                    case 'class':
                        if (typeof value !== 'string') {
                            throw new Error("Class binding must be string");
                        }
                        specialAttributes.classAttr = value;
                        break;
                    case 'style':
                        if (typeof value !== 'string') {
                            throw new Error("Style binding must be string");
                        }
                        specialAttributes.styleAttr = value;
                        break;
                    default:
                        if (typeof value === 'string') {
                            attributes[key] = o.literal(value);
                        }
                        else {
                            attributes[key] = value;
                        }
                }
            }
            else if (matches[1] != null) {
                if (typeof value !== 'string') {
                    throw new Error("Property binding must be string");
                }
                properties[matches[1]] = value;
            }
            else if (matches[2] != null) {
                if (typeof value !== 'string') {
                    throw new Error("Event binding must be string");
                }
                listeners[matches[2]] = value;
            }
        }
    }
    catch (e_12_1) { e_12 = { error: e_12_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_12) throw e_12.error; }
    }
    return { attributes: attributes, listeners: listeners, properties: properties, specialAttributes: specialAttributes };
}
exports.parseHostBindings = parseHostBindings;
function verifyHostBindings(bindings, sourceSpan) {
    var bindingParser = (0, template_1.makeBindingParser)();
    bindingParser.createDirectiveHostEventAsts(bindings.listeners, sourceSpan);
    bindingParser.createBoundHostProperties(bindings.properties, sourceSpan);
    return bindingParser.errors;
}
exports.verifyHostBindings = verifyHostBindings;
function compileStyles(styles, selector, hostSelector) {
    var shadowCss = new shadow_css_1.ShadowCss();
    return styles.map(function (style) {
        return shadowCss.shimCssText(style, selector, hostSelector);
    });
}
function createHostDirectivesType(meta) {
    var _a;
    if (!((_a = meta.hostDirectives) === null || _a === void 0 ? void 0 : _a.length)) {
        return o.NONE_TYPE;
    }
    return o.expressionType(o.literalArr(meta.hostDirectives.map(function (hostMeta) { return o.literalMap([
        { key: 'directive', value: o.typeofExpr(hostMeta.directive.type), quoted: false },
        { key: 'inputs', value: stringMapAsLiteralExpression(hostMeta.inputs || {}), quoted: false },
        { key: 'outputs', value: stringMapAsLiteralExpression(hostMeta.outputs || {}), quoted: false },
    ]); })));
}
function createHostDirectivesFeatureArg(hostDirectives) {
    var e_13, _a;
    var expressions = [];
    var hasForwardRef = false;
    try {
        for (var hostDirectives_1 = __values(hostDirectives), hostDirectives_1_1 = hostDirectives_1.next(); !hostDirectives_1_1.done; hostDirectives_1_1 = hostDirectives_1.next()) {
            var current = hostDirectives_1_1.value;
            if (!current.inputs && !current.outputs) {
                expressions.push(current.directive.type);
            }
            else {
                var keys = [{ key: 'directive', value: current.directive.type, quoted: false }];
                if (current.inputs) {
                    var inputsLiteral = createHostDirectivesMappingArray(current.inputs);
                    if (inputsLiteral) {
                        keys.push({ key: 'inputs', value: inputsLiteral, quoted: false });
                    }
                }
                if (current.outputs) {
                    var outputsLiteral = createHostDirectivesMappingArray(current.outputs);
                    if (outputsLiteral) {
                        keys.push({ key: 'outputs', value: outputsLiteral, quoted: false });
                    }
                }
                expressions.push(o.literalMap(keys));
            }
            if (current.isForwardReference) {
                hasForwardRef = true;
            }
        }
    }
    catch (e_13_1) { e_13 = { error: e_13_1 }; }
    finally {
        try {
            if (hostDirectives_1_1 && !hostDirectives_1_1.done && (_a = hostDirectives_1.return)) _a.call(hostDirectives_1);
        }
        finally { if (e_13) throw e_13.error; }
    }
    return hasForwardRef ?
        new o.FunctionExpr([], [new o.ReturnStatement(o.literalArr(expressions))]) :
        o.literalArr(expressions);
}
function createHostDirectivesMappingArray(mapping) {
    var elements = [];
    for (var publicName in mapping) {
        if (mapping.hasOwnProperty(publicName)) {
            elements.push(o.literal(publicName), o.literal(mapping[publicName]));
        }
    }
    return elements.length > 0 ? o.literalArr(elements) : null;
}
exports.createHostDirectivesMappingArray = createHostDirectivesMappingArray;
