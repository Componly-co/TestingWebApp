"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPipeType = exports.compilePipeFromMetadata = void 0;
var o = __importStar(require("../output/output_ast"));
var r3_identifiers_1 = require("./r3_identifiers");
var util_1 = require("./util");
function compilePipeFromMetadata(metadata) {
    var definitionMapValues = [];
    definitionMapValues.push({ key: 'name', value: o.literal(metadata.pipeName), quoted: false });
    definitionMapValues.push({ key: 'type', value: metadata.type.value, quoted: false });
    definitionMapValues.push({ key: 'pure', value: o.literal(metadata.pure), quoted: false });
    if (metadata.isStandalone) {
        definitionMapValues.push({ key: 'standalone', value: o.literal(true), quoted: false });
    }
    var expression = o.importExpr(r3_identifiers_1.Identifiers.definePipe).callFn([o.literalMap(definitionMapValues)], undefined, true);
    var type = createPipeType(metadata);
    return { expression: expression, type: type, statements: [] };
}
exports.compilePipeFromMetadata = compilePipeFromMetadata;
function createPipeType(metadata) {
    return new o.ExpressionType(o.importExpr(r3_identifiers_1.Identifiers.PipeDeclaration, [
        (0, util_1.typeWithParameters)(metadata.type.type, metadata.typeArgumentCount),
        new o.ExpressionType(new o.LiteralExpr(metadata.pipeName)),
        new o.ExpressionType(new o.LiteralExpr(metadata.isStandalone)),
    ]));
}
exports.createPipeType = createPipeType;
