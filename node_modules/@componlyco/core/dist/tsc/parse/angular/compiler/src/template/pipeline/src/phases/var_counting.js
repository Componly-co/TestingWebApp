"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.varsUsedByIrExpression = exports.phaseVarCounting = void 0;
var ir = __importStar(require("../../ir"));
var compilation_1 = require("../compilation");
function phaseVarCounting(job) {
    var e_1, _a, e_2, _b, e_3, _c;
    var _loop_1 = function (unit) {
        var e_4, _k;
        var varCount = 0;
        try {
            for (var _l = (e_4 = void 0, __values(unit.ops())), _m = _l.next(); !_m.done; _m = _l.next()) {
                var op = _m.value;
                if (ir.hasConsumesVarsTrait(op)) {
                    varCount += varsUsedByOp(op);
                }
                ir.visitExpressionsInOp(op, function (expr) {
                    if (!ir.isIrExpression(expr)) {
                        return;
                    }
                    if (ir.hasUsesVarOffsetTrait(expr)) {
                        expr.varOffset = varCount;
                    }
                    if (ir.hasConsumesVarsTrait(expr)) {
                        varCount += varsUsedByIrExpression(expr);
                    }
                });
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_k = _l.return)) _k.call(_l);
            }
            finally { if (e_4) throw e_4.error; }
        }
        unit.vars = varCount;
    };
    try {
        for (var _d = __values(job.units), _e = _d.next(); !_e.done; _e = _d.next()) {
            var unit = _e.value;
            _loop_1(unit);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (job instanceof compilation_1.ComponentCompilationJob) {
        try {
            for (var _f = __values(job.views.values()), _g = _f.next(); !_g.done; _g = _f.next()) {
                var view = _g.value;
                try {
                    for (var _h = (e_3 = void 0, __values(view.create)), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var op = _j.value;
                        if (op.kind !== ir.OpKind.Template) {
                            continue;
                        }
                        var childView = job.views.get(op.xref);
                        op.vars = childView.vars;
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
}
exports.phaseVarCounting = phaseVarCounting;
function varsUsedByOp(op) {
    var slots;
    switch (op.kind) {
        case ir.OpKind.Property:
        case ir.OpKind.HostProperty:
        case ir.OpKind.Attribute:
            slots = 1;
            if (op.expression instanceof ir.Interpolation) {
                slots += op.expression.expressions.length;
            }
            return slots;
        case ir.OpKind.StyleProp:
        case ir.OpKind.ClassProp:
        case ir.OpKind.StyleMap:
        case ir.OpKind.ClassMap:
            slots = 2;
            if (op.expression instanceof ir.Interpolation) {
                slots += op.expression.expressions.length;
            }
            return slots;
        case ir.OpKind.InterpolateText:
            return op.interpolation.expressions.length;
        default:
            throw new Error("Unhandled op: ".concat(ir.OpKind[op.kind]));
    }
}
function varsUsedByIrExpression(expr) {
    switch (expr.kind) {
        case ir.ExpressionKind.PureFunctionExpr:
            return 1 + expr.args.length;
        case ir.ExpressionKind.PipeBinding:
            return 1 + expr.args.length;
        case ir.ExpressionKind.PipeBindingVariadic:
            return 1 + expr.numArgs;
        default:
            throw new Error("AssertionError: unhandled ConsumesVarsTrait expression ".concat(expr.constructor.name));
    }
}
exports.varsUsedByIrExpression = varsUsedByIrExpression;
