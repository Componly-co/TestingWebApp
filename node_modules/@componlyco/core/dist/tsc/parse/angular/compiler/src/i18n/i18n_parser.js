"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createI18nMessageFactory = void 0;
var lexer_1 = require("../expression_parser/lexer");
var parser_1 = require("../expression_parser/parser");
var html = __importStar(require("../ml_parser/ast"));
var html_tags_1 = require("../ml_parser/html_tags");
var parse_util_1 = require("../parse_util");
var i18n = __importStar(require("./i18n_ast"));
var placeholder_1 = require("./serializers/placeholder");
var _expParser = new parser_1.Parser(new lexer_1.Lexer());
function createI18nMessageFactory(interpolationConfig) {
    var visitor = new _I18nVisitor(_expParser, interpolationConfig);
    return function (nodes, meaning, description, customId, visitNodeFn) {
        return visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);
    };
}
exports.createI18nMessageFactory = createI18nMessageFactory;
function noopVisitNodeFn(_html, i18n) {
    return i18n;
}
var _I18nVisitor = (function () {
    function _I18nVisitor(_expressionParser, _interpolationConfig) {
        this._expressionParser = _expressionParser;
        this._interpolationConfig = _interpolationConfig;
    }
    _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description, customId, visitNodeFn) {
        if (meaning === void 0) { meaning = ''; }
        if (description === void 0) { description = ''; }
        if (customId === void 0) { customId = ''; }
        var context = {
            isIcu: nodes.length == 1 && nodes[0] instanceof html.Expansion,
            icuDepth: 0,
            placeholderRegistry: new placeholder_1.PlaceholderRegistry(),
            placeholderToContent: {},
            placeholderToMessage: {},
            visitNodeFn: visitNodeFn || noopVisitNodeFn,
        };
        var i18nodes = html.visitAll(this, nodes, context);
        return new i18n.Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);
    };
    _I18nVisitor.prototype.visitElement = function (el, context) {
        var _a;
        var children = html.visitAll(this, el.children, context);
        var attrs = {};
        el.attrs.forEach(function (attr) {
            attrs[attr.name] = attr.value;
        });
        var isVoid = (0, html_tags_1.getHtmlTagDefinition)(el.name).isVoid;
        var startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
        context.placeholderToContent[startPhName] = {
            text: el.startSourceSpan.toString(),
            sourceSpan: el.startSourceSpan,
        };
        var closePhName = '';
        if (!isVoid) {
            closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);
            context.placeholderToContent[closePhName] = {
                text: "</".concat(el.name, ">"),
                sourceSpan: (_a = el.endSourceSpan) !== null && _a !== void 0 ? _a : el.sourceSpan,
            };
        }
        var node = new i18n.TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
        return context.visitNodeFn(el, node);
    };
    _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
        var node = attribute.valueTokens === undefined || attribute.valueTokens.length === 1 ?
            new i18n.Text(attribute.value, attribute.valueSpan || attribute.sourceSpan) :
            this._visitTextWithInterpolation(attribute.valueTokens, attribute.valueSpan || attribute.sourceSpan, context, attribute.i18n);
        return context.visitNodeFn(attribute, node);
    };
    _I18nVisitor.prototype.visitText = function (text, context) {
        var node = text.tokens.length === 1 ?
            new i18n.Text(text.value, text.sourceSpan) :
            this._visitTextWithInterpolation(text.tokens, text.sourceSpan, context, text.i18n);
        return context.visitNodeFn(text, node);
    };
    _I18nVisitor.prototype.visitComment = function (comment, context) {
        return null;
    };
    _I18nVisitor.prototype.visitExpansion = function (icu, context) {
        var _this = this;
        context.icuDepth++;
        var i18nIcuCases = {};
        var i18nIcu = new i18n.Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
        icu.cases.forEach(function (caze) {
            i18nIcuCases[caze.value] = new i18n.Container(caze.expression.map(function (node) { return node.visit(_this, context); }), caze.expSourceSpan);
        });
        context.icuDepth--;
        if (context.isIcu || context.icuDepth > 0) {
            var expPh = context.placeholderRegistry.getUniquePlaceholder("VAR_".concat(icu.type));
            i18nIcu.expressionPlaceholder = expPh;
            context.placeholderToContent[expPh] = {
                text: icu.switchValue,
                sourceSpan: icu.switchValueSourceSpan,
            };
            return context.visitNodeFn(icu, i18nIcu);
        }
        var phName = context.placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
        context.placeholderToMessage[phName] = this.toI18nMessage([icu], '', '', '', undefined);
        var node = new i18n.IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
        return context.visitNodeFn(icu, node);
    };
    _I18nVisitor.prototype.visitExpansionCase = function (_icuCase, _context) {
        throw new Error('Unreachable code');
    };
    _I18nVisitor.prototype.visitBlockGroup = function (group, context) {
        var children = html.visitAll(this, group.blocks, context);
        var node = new i18n.Container(children, group.sourceSpan);
        return context.visitNodeFn(group, node);
    };
    _I18nVisitor.prototype.visitBlock = function (block, context) {
        var children = html.visitAll(this, block.children, context);
        var node = new i18n.Container(children, block.sourceSpan);
        return context.visitNodeFn(block, node);
    };
    _I18nVisitor.prototype.visitBlockParameter = function (_parameter, _context) { };
    _I18nVisitor.prototype._visitTextWithInterpolation = function (tokens, sourceSpan, context, previousI18n) {
        var e_1, _a;
        var nodes = [];
        var hasInterpolation = false;
        try {
            for (var tokens_1 = __values(tokens), tokens_1_1 = tokens_1.next(); !tokens_1_1.done; tokens_1_1 = tokens_1.next()) {
                var token = tokens_1_1.value;
                switch (token.type) {
                    case 8:
                    case 17:
                        hasInterpolation = true;
                        var expression = token.parts[1];
                        var baseName = extractPlaceholderName(expression) || 'INTERPOLATION';
                        var phName = context.placeholderRegistry.getPlaceholderName(baseName, expression);
                        context.placeholderToContent[phName] = {
                            text: token.parts.join(''),
                            sourceSpan: token.sourceSpan
                        };
                        nodes.push(new i18n.Placeholder(expression, phName, token.sourceSpan));
                        break;
                    default:
                        if (token.parts[0].length > 0) {
                            var previous = nodes[nodes.length - 1];
                            if (previous instanceof i18n.Text) {
                                previous.value += token.parts[0];
                                previous.sourceSpan = new parse_util_1.ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);
                            }
                            else {
                                nodes.push(new i18n.Text(token.parts[0], token.sourceSpan));
                            }
                        }
                        break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (tokens_1_1 && !tokens_1_1.done && (_a = tokens_1.return)) _a.call(tokens_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (hasInterpolation) {
            reusePreviousSourceSpans(nodes, previousI18n);
            return new i18n.Container(nodes, sourceSpan);
        }
        else {
            return nodes[0];
        }
    };
    return _I18nVisitor;
}());
function reusePreviousSourceSpans(nodes, previousI18n) {
    if (previousI18n instanceof i18n.Message) {
        assertSingleContainerMessage(previousI18n);
        previousI18n = previousI18n.nodes[0];
    }
    if (previousI18n instanceof i18n.Container) {
        assertEquivalentNodes(previousI18n.children, nodes);
        for (var i = 0; i < nodes.length; i++) {
            nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;
        }
    }
}
function assertSingleContainerMessage(message) {
    var nodes = message.nodes;
    if (nodes.length !== 1 || !(nodes[0] instanceof i18n.Container)) {
        throw new Error('Unexpected previous i18n message - expected it to consist of only a single `Container` node.');
    }
}
function assertEquivalentNodes(previousNodes, nodes) {
    if (previousNodes.length !== nodes.length) {
        throw new Error('The number of i18n message children changed between first and second pass.');
    }
    if (previousNodes.some(function (node, i) { return nodes[i].constructor !== node.constructor; })) {
        throw new Error('The types of the i18n message children changed between first and second pass.');
    }
}
var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;
function extractPlaceholderName(input) {
    return input.split(_CUSTOM_PH_EXP)[2];
}
