"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNgModuleType = exports.compileNgModuleDeclarationExpression = exports.compileNgModule = exports.R3NgModuleMetadataKind = exports.R3SelectorScopeMode = void 0;
var o = __importStar(require("../output/output_ast"));
var r3_identifiers_1 = require("./r3_identifiers");
var util_1 = require("./util");
var util_2 = require("./view/util");
var R3SelectorScopeMode;
(function (R3SelectorScopeMode) {
    R3SelectorScopeMode[R3SelectorScopeMode["Inline"] = 0] = "Inline";
    R3SelectorScopeMode[R3SelectorScopeMode["SideEffect"] = 1] = "SideEffect";
    R3SelectorScopeMode[R3SelectorScopeMode["Omit"] = 2] = "Omit";
})(R3SelectorScopeMode = exports.R3SelectorScopeMode || (exports.R3SelectorScopeMode = {}));
var R3NgModuleMetadataKind;
(function (R3NgModuleMetadataKind) {
    R3NgModuleMetadataKind[R3NgModuleMetadataKind["Global"] = 0] = "Global";
    R3NgModuleMetadataKind[R3NgModuleMetadataKind["Local"] = 1] = "Local";
})(R3NgModuleMetadataKind = exports.R3NgModuleMetadataKind || (exports.R3NgModuleMetadataKind = {}));
function compileNgModule(meta) {
    var statements = [];
    var definitionMap = new util_2.DefinitionMap();
    definitionMap.set('type', meta.type.value);
    if (meta.kind === R3NgModuleMetadataKind.Global) {
        if (meta.bootstrap.length > 0) {
            definitionMap.set('bootstrap', (0, util_1.refsToArray)(meta.bootstrap, meta.containsForwardDecls));
        }
    }
    else {
        if (meta.bootstrapExpression) {
            definitionMap.set('bootstrap', meta.bootstrapExpression);
        }
    }
    if (meta.selectorScopeMode === R3SelectorScopeMode.Inline) {
        if (meta.declarations.length > 0) {
            definitionMap.set('declarations', (0, util_1.refsToArray)(meta.declarations, meta.containsForwardDecls));
        }
        if (meta.imports.length > 0) {
            definitionMap.set('imports', (0, util_1.refsToArray)(meta.imports, meta.containsForwardDecls));
        }
        if (meta.exports.length > 0) {
            definitionMap.set('exports', (0, util_1.refsToArray)(meta.exports, meta.containsForwardDecls));
        }
    }
    else if (meta.selectorScopeMode === R3SelectorScopeMode.SideEffect) {
        var setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);
        if (setNgModuleScopeCall !== null) {
            statements.push(setNgModuleScopeCall);
        }
    }
    else {
    }
    if (meta.schemas !== null && meta.schemas.length > 0) {
        definitionMap.set('schemas', o.literalArr(meta.schemas.map(function (ref) { return ref.value; })));
    }
    if (meta.id !== null) {
        definitionMap.set('id', meta.id);
        statements.push(o.importExpr(r3_identifiers_1.Identifiers.registerNgModuleType).callFn([meta.type.value, meta.id]).toStmt());
    }
    var expression = o.importExpr(r3_identifiers_1.Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()], undefined, true);
    var type = createNgModuleType(meta);
    return { expression: expression, type: type, statements: statements };
}
exports.compileNgModule = compileNgModule;
function compileNgModuleDeclarationExpression(meta) {
    var definitionMap = new util_2.DefinitionMap();
    definitionMap.set('type', new o.WrappedNodeExpr(meta.type));
    if (meta.bootstrap !== undefined) {
        definitionMap.set('bootstrap', new o.WrappedNodeExpr(meta.bootstrap));
    }
    if (meta.declarations !== undefined) {
        definitionMap.set('declarations', new o.WrappedNodeExpr(meta.declarations));
    }
    if (meta.imports !== undefined) {
        definitionMap.set('imports', new o.WrappedNodeExpr(meta.imports));
    }
    if (meta.exports !== undefined) {
        definitionMap.set('exports', new o.WrappedNodeExpr(meta.exports));
    }
    if (meta.schemas !== undefined) {
        definitionMap.set('schemas', new o.WrappedNodeExpr(meta.schemas));
    }
    if (meta.id !== undefined) {
        definitionMap.set('id', new o.WrappedNodeExpr(meta.id));
    }
    return o.importExpr(r3_identifiers_1.Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()]);
}
exports.compileNgModuleDeclarationExpression = compileNgModuleDeclarationExpression;
function createNgModuleType(meta) {
    if (meta.kind === R3NgModuleMetadataKind.Local) {
        return new o.ExpressionType(meta.type.value);
    }
    var moduleType = meta.type, declarations = meta.declarations, exports = meta.exports, imports = meta.imports, includeImportTypes = meta.includeImportTypes, publicDeclarationTypes = meta.publicDeclarationTypes;
    return new o.ExpressionType(o.importExpr(r3_identifiers_1.Identifiers.NgModuleDeclaration, [
        new o.ExpressionType(moduleType.type),
        publicDeclarationTypes === null ? tupleTypeOf(declarations) :
            tupleOfTypes(publicDeclarationTypes),
        includeImportTypes ? tupleTypeOf(imports) : o.NONE_TYPE,
        tupleTypeOf(exports),
    ]));
}
exports.createNgModuleType = createNgModuleType;
function generateSetNgModuleScopeCall(meta) {
    var scopeMap = new util_2.DefinitionMap();
    if (meta.kind === R3NgModuleMetadataKind.Global) {
        if (meta.declarations.length > 0) {
            scopeMap.set('declarations', (0, util_1.refsToArray)(meta.declarations, meta.containsForwardDecls));
        }
    }
    else {
        if (meta.declarationsExpression) {
            scopeMap.set('declarations', meta.declarationsExpression);
        }
    }
    if (meta.kind === R3NgModuleMetadataKind.Global) {
        if (meta.imports.length > 0) {
            scopeMap.set('imports', (0, util_1.refsToArray)(meta.imports, meta.containsForwardDecls));
        }
    }
    else {
        if (meta.importsExpression) {
            scopeMap.set('imports', meta.importsExpression);
        }
    }
    if (meta.kind === R3NgModuleMetadataKind.Global) {
        if (meta.exports.length > 0) {
            scopeMap.set('exports', (0, util_1.refsToArray)(meta.exports, meta.containsForwardDecls));
        }
    }
    else {
        if (meta.exportsExpression) {
            scopeMap.set('exports', meta.exportsExpression);
        }
    }
    if (Object.keys(scopeMap.values).length === 0) {
        return null;
    }
    var fnCall = new o.InvokeFunctionExpr(o.importExpr(r3_identifiers_1.Identifiers.setNgModuleScope), [meta.type.value, scopeMap.toLiteralMap()]);
    var guardedCall = (0, util_1.jitOnlyGuardedExpression)(fnCall);
    var iife = new o.FunctionExpr([], [guardedCall.toStmt()]);
    var iifeCall = new o.InvokeFunctionExpr(iife, []);
    return iifeCall.toStmt();
}
function tupleTypeOf(exp) {
    var types = exp.map(function (ref) { return o.typeofExpr(ref.type); });
    return exp.length > 0 ? o.expressionType(o.literalArr(types)) : o.NONE_TYPE;
}
function tupleOfTypes(types) {
    var typeofTypes = types.map(function (type) { return o.typeofExpr(type); });
    return types.length > 0 ? o.expressionType(o.literalArr(typeofTypes)) : o.NONE_TYPE;
}
