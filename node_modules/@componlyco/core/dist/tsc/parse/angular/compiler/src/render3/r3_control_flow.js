"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSwitchBlock = exports.createForLoop = exports.createIfBlock = void 0;
var html = __importStar(require("../ml_parser/ast"));
var parse_util_1 = require("../parse_util");
var t = __importStar(require("./r3_ast"));
var FOR_LOOP_EXPRESSION_PATTERN = /^\s*([0-9A-Za-z_$]*)\s+of\s+(.*)/;
var FOR_LOOP_TRACK_PATTERN = /^track\s+(.*)/;
var CONDITIONAL_ALIAS_PATTERN = /^as\s+(.*)/;
var ELSE_IF_PATTERN = /^if\s/;
var FOR_LOOP_LET_PATTERN = /^let\s+(.*)/;
var ALLOWED_FOR_LOOP_LET_VARIABLES = new Set(['$index', '$first', '$last', '$even', '$odd', '$count']);
function createIfBlock(ast, visitor, bindingParser) {
    var e_1, _a;
    var errors = validateIfBlock(ast);
    var branches = [];
    if (errors.length > 0) {
        return { node: null, errors: errors };
    }
    try {
        for (var _b = __values(ast.blocks), _c = _b.next(); !_c.done; _c = _b.next()) {
            var block = _c.value;
            var children = html.visitAll(visitor, block.children);
            if (block.name === 'else' && block.parameters.length === 0) {
                branches.push(new t.IfBlockBranch(null, children, null, block.sourceSpan, block.startSourceSpan));
                continue;
            }
            var params = parseConditionalBlockParameters(block, errors, bindingParser);
            if (params !== null) {
                branches.push(new t.IfBlockBranch(params.expression, children, params.expressionAlias, block.sourceSpan, block.startSourceSpan));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        node: new t.IfBlock(branches, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan),
        errors: errors,
    };
}
exports.createIfBlock = createIfBlock;
function createForLoop(ast, visitor, bindingParser) {
    var e_2, _a;
    var _b = __read(ast.blocks), primaryBlock = _b[0], secondaryBlocks = _b.slice(1);
    var errors = [];
    var params = parseForLoopParameters(primaryBlock, errors, bindingParser);
    var node = null;
    var empty = null;
    try {
        for (var secondaryBlocks_1 = __values(secondaryBlocks), secondaryBlocks_1_1 = secondaryBlocks_1.next(); !secondaryBlocks_1_1.done; secondaryBlocks_1_1 = secondaryBlocks_1.next()) {
            var block = secondaryBlocks_1_1.value;
            if (block.name === 'empty') {
                if (empty !== null) {
                    errors.push(new parse_util_1.ParseError(block.sourceSpan, 'For loop can only have one "empty" block'));
                }
                else if (block.parameters.length > 0) {
                    errors.push(new parse_util_1.ParseError(block.sourceSpan, 'Empty block cannot have parameters'));
                }
                else {
                    empty = new t.ForLoopBlockEmpty(html.visitAll(visitor, block.children), block.sourceSpan, block.startSourceSpan);
                }
            }
            else {
                errors.push(new parse_util_1.ParseError(block.sourceSpan, "Unrecognized loop block \"".concat(block.name, "\"")));
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (secondaryBlocks_1_1 && !secondaryBlocks_1_1.done && (_a = secondaryBlocks_1.return)) _a.call(secondaryBlocks_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    if (params !== null) {
        if (params.trackBy === null) {
            errors.push(new parse_util_1.ParseError(ast.sourceSpan, 'For loop must have a "track" expression'));
        }
        else {
            node = new t.ForLoopBlock(params.itemName, params.expression, params.trackBy, params.context, html.visitAll(visitor, primaryBlock.children), empty, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);
        }
    }
    return { node: node, errors: errors };
}
exports.createForLoop = createForLoop;
function createSwitchBlock(ast, visitor, bindingParser) {
    var e_3, _a;
    var _b = __read(ast.blocks), primaryBlock = _b[0], secondaryBlocks = _b.slice(1);
    var errors = validateSwitchBlock(ast);
    if (errors.length > 0) {
        return { node: null, errors: errors };
    }
    var primaryExpression = parseBlockParameterToBinding(primaryBlock.parameters[0], bindingParser);
    var cases = [];
    var defaultCase = null;
    try {
        for (var secondaryBlocks_2 = __values(secondaryBlocks), secondaryBlocks_2_1 = secondaryBlocks_2.next(); !secondaryBlocks_2_1.done; secondaryBlocks_2_1 = secondaryBlocks_2.next()) {
            var block = secondaryBlocks_2_1.value;
            var expression = block.name === 'case' ?
                parseBlockParameterToBinding(block.parameters[0], bindingParser) :
                null;
            var ast_1 = new t.SwitchBlockCase(expression, html.visitAll(visitor, block.children), block.sourceSpan, block.startSourceSpan);
            if (expression === null) {
                defaultCase = ast_1;
            }
            else {
                cases.push(ast_1);
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (secondaryBlocks_2_1 && !secondaryBlocks_2_1.done && (_a = secondaryBlocks_2.return)) _a.call(secondaryBlocks_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
    if (defaultCase !== null) {
        cases.push(defaultCase);
    }
    return {
        node: new t.SwitchBlock(primaryExpression, cases, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan),
        errors: errors
    };
}
exports.createSwitchBlock = createSwitchBlock;
function parseForLoopParameters(block, errors, bindingParser) {
    var e_4, _a;
    var _b;
    if (block.parameters.length === 0) {
        errors.push(new parse_util_1.ParseError(block.sourceSpan, 'For loop does not have an expression'));
        return null;
    }
    var _c = __read(block.parameters), expressionParam = _c[0], secondaryParams = _c.slice(1);
    var match = (_b = stripOptionalParentheses(expressionParam, errors)) === null || _b === void 0 ? void 0 : _b.match(FOR_LOOP_EXPRESSION_PATTERN);
    if (!match || match[2].trim().length === 0) {
        errors.push(new parse_util_1.ParseError(expressionParam.sourceSpan, 'Cannot parse expression. For loop expression must match the pattern "<identifier> of <expression>"'));
        return null;
    }
    var _d = __read(match, 3), itemName = _d[1], rawExpression = _d[2];
    var result = {
        itemName: itemName,
        trackBy: null,
        expression: parseBlockParameterToBinding(expressionParam, bindingParser, rawExpression),
        context: null,
    };
    try {
        for (var secondaryParams_1 = __values(secondaryParams), secondaryParams_1_1 = secondaryParams_1.next(); !secondaryParams_1_1.done; secondaryParams_1_1 = secondaryParams_1.next()) {
            var param = secondaryParams_1_1.value;
            var letMatch = param.expression.match(FOR_LOOP_LET_PATTERN);
            if (letMatch !== null) {
                result.context = result.context || {};
                parseLetParameter(param.sourceSpan, letMatch[1], result.context, errors);
                continue;
            }
            var trackMatch = param.expression.match(FOR_LOOP_TRACK_PATTERN);
            if (trackMatch !== null) {
                if (result.trackBy !== null) {
                    errors.push(new parse_util_1.ParseError(param.sourceSpan, 'For loop can only have one "track" expression'));
                }
                else {
                    result.trackBy = parseBlockParameterToBinding(param, bindingParser, trackMatch[1]);
                }
                continue;
            }
            errors.push(new parse_util_1.ParseError(param.sourceSpan, "Unrecognized loop paramater \"".concat(param.expression, "\"")));
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (secondaryParams_1_1 && !secondaryParams_1_1.done && (_a = secondaryParams_1.return)) _a.call(secondaryParams_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return result;
}
function parseLetParameter(sourceSpan, expression, context, errors) {
    var e_5, _a;
    var parts = expression.split(',');
    try {
        for (var parts_1 = __values(parts), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {
            var part = parts_1_1.value;
            var expressionParts = part.split('=');
            var name_1 = expressionParts.length === 2 ? expressionParts[0].trim() : '';
            var variableName = expressionParts.length === 2 ? expressionParts[1].trim() : '';
            if (name_1.length === 0 || variableName.length === 0) {
                errors.push(new parse_util_1.ParseError(sourceSpan, "Invalid for loop \"let\" parameter. Parameter should match the pattern \"<name> = <variable name>\""));
            }
            else if (!ALLOWED_FOR_LOOP_LET_VARIABLES.has(variableName)) {
                errors.push(new parse_util_1.ParseError(sourceSpan, "Unknown \"let\" parameter variable \"".concat(variableName, "\". The allowed variables are: ").concat(Array.from(ALLOWED_FOR_LOOP_LET_VARIABLES).join(', '))));
            }
            else if (context.hasOwnProperty(variableName)) {
                errors.push(new parse_util_1.ParseError(sourceSpan, "Duplicate \"let\" parameter variable \"".concat(variableName, "\"")));
            }
            else {
                context[variableName] = name_1;
            }
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);
        }
        finally { if (e_5) throw e_5.error; }
    }
}
function validateIfBlock(ast) {
    var errors = [];
    var hasElse = false;
    for (var i = 0; i < ast.blocks.length; i++) {
        var block = ast.blocks[i];
        if ((block.name !== 'if' || i > 0) && block.name !== 'else') {
            errors.push(new parse_util_1.ParseError(block.sourceSpan, "Unrecognized conditional block \"".concat(block.name, "\"")));
            continue;
        }
        if (block.name === 'if') {
            continue;
        }
        if (block.parameters.length === 0) {
            if (hasElse) {
                errors.push(new parse_util_1.ParseError(block.sourceSpan, 'Conditional can only have one "else" block'));
            }
            else if (ast.blocks.length > 1 && i < ast.blocks.length - 1) {
                errors.push(new parse_util_1.ParseError(block.sourceSpan, 'Else block must be last inside the conditional'));
            }
            hasElse = true;
        }
        else if (block.parameters.length > 0 && !ELSE_IF_PATTERN.test(block.parameters[0].expression)) {
            errors.push(new parse_util_1.ParseError(block.sourceSpan, 'Else block cannot have parameters'));
        }
    }
    return errors;
}
function validateSwitchBlock(ast) {
    var e_6, _a;
    var _b = __read(ast.blocks), primaryBlock = _b[0], secondaryBlocks = _b.slice(1);
    var errors = [];
    var hasDefault = false;
    if (primaryBlock.children.length > 0) {
        errors.push(new parse_util_1.ParseError(primaryBlock.sourceSpan, 'Switch block can only contain "case" and "default" blocks'));
    }
    if (primaryBlock.parameters.length !== 1) {
        errors.push(new parse_util_1.ParseError(primaryBlock.sourceSpan, 'Switch block must have exactly one parameter'));
    }
    try {
        for (var secondaryBlocks_3 = __values(secondaryBlocks), secondaryBlocks_3_1 = secondaryBlocks_3.next(); !secondaryBlocks_3_1.done; secondaryBlocks_3_1 = secondaryBlocks_3.next()) {
            var block = secondaryBlocks_3_1.value;
            if (block.name === 'case') {
                if (block.parameters.length !== 1) {
                    errors.push(new parse_util_1.ParseError(block.sourceSpan, 'Case block must have exactly one parameter'));
                }
            }
            else if (block.name === 'default') {
                if (hasDefault) {
                    errors.push(new parse_util_1.ParseError(block.sourceSpan, 'Switch block can only have one "default" block'));
                }
                else if (block.parameters.length > 0) {
                    errors.push(new parse_util_1.ParseError(block.sourceSpan, 'Default block cannot have parameters'));
                }
                hasDefault = true;
            }
            else {
                errors.push(new parse_util_1.ParseError(block.sourceSpan, 'Switch block can only contain "case" and "default" blocks'));
            }
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (secondaryBlocks_3_1 && !secondaryBlocks_3_1.done && (_a = secondaryBlocks_3.return)) _a.call(secondaryBlocks_3);
        }
        finally { if (e_6) throw e_6.error; }
    }
    return errors;
}
function parseBlockParameterToBinding(ast, bindingParser, part) {
    if (part === void 0) { part = 0; }
    var start;
    var end;
    if (typeof part === 'number') {
        start = part;
        end = ast.expression.length;
    }
    else {
        start = Math.max(0, ast.expression.lastIndexOf(part));
        end = start + part.length;
    }
    return bindingParser.parseBinding(ast.expression.slice(start, end), false, ast.sourceSpan, ast.sourceSpan.start.offset + start);
}
function parseConditionalBlockParameters(block, errors, bindingParser) {
    if (block.parameters.length === 0) {
        errors.push(new parse_util_1.ParseError(block.sourceSpan, 'Conditional block does not have an expression'));
        return null;
    }
    var isPrimaryIfBlock = block.name === 'if';
    var expression = parseBlockParameterToBinding(block.parameters[0], bindingParser, isPrimaryIfBlock ? 0 : 2);
    var expressionAlias = null;
    for (var i = 1; i < block.parameters.length; i++) {
        var param = block.parameters[i];
        var aliasMatch = param.expression.match(CONDITIONAL_ALIAS_PATTERN);
        if (aliasMatch === null) {
            errors.push(new parse_util_1.ParseError(param.sourceSpan, "Unrecognized conditional paramater \"".concat(param.expression, "\"")));
        }
        else if (!isPrimaryIfBlock) {
            errors.push(new parse_util_1.ParseError(param.sourceSpan, '"as" expression is only allowed on the primary "if" block'));
        }
        else if (expressionAlias !== null) {
            errors.push(new parse_util_1.ParseError(param.sourceSpan, 'Conditional can only have one "as" expression'));
        }
        else {
            expressionAlias = aliasMatch[1].trim();
        }
    }
    return { expression: expression, expressionAlias: expressionAlias };
}
function stripOptionalParentheses(param, errors) {
    var expression = param.expression;
    var spaceRegex = /^\s$/;
    var openParens = 0;
    var start = 0;
    var end = expression.length - 1;
    for (var i = 0; i < expression.length; i++) {
        var char = expression[i];
        if (char === '(') {
            start = i + 1;
            openParens++;
        }
        else if (spaceRegex.test(char)) {
            continue;
        }
        else {
            break;
        }
    }
    if (openParens === 0) {
        return expression;
    }
    for (var i = expression.length - 1; i > -1; i--) {
        var char = expression[i];
        if (char === ')') {
            end = i;
            openParens--;
            if (openParens === 0) {
                break;
            }
        }
        else if (spaceRegex.test(char)) {
            continue;
        }
        else {
            break;
        }
    }
    if (openParens !== 0) {
        errors.push(new parse_util_1.ParseError(param.sourceSpan, 'Unclosed parentheses in expression'));
        return null;
    }
    return expression.slice(start, end);
}
