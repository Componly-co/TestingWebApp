"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.phaseNaming = void 0;
var parse_util_1 = require("../../../../parse_util");
var style_parser_1 = require("../../../../render3/view/style_parser");
var ir = __importStar(require("../../ir"));
var compilation_1 = require("../compilation");
var conversion_1 = require("../conversion");
function phaseNaming(cpl) {
    addNamesToView(cpl.root, cpl.componentName, { index: 0 }, cpl.compatibility === ir.CompatibilityMode.TemplateDefinitionBuilder);
}
exports.phaseNaming = phaseNaming;
function addNamesToView(unit, baseName, state, compatibility) {
    var e_1, _a, e_2, _b;
    if (unit.fnName === null) {
        unit.fnName = (0, parse_util_1.sanitizeIdentifier)("".concat(baseName, "_").concat(unit.job.fnSuffix));
    }
    var varNames = new Map();
    try {
        for (var _c = __values(unit.ops()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var op = _d.value;
            switch (op.kind) {
                case ir.OpKind.Property:
                    if (op.isAnimationTrigger) {
                        op.name = '@' + op.name;
                    }
                    break;
                case ir.OpKind.Listener:
                    if (op.handlerFnName === null) {
                        if (op.slot === null) {
                            throw new Error("Expected a slot to be assigned");
                        }
                        var safeTagName = op.tag.replace('-', '_');
                        if (op.isAnimationListener) {
                            op.handlerFnName = (0, parse_util_1.sanitizeIdentifier)("".concat(unit.fnName, "_").concat(safeTagName, "_animation_").concat(op.name, "_").concat(op.animationPhase, "_").concat(op.slot, "_listener"));
                            op.name = "@".concat(op.name, ".").concat(op.animationPhase);
                        }
                        else {
                            op.handlerFnName =
                                (0, parse_util_1.sanitizeIdentifier)("".concat(unit.fnName, "_").concat(safeTagName, "_").concat(op.name, "_").concat(op.slot, "_listener"));
                        }
                    }
                    break;
                case ir.OpKind.Variable:
                    varNames.set(op.xref, getVariableName(op.variable, state));
                    break;
                case ir.OpKind.Template:
                    if (!(unit instanceof compilation_1.ViewCompilationUnit)) {
                        throw new Error("AssertionError: must be compiling a component");
                    }
                    var childView = unit.job.views.get(op.xref);
                    if (op.slot === null) {
                        throw new Error("Expected slot to be assigned");
                    }
                    addNamesToView(childView, "".concat(baseName, "_").concat((0, conversion_1.prefixWithNamespace)(op.tag, op.namespace), "_").concat(op.slot), state, compatibility);
                    break;
                case ir.OpKind.StyleProp:
                    op.name = normalizeStylePropName(op.name);
                    if (compatibility) {
                        op.name = stripImportant(op.name);
                    }
                    break;
                case ir.OpKind.ClassProp:
                    if (compatibility) {
                        op.name = stripImportant(op.name);
                    }
                    break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var _e = __values(unit.ops()), _f = _e.next(); !_f.done; _f = _e.next()) {
            var op = _f.value;
            ir.visitExpressionsInOp(op, function (expr) {
                if (!(expr instanceof ir.ReadVariableExpr) || expr.name !== null) {
                    return;
                }
                if (!varNames.has(expr.xref)) {
                    throw new Error("Variable ".concat(expr.xref, " not yet named"));
                }
                expr.name = varNames.get(expr.xref);
            });
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
function getVariableName(variable, state) {
    if (variable.name === null) {
        switch (variable.kind) {
            case ir.SemanticVariableKind.Context:
                variable.name = "ctx_r".concat(state.index++);
                break;
            case ir.SemanticVariableKind.Identifier:
                variable.name = "".concat(variable.identifier, "_").concat(state.index++);
                break;
            default:
                variable.name = "_r".concat(state.index++);
                break;
        }
    }
    return variable.name;
}
function normalizeStylePropName(name) {
    return name.startsWith('--') ? name : (0, style_parser_1.hyphenate)(name);
}
function stripImportant(name) {
    var importantIndex = name.indexOf('!important');
    if (importantIndex > -1) {
        return name.substring(0, importantIndex);
    }
    return name;
}
