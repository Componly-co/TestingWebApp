"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstructionStatements = exports.getInterpolationArgsLength = exports.getAttrsForDirectiveMatching = exports.DefinitionMap = exports.getQueryPredicate = exports.trimTrailingNulls = exports.conditionallyCreateDirectiveBindingLiteral = exports.asLiteral = exports.invalid = exports.temporaryAllocator = exports.invokeInstruction = exports.DIRECT_CONTEXT_REFERENCE = exports.RESTORED_VIEW_CONTEXT_NAME = exports.NON_BINDABLE_ATTR = exports.IMPLICIT_REFERENCE = exports.REFERENCE_PREFIX = exports.RENDER_FLAGS = exports.CONTEXT_NAME = exports.TEMPORARY_NAME = void 0;
var o = __importStar(require("../../output/output_ast"));
var t = __importStar(require("../r3_ast"));
var r3_identifiers_1 = require("../r3_identifiers");
var util_1 = require("./i18n/util");
var UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;
exports.TEMPORARY_NAME = '_t';
exports.CONTEXT_NAME = 'ctx';
exports.RENDER_FLAGS = 'rf';
exports.REFERENCE_PREFIX = '_r';
exports.IMPLICIT_REFERENCE = '$implicit';
exports.NON_BINDABLE_ATTR = 'ngNonBindable';
exports.RESTORED_VIEW_CONTEXT_NAME = 'restoredCtx';
exports.DIRECT_CONTEXT_REFERENCE = '#context';
var MAX_CHAIN_LENGTH = 500;
var CHAINABLE_INSTRUCTIONS = new Set([
    r3_identifiers_1.Identifiers.element,
    r3_identifiers_1.Identifiers.elementStart,
    r3_identifiers_1.Identifiers.elementEnd,
    r3_identifiers_1.Identifiers.elementContainer,
    r3_identifiers_1.Identifiers.elementContainerStart,
    r3_identifiers_1.Identifiers.elementContainerEnd,
    r3_identifiers_1.Identifiers.i18nExp,
    r3_identifiers_1.Identifiers.listener,
    r3_identifiers_1.Identifiers.classProp,
    r3_identifiers_1.Identifiers.syntheticHostListener,
    r3_identifiers_1.Identifiers.hostProperty,
    r3_identifiers_1.Identifiers.syntheticHostProperty,
    r3_identifiers_1.Identifiers.property,
    r3_identifiers_1.Identifiers.propertyInterpolate1,
    r3_identifiers_1.Identifiers.propertyInterpolate2,
    r3_identifiers_1.Identifiers.propertyInterpolate3,
    r3_identifiers_1.Identifiers.propertyInterpolate4,
    r3_identifiers_1.Identifiers.propertyInterpolate5,
    r3_identifiers_1.Identifiers.propertyInterpolate6,
    r3_identifiers_1.Identifiers.propertyInterpolate7,
    r3_identifiers_1.Identifiers.propertyInterpolate8,
    r3_identifiers_1.Identifiers.propertyInterpolateV,
    r3_identifiers_1.Identifiers.attribute,
    r3_identifiers_1.Identifiers.attributeInterpolate1,
    r3_identifiers_1.Identifiers.attributeInterpolate2,
    r3_identifiers_1.Identifiers.attributeInterpolate3,
    r3_identifiers_1.Identifiers.attributeInterpolate4,
    r3_identifiers_1.Identifiers.attributeInterpolate5,
    r3_identifiers_1.Identifiers.attributeInterpolate6,
    r3_identifiers_1.Identifiers.attributeInterpolate7,
    r3_identifiers_1.Identifiers.attributeInterpolate8,
    r3_identifiers_1.Identifiers.attributeInterpolateV,
    r3_identifiers_1.Identifiers.styleProp,
    r3_identifiers_1.Identifiers.stylePropInterpolate1,
    r3_identifiers_1.Identifiers.stylePropInterpolate2,
    r3_identifiers_1.Identifiers.stylePropInterpolate3,
    r3_identifiers_1.Identifiers.stylePropInterpolate4,
    r3_identifiers_1.Identifiers.stylePropInterpolate5,
    r3_identifiers_1.Identifiers.stylePropInterpolate6,
    r3_identifiers_1.Identifiers.stylePropInterpolate7,
    r3_identifiers_1.Identifiers.stylePropInterpolate8,
    r3_identifiers_1.Identifiers.stylePropInterpolateV,
    r3_identifiers_1.Identifiers.textInterpolate,
    r3_identifiers_1.Identifiers.textInterpolate1,
    r3_identifiers_1.Identifiers.textInterpolate2,
    r3_identifiers_1.Identifiers.textInterpolate3,
    r3_identifiers_1.Identifiers.textInterpolate4,
    r3_identifiers_1.Identifiers.textInterpolate5,
    r3_identifiers_1.Identifiers.textInterpolate6,
    r3_identifiers_1.Identifiers.textInterpolate7,
    r3_identifiers_1.Identifiers.textInterpolate8,
    r3_identifiers_1.Identifiers.textInterpolateV,
]);
function invokeInstruction(span, reference, params) {
    return o.importExpr(reference, null, span).callFn(params, span);
}
exports.invokeInstruction = invokeInstruction;
function temporaryAllocator(statements, name) {
    var temp = null;
    return function () {
        if (!temp) {
            statements.push(new o.DeclareVarStmt(exports.TEMPORARY_NAME, undefined, o.DYNAMIC_TYPE));
            temp = o.variable(name);
        }
        return temp;
    };
}
exports.temporaryAllocator = temporaryAllocator;
function invalid(arg) {
    throw new Error("Invalid state: Visitor ".concat(this.constructor.name, " doesn't handle ").concat(arg.constructor.name));
}
exports.invalid = invalid;
function asLiteral(value) {
    if (Array.isArray(value)) {
        return o.literalArr(value.map(asLiteral));
    }
    return o.literal(value, o.INFERRED_TYPE);
}
exports.asLiteral = asLiteral;
function conditionallyCreateDirectiveBindingLiteral(map, keepDeclared) {
    var keys = Object.getOwnPropertyNames(map);
    if (keys.length === 0) {
        return null;
    }
    return o.literalMap(keys.map(function (key) {
        var value = map[key];
        var declaredName;
        var publicName;
        var minifiedName;
        var expressionValue;
        if (typeof value === 'string') {
            declaredName = key;
            minifiedName = key;
            publicName = value;
            expressionValue = asLiteral(publicName);
        }
        else {
            minifiedName = key;
            declaredName = value.classPropertyName;
            publicName = value.bindingPropertyName;
            if (keepDeclared && (publicName !== declaredName || value.transformFunction != null)) {
                var expressionKeys = [asLiteral(publicName), asLiteral(declaredName)];
                if (value.transformFunction != null) {
                    expressionKeys.push(value.transformFunction);
                }
                expressionValue = o.literalArr(expressionKeys);
            }
            else {
                expressionValue = asLiteral(publicName);
            }
        }
        return {
            key: minifiedName,
            quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),
            value: expressionValue,
        };
    }));
}
exports.conditionallyCreateDirectiveBindingLiteral = conditionallyCreateDirectiveBindingLiteral;
function trimTrailingNulls(parameters) {
    while (o.isNull(parameters[parameters.length - 1])) {
        parameters.pop();
    }
    return parameters;
}
exports.trimTrailingNulls = trimTrailingNulls;
function getQueryPredicate(query, constantPool) {
    if (Array.isArray(query.predicate)) {
        var predicate_1 = [];
        query.predicate.forEach(function (selector) {
            var selectors = selector.split(',').map(function (token) { return o.literal(token.trim()); });
            predicate_1.push.apply(predicate_1, __spreadArray([], __read(selectors), false));
        });
        return constantPool.getConstLiteral(o.literalArr(predicate_1), true);
    }
    else {
        switch (query.predicate.forwardRef) {
            case 0:
            case 2:
                return query.predicate.expression;
            case 1:
                return o.importExpr(r3_identifiers_1.Identifiers.resolveForwardRef).callFn([query.predicate.expression]);
        }
    }
}
exports.getQueryPredicate = getQueryPredicate;
var DefinitionMap = (function () {
    function DefinitionMap() {
        this.values = [];
    }
    DefinitionMap.prototype.set = function (key, value) {
        if (value) {
            this.values.push({ key: key, value: value, quoted: false });
        }
    };
    DefinitionMap.prototype.toLiteralMap = function () {
        return o.literalMap(this.values);
    };
    return DefinitionMap;
}());
exports.DefinitionMap = DefinitionMap;
function getAttrsForDirectiveMatching(elOrTpl) {
    var attributesMap = {};
    if (elOrTpl instanceof t.Template && elOrTpl.tagName !== 'ng-template') {
        elOrTpl.templateAttrs.forEach(function (a) { return attributesMap[a.name] = ''; });
    }
    else {
        elOrTpl.attributes.forEach(function (a) {
            if (!(0, util_1.isI18nAttribute)(a.name)) {
                attributesMap[a.name] = a.value;
            }
        });
        elOrTpl.inputs.forEach(function (i) {
            if (i.type === 0) {
                attributesMap[i.name] = '';
            }
        });
        elOrTpl.outputs.forEach(function (o) {
            attributesMap[o.name] = '';
        });
    }
    return attributesMap;
}
exports.getAttrsForDirectiveMatching = getAttrsForDirectiveMatching;
function getInterpolationArgsLength(interpolation) {
    var expressions = interpolation.expressions, strings = interpolation.strings;
    if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {
        return 1;
    }
    else {
        return expressions.length + strings.length;
    }
}
exports.getInterpolationArgsLength = getInterpolationArgsLength;
function getInstructionStatements(instructions) {
    var e_1, _a;
    var _b;
    var statements = [];
    var pendingExpression = null;
    var pendingExpressionType = null;
    var chainLength = 0;
    try {
        for (var instructions_1 = __values(instructions), instructions_1_1 = instructions_1.next(); !instructions_1_1.done; instructions_1_1 = instructions_1.next()) {
            var current = instructions_1_1.value;
            var resolvedParams = (_b = (typeof current.paramsOrFn === 'function' ? current.paramsOrFn() : current.paramsOrFn)) !== null && _b !== void 0 ? _b : [];
            var params = Array.isArray(resolvedParams) ? resolvedParams : [resolvedParams];
            if (chainLength < MAX_CHAIN_LENGTH && pendingExpressionType === current.reference &&
                CHAINABLE_INSTRUCTIONS.has(pendingExpressionType)) {
                pendingExpression = pendingExpression.callFn(params, pendingExpression.sourceSpan);
                chainLength++;
            }
            else {
                if (pendingExpression !== null) {
                    statements.push(pendingExpression.toStmt());
                }
                pendingExpression = invokeInstruction(current.span, current.reference, params);
                pendingExpressionType = current.reference;
                chainLength = 0;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (instructions_1_1 && !instructions_1_1.done && (_a = instructions_1.return)) _a.call(instructions_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (pendingExpression !== null) {
        statements.push(pendingExpression.toStmt());
    }
    return statements;
}
exports.getInstructionStatements = getInstructionStatements;
