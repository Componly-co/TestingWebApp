"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.isStringLiteral = exports.transformExpressionsInStatement = exports.transformExpressionsInExpression = exports.transformExpressionsInOp = exports.VisitorContextFlag = exports.visitExpressionsInOp = exports.SanitizerExpr = exports.ReadTemporaryExpr = exports.AssignTemporaryExpr = exports.EmptyExpr = exports.SafeTernaryExpr = exports.SafeInvokeFunctionExpr = exports.SafeKeyedReadExpr = exports.SafePropertyReadExpr = exports.PipeBindingVariadicExpr = exports.PipeBindingExpr = exports.PureFunctionParameterExpr = exports.PureFunctionExpr = exports.ReadVariableExpr = exports.ResetViewExpr = exports.RestoreViewExpr = exports.GetCurrentViewExpr = exports.NextContextExpr = exports.ContextExpr = exports.ReferenceExpr = exports.LexicalReadExpr = exports.ExpressionBase = exports.isIrExpression = void 0;
var o = __importStar(require("../../../../output/output_ast"));
var enums_1 = require("./enums");
var traits_1 = require("./traits");
var update_1 = require("./ops/update");
function isIrExpression(expr) {
    return expr instanceof ExpressionBase;
}
exports.isIrExpression = isIrExpression;
var ExpressionBase = (function (_super) {
    __extends(ExpressionBase, _super);
    function ExpressionBase(sourceSpan) {
        if (sourceSpan === void 0) { sourceSpan = null; }
        return _super.call(this, null, sourceSpan) || this;
    }
    return ExpressionBase;
}(o.Expression));
exports.ExpressionBase = ExpressionBase;
var LexicalReadExpr = (function (_super) {
    __extends(LexicalReadExpr, _super);
    function LexicalReadExpr(name) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.kind = enums_1.ExpressionKind.LexicalRead;
        return _this;
    }
    LexicalReadExpr.prototype.visitExpression = function (visitor, context) { };
    LexicalReadExpr.prototype.isEquivalent = function () {
        return false;
    };
    LexicalReadExpr.prototype.isConstant = function () {
        return false;
    };
    LexicalReadExpr.prototype.transformInternalExpressions = function () { };
    LexicalReadExpr.prototype.clone = function () {
        return new LexicalReadExpr(this.name);
    };
    return LexicalReadExpr;
}(ExpressionBase));
exports.LexicalReadExpr = LexicalReadExpr;
var ReferenceExpr = (function (_super) {
    __extends(ReferenceExpr, _super);
    function ReferenceExpr(target, offset) {
        var _this = _super.call(this) || this;
        _this.target = target;
        _this.offset = offset;
        _this.kind = enums_1.ExpressionKind.Reference;
        _this[_a] = true;
        _this.slot = null;
        return _this;
    }
    ReferenceExpr.prototype.visitExpression = function () { };
    ReferenceExpr.prototype.isEquivalent = function (e) {
        return e instanceof ReferenceExpr && e.target === this.target;
    };
    ReferenceExpr.prototype.isConstant = function () {
        return false;
    };
    ReferenceExpr.prototype.transformInternalExpressions = function () { };
    ReferenceExpr.prototype.clone = function () {
        var expr = new ReferenceExpr(this.target, this.offset);
        expr.slot = this.slot;
        return expr;
    };
    return ReferenceExpr;
}(ExpressionBase));
exports.ReferenceExpr = ReferenceExpr;
_a = traits_1.UsesSlotIndex;
var ContextExpr = (function (_super) {
    __extends(ContextExpr, _super);
    function ContextExpr(view) {
        var _this = _super.call(this) || this;
        _this.view = view;
        _this.kind = enums_1.ExpressionKind.Context;
        return _this;
    }
    ContextExpr.prototype.visitExpression = function () { };
    ContextExpr.prototype.isEquivalent = function (e) {
        return e instanceof ContextExpr && e.view === this.view;
    };
    ContextExpr.prototype.isConstant = function () {
        return false;
    };
    ContextExpr.prototype.transformInternalExpressions = function () { };
    ContextExpr.prototype.clone = function () {
        return new ContextExpr(this.view);
    };
    return ContextExpr;
}(ExpressionBase));
exports.ContextExpr = ContextExpr;
var NextContextExpr = (function (_super) {
    __extends(NextContextExpr, _super);
    function NextContextExpr() {
        var _this = _super.call(this) || this;
        _this.kind = enums_1.ExpressionKind.NextContext;
        _this.steps = 1;
        return _this;
    }
    NextContextExpr.prototype.visitExpression = function () { };
    NextContextExpr.prototype.isEquivalent = function (e) {
        return e instanceof NextContextExpr && e.steps === this.steps;
    };
    NextContextExpr.prototype.isConstant = function () {
        return false;
    };
    NextContextExpr.prototype.transformInternalExpressions = function () { };
    NextContextExpr.prototype.clone = function () {
        var expr = new NextContextExpr();
        expr.steps = this.steps;
        return expr;
    };
    return NextContextExpr;
}(ExpressionBase));
exports.NextContextExpr = NextContextExpr;
var GetCurrentViewExpr = (function (_super) {
    __extends(GetCurrentViewExpr, _super);
    function GetCurrentViewExpr() {
        var _this = _super.call(this) || this;
        _this.kind = enums_1.ExpressionKind.GetCurrentView;
        return _this;
    }
    GetCurrentViewExpr.prototype.visitExpression = function () { };
    GetCurrentViewExpr.prototype.isEquivalent = function (e) {
        return e instanceof GetCurrentViewExpr;
    };
    GetCurrentViewExpr.prototype.isConstant = function () {
        return false;
    };
    GetCurrentViewExpr.prototype.transformInternalExpressions = function () { };
    GetCurrentViewExpr.prototype.clone = function () {
        return new GetCurrentViewExpr();
    };
    return GetCurrentViewExpr;
}(ExpressionBase));
exports.GetCurrentViewExpr = GetCurrentViewExpr;
var RestoreViewExpr = (function (_super) {
    __extends(RestoreViewExpr, _super);
    function RestoreViewExpr(view) {
        var _this = _super.call(this) || this;
        _this.view = view;
        _this.kind = enums_1.ExpressionKind.RestoreView;
        return _this;
    }
    RestoreViewExpr.prototype.visitExpression = function (visitor, context) {
        if (typeof this.view !== 'number') {
            this.view.visitExpression(visitor, context);
        }
    };
    RestoreViewExpr.prototype.isEquivalent = function (e) {
        if (!(e instanceof RestoreViewExpr) || typeof e.view !== typeof this.view) {
            return false;
        }
        if (typeof this.view === 'number') {
            return this.view === e.view;
        }
        else {
            return this.view.isEquivalent(e.view);
        }
    };
    RestoreViewExpr.prototype.isConstant = function () {
        return false;
    };
    RestoreViewExpr.prototype.transformInternalExpressions = function (transform, flags) {
        if (typeof this.view !== 'number') {
            this.view = transformExpressionsInExpression(this.view, transform, flags);
        }
    };
    RestoreViewExpr.prototype.clone = function () {
        return new RestoreViewExpr(this.view instanceof o.Expression ? this.view.clone() : this.view);
    };
    return RestoreViewExpr;
}(ExpressionBase));
exports.RestoreViewExpr = RestoreViewExpr;
var ResetViewExpr = (function (_super) {
    __extends(ResetViewExpr, _super);
    function ResetViewExpr(expr) {
        var _this = _super.call(this) || this;
        _this.expr = expr;
        _this.kind = enums_1.ExpressionKind.ResetView;
        return _this;
    }
    ResetViewExpr.prototype.visitExpression = function (visitor, context) {
        this.expr.visitExpression(visitor, context);
    };
    ResetViewExpr.prototype.isEquivalent = function (e) {
        return e instanceof ResetViewExpr && this.expr.isEquivalent(e.expr);
    };
    ResetViewExpr.prototype.isConstant = function () {
        return false;
    };
    ResetViewExpr.prototype.transformInternalExpressions = function (transform, flags) {
        this.expr = transformExpressionsInExpression(this.expr, transform, flags);
    };
    ResetViewExpr.prototype.clone = function () {
        return new ResetViewExpr(this.expr.clone());
    };
    return ResetViewExpr;
}(ExpressionBase));
exports.ResetViewExpr = ResetViewExpr;
var ReadVariableExpr = (function (_super) {
    __extends(ReadVariableExpr, _super);
    function ReadVariableExpr(xref) {
        var _this = _super.call(this) || this;
        _this.xref = xref;
        _this.kind = enums_1.ExpressionKind.ReadVariable;
        _this.name = null;
        return _this;
    }
    ReadVariableExpr.prototype.visitExpression = function () { };
    ReadVariableExpr.prototype.isEquivalent = function (other) {
        return other instanceof ReadVariableExpr && other.xref === this.xref;
    };
    ReadVariableExpr.prototype.isConstant = function () {
        return false;
    };
    ReadVariableExpr.prototype.transformInternalExpressions = function () { };
    ReadVariableExpr.prototype.clone = function () {
        var expr = new ReadVariableExpr(this.xref);
        expr.name = this.name;
        return expr;
    };
    return ReadVariableExpr;
}(ExpressionBase));
exports.ReadVariableExpr = ReadVariableExpr;
var PureFunctionExpr = (function (_super) {
    __extends(PureFunctionExpr, _super);
    function PureFunctionExpr(expression, args) {
        var _this = _super.call(this) || this;
        _this.kind = enums_1.ExpressionKind.PureFunctionExpr;
        _this[_b] = true;
        _this[_c] = true;
        _this.varOffset = null;
        _this.fn = null;
        _this.body = expression;
        _this.args = args;
        return _this;
    }
    PureFunctionExpr.prototype.visitExpression = function (visitor, context) {
        var e_1, _k;
        var _l;
        (_l = this.body) === null || _l === void 0 ? void 0 : _l.visitExpression(visitor, context);
        try {
            for (var _m = __values(this.args), _o = _m.next(); !_o.done; _o = _m.next()) {
                var arg = _o.value;
                arg.visitExpression(visitor, context);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_k = _m.return)) _k.call(_m);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    PureFunctionExpr.prototype.isEquivalent = function (other) {
        var _this = this;
        if (!(other instanceof PureFunctionExpr) || other.args.length !== this.args.length) {
            return false;
        }
        return other.body !== null && this.body !== null && other.body.isEquivalent(this.body) &&
            other.args.every(function (arg, idx) { return arg.isEquivalent(_this.args[idx]); });
    };
    PureFunctionExpr.prototype.isConstant = function () {
        return false;
    };
    PureFunctionExpr.prototype.transformInternalExpressions = function (transform, flags) {
        if (this.body !== null) {
            this.body = transformExpressionsInExpression(this.body, transform, flags | VisitorContextFlag.InChildOperation);
        }
        else if (this.fn !== null) {
            this.fn = transformExpressionsInExpression(this.fn, transform, flags);
        }
        for (var i = 0; i < this.args.length; i++) {
            this.args[i] = transformExpressionsInExpression(this.args[i], transform, flags);
        }
    };
    PureFunctionExpr.prototype.clone = function () {
        var _k, _l, _m, _o;
        var expr = new PureFunctionExpr((_l = (_k = this.body) === null || _k === void 0 ? void 0 : _k.clone()) !== null && _l !== void 0 ? _l : null, this.args.map(function (arg) { return arg.clone(); }));
        expr.fn = (_o = (_m = this.fn) === null || _m === void 0 ? void 0 : _m.clone()) !== null && _o !== void 0 ? _o : null;
        expr.varOffset = this.varOffset;
        return expr;
    };
    return PureFunctionExpr;
}(ExpressionBase));
exports.PureFunctionExpr = PureFunctionExpr;
_b = traits_1.ConsumesVarsTrait, _c = traits_1.UsesVarOffset;
var PureFunctionParameterExpr = (function (_super) {
    __extends(PureFunctionParameterExpr, _super);
    function PureFunctionParameterExpr(index) {
        var _this = _super.call(this) || this;
        _this.index = index;
        _this.kind = enums_1.ExpressionKind.PureFunctionParameterExpr;
        return _this;
    }
    PureFunctionParameterExpr.prototype.visitExpression = function () { };
    PureFunctionParameterExpr.prototype.isEquivalent = function (other) {
        return other instanceof PureFunctionParameterExpr && other.index === this.index;
    };
    PureFunctionParameterExpr.prototype.isConstant = function () {
        return true;
    };
    PureFunctionParameterExpr.prototype.transformInternalExpressions = function () { };
    PureFunctionParameterExpr.prototype.clone = function () {
        return new PureFunctionParameterExpr(this.index);
    };
    return PureFunctionParameterExpr;
}(ExpressionBase));
exports.PureFunctionParameterExpr = PureFunctionParameterExpr;
var PipeBindingExpr = (function (_super) {
    __extends(PipeBindingExpr, _super);
    function PipeBindingExpr(target, name, args) {
        var _this = _super.call(this) || this;
        _this.target = target;
        _this.name = name;
        _this.args = args;
        _this.kind = enums_1.ExpressionKind.PipeBinding;
        _this[_d] = true;
        _this[_e] = true;
        _this[_f] = true;
        _this.slot = null;
        _this.varOffset = null;
        return _this;
    }
    PipeBindingExpr.prototype.visitExpression = function (visitor, context) {
        var e_2, _k;
        try {
            for (var _l = __values(this.args), _m = _l.next(); !_m.done; _m = _l.next()) {
                var arg = _m.value;
                arg.visitExpression(visitor, context);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_k = _l.return)) _k.call(_l);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    PipeBindingExpr.prototype.isEquivalent = function () {
        return false;
    };
    PipeBindingExpr.prototype.isConstant = function () {
        return false;
    };
    PipeBindingExpr.prototype.transformInternalExpressions = function (transform, flags) {
        for (var idx = 0; idx < this.args.length; idx++) {
            this.args[idx] = transformExpressionsInExpression(this.args[idx], transform, flags);
        }
    };
    PipeBindingExpr.prototype.clone = function () {
        var r = new PipeBindingExpr(this.target, this.name, this.args.map(function (a) { return a.clone(); }));
        r.slot = this.slot;
        r.varOffset = this.varOffset;
        return r;
    };
    return PipeBindingExpr;
}(ExpressionBase));
exports.PipeBindingExpr = PipeBindingExpr;
_d = traits_1.UsesSlotIndex, _e = traits_1.ConsumesVarsTrait, _f = traits_1.UsesVarOffset;
var PipeBindingVariadicExpr = (function (_super) {
    __extends(PipeBindingVariadicExpr, _super);
    function PipeBindingVariadicExpr(target, name, args, numArgs) {
        var _this = _super.call(this) || this;
        _this.target = target;
        _this.name = name;
        _this.args = args;
        _this.numArgs = numArgs;
        _this.kind = enums_1.ExpressionKind.PipeBindingVariadic;
        _this[_g] = true;
        _this[_h] = true;
        _this[_j] = true;
        _this.slot = null;
        _this.varOffset = null;
        return _this;
    }
    PipeBindingVariadicExpr.prototype.visitExpression = function (visitor, context) {
        this.args.visitExpression(visitor, context);
    };
    PipeBindingVariadicExpr.prototype.isEquivalent = function () {
        return false;
    };
    PipeBindingVariadicExpr.prototype.isConstant = function () {
        return false;
    };
    PipeBindingVariadicExpr.prototype.transformInternalExpressions = function (transform, flags) {
        this.args = transformExpressionsInExpression(this.args, transform, flags);
    };
    PipeBindingVariadicExpr.prototype.clone = function () {
        var r = new PipeBindingVariadicExpr(this.target, this.name, this.args.clone(), this.numArgs);
        r.slot = this.slot;
        r.varOffset = this.varOffset;
        return r;
    };
    return PipeBindingVariadicExpr;
}(ExpressionBase));
exports.PipeBindingVariadicExpr = PipeBindingVariadicExpr;
_g = traits_1.UsesSlotIndex, _h = traits_1.ConsumesVarsTrait, _j = traits_1.UsesVarOffset;
var SafePropertyReadExpr = (function (_super) {
    __extends(SafePropertyReadExpr, _super);
    function SafePropertyReadExpr(receiver, name) {
        var _this = _super.call(this) || this;
        _this.receiver = receiver;
        _this.name = name;
        _this.kind = enums_1.ExpressionKind.SafePropertyRead;
        return _this;
    }
    Object.defineProperty(SafePropertyReadExpr.prototype, "index", {
        get: function () {
            return this.name;
        },
        enumerable: false,
        configurable: true
    });
    SafePropertyReadExpr.prototype.visitExpression = function (visitor, context) {
        this.receiver.visitExpression(visitor, context);
    };
    SafePropertyReadExpr.prototype.isEquivalent = function () {
        return false;
    };
    SafePropertyReadExpr.prototype.isConstant = function () {
        return false;
    };
    SafePropertyReadExpr.prototype.transformInternalExpressions = function (transform, flags) {
        this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);
    };
    SafePropertyReadExpr.prototype.clone = function () {
        return new SafePropertyReadExpr(this.receiver.clone(), this.name);
    };
    return SafePropertyReadExpr;
}(ExpressionBase));
exports.SafePropertyReadExpr = SafePropertyReadExpr;
var SafeKeyedReadExpr = (function (_super) {
    __extends(SafeKeyedReadExpr, _super);
    function SafeKeyedReadExpr(receiver, index) {
        var _this = _super.call(this) || this;
        _this.receiver = receiver;
        _this.index = index;
        _this.kind = enums_1.ExpressionKind.SafeKeyedRead;
        return _this;
    }
    SafeKeyedReadExpr.prototype.visitExpression = function (visitor, context) {
        this.receiver.visitExpression(visitor, context);
        this.index.visitExpression(visitor, context);
    };
    SafeKeyedReadExpr.prototype.isEquivalent = function () {
        return false;
    };
    SafeKeyedReadExpr.prototype.isConstant = function () {
        return false;
    };
    SafeKeyedReadExpr.prototype.transformInternalExpressions = function (transform, flags) {
        this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);
        this.index = transformExpressionsInExpression(this.index, transform, flags);
    };
    SafeKeyedReadExpr.prototype.clone = function () {
        return new SafeKeyedReadExpr(this.receiver.clone(), this.index.clone());
    };
    return SafeKeyedReadExpr;
}(ExpressionBase));
exports.SafeKeyedReadExpr = SafeKeyedReadExpr;
var SafeInvokeFunctionExpr = (function (_super) {
    __extends(SafeInvokeFunctionExpr, _super);
    function SafeInvokeFunctionExpr(receiver, args) {
        var _this = _super.call(this) || this;
        _this.receiver = receiver;
        _this.args = args;
        _this.kind = enums_1.ExpressionKind.SafeInvokeFunction;
        return _this;
    }
    SafeInvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
        var e_3, _k;
        this.receiver.visitExpression(visitor, context);
        try {
            for (var _l = __values(this.args), _m = _l.next(); !_m.done; _m = _l.next()) {
                var a = _m.value;
                a.visitExpression(visitor, context);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_k = _l.return)) _k.call(_l);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    SafeInvokeFunctionExpr.prototype.isEquivalent = function () {
        return false;
    };
    SafeInvokeFunctionExpr.prototype.isConstant = function () {
        return false;
    };
    SafeInvokeFunctionExpr.prototype.transformInternalExpressions = function (transform, flags) {
        this.receiver = transformExpressionsInExpression(this.receiver, transform, flags);
        for (var i = 0; i < this.args.length; i++) {
            this.args[i] = transformExpressionsInExpression(this.args[i], transform, flags);
        }
    };
    SafeInvokeFunctionExpr.prototype.clone = function () {
        return new SafeInvokeFunctionExpr(this.receiver.clone(), this.args.map(function (a) { return a.clone(); }));
    };
    return SafeInvokeFunctionExpr;
}(ExpressionBase));
exports.SafeInvokeFunctionExpr = SafeInvokeFunctionExpr;
var SafeTernaryExpr = (function (_super) {
    __extends(SafeTernaryExpr, _super);
    function SafeTernaryExpr(guard, expr) {
        var _this = _super.call(this) || this;
        _this.guard = guard;
        _this.expr = expr;
        _this.kind = enums_1.ExpressionKind.SafeTernaryExpr;
        return _this;
    }
    SafeTernaryExpr.prototype.visitExpression = function (visitor, context) {
        this.guard.visitExpression(visitor, context);
        this.expr.visitExpression(visitor, context);
    };
    SafeTernaryExpr.prototype.isEquivalent = function () {
        return false;
    };
    SafeTernaryExpr.prototype.isConstant = function () {
        return false;
    };
    SafeTernaryExpr.prototype.transformInternalExpressions = function (transform, flags) {
        this.guard = transformExpressionsInExpression(this.guard, transform, flags);
        this.expr = transformExpressionsInExpression(this.expr, transform, flags);
    };
    SafeTernaryExpr.prototype.clone = function () {
        return new SafeTernaryExpr(this.guard.clone(), this.expr.clone());
    };
    return SafeTernaryExpr;
}(ExpressionBase));
exports.SafeTernaryExpr = SafeTernaryExpr;
var EmptyExpr = (function (_super) {
    __extends(EmptyExpr, _super);
    function EmptyExpr() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.kind = enums_1.ExpressionKind.EmptyExpr;
        return _this;
    }
    EmptyExpr.prototype.visitExpression = function (visitor, context) { };
    EmptyExpr.prototype.isEquivalent = function (e) {
        return e instanceof EmptyExpr;
    };
    EmptyExpr.prototype.isConstant = function () {
        return true;
    };
    EmptyExpr.prototype.clone = function () {
        return new EmptyExpr();
    };
    EmptyExpr.prototype.transformInternalExpressions = function () { };
    return EmptyExpr;
}(ExpressionBase));
exports.EmptyExpr = EmptyExpr;
var AssignTemporaryExpr = (function (_super) {
    __extends(AssignTemporaryExpr, _super);
    function AssignTemporaryExpr(expr, xref) {
        var _this = _super.call(this) || this;
        _this.expr = expr;
        _this.xref = xref;
        _this.kind = enums_1.ExpressionKind.AssignTemporaryExpr;
        _this.name = null;
        return _this;
    }
    AssignTemporaryExpr.prototype.visitExpression = function (visitor, context) {
        this.expr.visitExpression(visitor, context);
    };
    AssignTemporaryExpr.prototype.isEquivalent = function () {
        return false;
    };
    AssignTemporaryExpr.prototype.isConstant = function () {
        return false;
    };
    AssignTemporaryExpr.prototype.transformInternalExpressions = function (transform, flags) {
        this.expr = transformExpressionsInExpression(this.expr, transform, flags);
    };
    AssignTemporaryExpr.prototype.clone = function () {
        var a = new AssignTemporaryExpr(this.expr.clone(), this.xref);
        a.name = this.name;
        return a;
    };
    return AssignTemporaryExpr;
}(ExpressionBase));
exports.AssignTemporaryExpr = AssignTemporaryExpr;
var ReadTemporaryExpr = (function (_super) {
    __extends(ReadTemporaryExpr, _super);
    function ReadTemporaryExpr(xref) {
        var _this = _super.call(this) || this;
        _this.xref = xref;
        _this.kind = enums_1.ExpressionKind.ReadTemporaryExpr;
        _this.name = null;
        return _this;
    }
    ReadTemporaryExpr.prototype.visitExpression = function (visitor, context) { };
    ReadTemporaryExpr.prototype.isEquivalent = function () {
        return this.xref === this.xref;
    };
    ReadTemporaryExpr.prototype.isConstant = function () {
        return false;
    };
    ReadTemporaryExpr.prototype.transformInternalExpressions = function (transform, flags) { };
    ReadTemporaryExpr.prototype.clone = function () {
        var r = new ReadTemporaryExpr(this.xref);
        r.name = this.name;
        return r;
    };
    return ReadTemporaryExpr;
}(ExpressionBase));
exports.ReadTemporaryExpr = ReadTemporaryExpr;
var SanitizerExpr = (function (_super) {
    __extends(SanitizerExpr, _super);
    function SanitizerExpr(fn) {
        var _this = _super.call(this) || this;
        _this.fn = fn;
        _this.kind = enums_1.ExpressionKind.SanitizerExpr;
        return _this;
    }
    SanitizerExpr.prototype.visitExpression = function (visitor, context) { };
    SanitizerExpr.prototype.isEquivalent = function (e) {
        return e instanceof SanitizerExpr && e.fn === this.fn;
    };
    SanitizerExpr.prototype.isConstant = function () {
        return true;
    };
    SanitizerExpr.prototype.clone = function () {
        return new SanitizerExpr(this.fn);
    };
    SanitizerExpr.prototype.transformInternalExpressions = function () { };
    return SanitizerExpr;
}(ExpressionBase));
exports.SanitizerExpr = SanitizerExpr;
function visitExpressionsInOp(op, visitor) {
    transformExpressionsInOp(op, function (expr, flags) {
        visitor(expr, flags);
        return expr;
    }, VisitorContextFlag.None);
}
exports.visitExpressionsInOp = visitExpressionsInOp;
var VisitorContextFlag;
(function (VisitorContextFlag) {
    VisitorContextFlag[VisitorContextFlag["None"] = 0] = "None";
    VisitorContextFlag[VisitorContextFlag["InChildOperation"] = 1] = "InChildOperation";
})(VisitorContextFlag = exports.VisitorContextFlag || (exports.VisitorContextFlag = {}));
function transformExpressionsInInterpolation(interpolation, transform, flags) {
    for (var i = 0; i < interpolation.expressions.length; i++) {
        interpolation.expressions[i] =
            transformExpressionsInExpression(interpolation.expressions[i], transform, flags);
    }
}
function transformExpressionsInOp(op, transform, flags) {
    var e_4, _k;
    switch (op.kind) {
        case enums_1.OpKind.StyleProp:
        case enums_1.OpKind.StyleMap:
        case enums_1.OpKind.ClassProp:
        case enums_1.OpKind.ClassMap:
        case enums_1.OpKind.Binding:
        case enums_1.OpKind.HostProperty:
            if (op.expression instanceof update_1.Interpolation) {
                transformExpressionsInInterpolation(op.expression, transform, flags);
            }
            else {
                op.expression = transformExpressionsInExpression(op.expression, transform, flags);
            }
            break;
        case enums_1.OpKind.Property:
        case enums_1.OpKind.Attribute:
            if (op.expression instanceof update_1.Interpolation) {
                transformExpressionsInInterpolation(op.expression, transform, flags);
            }
            else {
                op.expression = transformExpressionsInExpression(op.expression, transform, flags);
            }
            op.sanitizer =
                op.sanitizer && transformExpressionsInExpression(op.sanitizer, transform, flags);
            break;
        case enums_1.OpKind.InterpolateText:
            transformExpressionsInInterpolation(op.interpolation, transform, flags);
            break;
        case enums_1.OpKind.Statement:
            transformExpressionsInStatement(op.statement, transform, flags);
            break;
        case enums_1.OpKind.Variable:
            op.initializer = transformExpressionsInExpression(op.initializer, transform, flags);
            break;
        case enums_1.OpKind.Listener:
            try {
                for (var _l = __values(op.handlerOps), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var innerOp = _m.value;
                    transformExpressionsInOp(innerOp, transform, flags | VisitorContextFlag.InChildOperation);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_k = _l.return)) _k.call(_l);
                }
                finally { if (e_4) throw e_4.error; }
            }
            break;
        case enums_1.OpKind.ExtractedAttribute:
            op.expression =
                op.expression && transformExpressionsInExpression(op.expression, transform, flags);
            break;
        case enums_1.OpKind.Element:
        case enums_1.OpKind.ElementStart:
        case enums_1.OpKind.ElementEnd:
        case enums_1.OpKind.Container:
        case enums_1.OpKind.ContainerStart:
        case enums_1.OpKind.ContainerEnd:
        case enums_1.OpKind.Template:
        case enums_1.OpKind.DisableBindings:
        case enums_1.OpKind.EnableBindings:
        case enums_1.OpKind.Text:
        case enums_1.OpKind.Pipe:
        case enums_1.OpKind.Advance:
        case enums_1.OpKind.Namespace:
            break;
        default:
            throw new Error("AssertionError: transformExpressionsInOp doesn't handle ".concat(enums_1.OpKind[op.kind]));
    }
}
exports.transformExpressionsInOp = transformExpressionsInOp;
function transformExpressionsInExpression(expr, transform, flags) {
    if (expr instanceof ExpressionBase) {
        expr.transformInternalExpressions(transform, flags);
    }
    else if (expr instanceof o.BinaryOperatorExpr) {
        expr.lhs = transformExpressionsInExpression(expr.lhs, transform, flags);
        expr.rhs = transformExpressionsInExpression(expr.rhs, transform, flags);
    }
    else if (expr instanceof o.ReadPropExpr) {
        expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);
    }
    else if (expr instanceof o.ReadKeyExpr) {
        expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);
        expr.index = transformExpressionsInExpression(expr.index, transform, flags);
    }
    else if (expr instanceof o.WritePropExpr) {
        expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);
        expr.value = transformExpressionsInExpression(expr.value, transform, flags);
    }
    else if (expr instanceof o.WriteKeyExpr) {
        expr.receiver = transformExpressionsInExpression(expr.receiver, transform, flags);
        expr.index = transformExpressionsInExpression(expr.index, transform, flags);
        expr.value = transformExpressionsInExpression(expr.value, transform, flags);
    }
    else if (expr instanceof o.InvokeFunctionExpr) {
        expr.fn = transformExpressionsInExpression(expr.fn, transform, flags);
        for (var i = 0; i < expr.args.length; i++) {
            expr.args[i] = transformExpressionsInExpression(expr.args[i], transform, flags);
        }
    }
    else if (expr instanceof o.LiteralArrayExpr) {
        for (var i = 0; i < expr.entries.length; i++) {
            expr.entries[i] = transformExpressionsInExpression(expr.entries[i], transform, flags);
        }
    }
    else if (expr instanceof o.LiteralMapExpr) {
        for (var i = 0; i < expr.entries.length; i++) {
            expr.entries[i].value =
                transformExpressionsInExpression(expr.entries[i].value, transform, flags);
        }
    }
    else if (expr instanceof o.ConditionalExpr) {
        expr.condition = transformExpressionsInExpression(expr.condition, transform, flags);
        expr.trueCase = transformExpressionsInExpression(expr.trueCase, transform, flags);
        if (expr.falseCase !== null) {
            expr.falseCase = transformExpressionsInExpression(expr.falseCase, transform, flags);
        }
    }
    else if (expr instanceof o.ReadVarExpr || expr instanceof o.ExternalExpr ||
        expr instanceof o.LiteralExpr) {
    }
    else {
        throw new Error("Unhandled expression kind: ".concat(expr.constructor.name));
    }
    return transform(expr, flags);
}
exports.transformExpressionsInExpression = transformExpressionsInExpression;
function transformExpressionsInStatement(stmt, transform, flags) {
    if (stmt instanceof o.ExpressionStatement) {
        stmt.expr = transformExpressionsInExpression(stmt.expr, transform, flags);
    }
    else if (stmt instanceof o.ReturnStatement) {
        stmt.value = transformExpressionsInExpression(stmt.value, transform, flags);
    }
    else if (stmt instanceof o.DeclareVarStmt) {
        if (stmt.value !== undefined) {
            stmt.value = transformExpressionsInExpression(stmt.value, transform, flags);
        }
    }
    else {
        throw new Error("Unhandled statement kind: ".concat(stmt.constructor.name));
    }
}
exports.transformExpressionsInStatement = transformExpressionsInStatement;
function isStringLiteral(expr) {
    return expr instanceof o.LiteralExpr && typeof expr.value === 'string';
}
exports.isStringLiteral = isStringLiteral;
