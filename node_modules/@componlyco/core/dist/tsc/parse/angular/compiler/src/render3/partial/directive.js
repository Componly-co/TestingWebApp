"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDirectiveDefinitionMap = exports.compileDeclareDirectiveFromMetadata = void 0;
var o = __importStar(require("../../output/output_ast"));
var r3_identifiers_1 = require("../r3_identifiers");
var util_1 = require("../util");
var compiler_1 = require("../view/compiler");
var util_2 = require("../view/util");
var util_3 = require("./util");
var MINIMUM_PARTIAL_LINKER_VERSION = '16.1.0';
function compileDeclareDirectiveFromMetadata(meta) {
    var definitionMap = createDirectiveDefinitionMap(meta);
    var expression = o.importExpr(r3_identifiers_1.Identifiers.declareDirective).callFn([definitionMap.toLiteralMap()]);
    var type = (0, compiler_1.createDirectiveType)(meta);
    return { expression: expression, type: type, statements: [] };
}
exports.compileDeclareDirectiveFromMetadata = compileDeclareDirectiveFromMetadata;
function createDirectiveDefinitionMap(meta) {
    var _a;
    var definitionMap = new util_2.DefinitionMap();
    var hasTransformFunctions = Object.values(meta.inputs).some(function (input) { return input.transformFunction !== null; });
    var minVersion = hasTransformFunctions ? MINIMUM_PARTIAL_LINKER_VERSION : '14.0.0';
    definitionMap.set('minVersion', o.literal(minVersion));
    definitionMap.set('version', o.literal('0.0.0-PLACEHOLDER'));
    definitionMap.set('type', meta.type.value);
    if (meta.isStandalone) {
        definitionMap.set('isStandalone', o.literal(meta.isStandalone));
    }
    if (meta.isSignal) {
        definitionMap.set('isSignal', o.literal(meta.isSignal));
    }
    if (meta.selector !== null) {
        definitionMap.set('selector', o.literal(meta.selector));
    }
    definitionMap.set('inputs', (0, util_2.conditionallyCreateDirectiveBindingLiteral)(meta.inputs, true));
    definitionMap.set('outputs', (0, util_2.conditionallyCreateDirectiveBindingLiteral)(meta.outputs));
    definitionMap.set('host', compileHostMetadata(meta.host));
    definitionMap.set('providers', meta.providers);
    if (meta.queries.length > 0) {
        definitionMap.set('queries', o.literalArr(meta.queries.map(compileQuery)));
    }
    if (meta.viewQueries.length > 0) {
        definitionMap.set('viewQueries', o.literalArr(meta.viewQueries.map(compileQuery)));
    }
    if (meta.exportAs !== null) {
        definitionMap.set('exportAs', (0, util_2.asLiteral)(meta.exportAs));
    }
    if (meta.usesInheritance) {
        definitionMap.set('usesInheritance', o.literal(true));
    }
    if (meta.lifecycle.usesOnChanges) {
        definitionMap.set('usesOnChanges', o.literal(true));
    }
    if ((_a = meta.hostDirectives) === null || _a === void 0 ? void 0 : _a.length) {
        definitionMap.set('hostDirectives', createHostDirectives(meta.hostDirectives));
    }
    definitionMap.set('ngImport', o.importExpr(r3_identifiers_1.Identifiers.core));
    return definitionMap;
}
exports.createDirectiveDefinitionMap = createDirectiveDefinitionMap;
function compileQuery(query) {
    var meta = new util_2.DefinitionMap();
    meta.set('propertyName', o.literal(query.propertyName));
    if (query.first) {
        meta.set('first', o.literal(true));
    }
    meta.set('predicate', Array.isArray(query.predicate) ? (0, util_2.asLiteral)(query.predicate) :
        (0, util_1.convertFromMaybeForwardRefExpression)(query.predicate));
    if (!query.emitDistinctChangesOnly) {
        meta.set('emitDistinctChangesOnly', o.literal(false));
    }
    else {
    }
    if (query.descendants) {
        meta.set('descendants', o.literal(true));
    }
    meta.set('read', query.read);
    if (query.static) {
        meta.set('static', o.literal(true));
    }
    return meta.toLiteralMap();
}
function compileHostMetadata(meta) {
    var hostMetadata = new util_2.DefinitionMap();
    hostMetadata.set('attributes', (0, util_3.toOptionalLiteralMap)(meta.attributes, function (expression) { return expression; }));
    hostMetadata.set('listeners', (0, util_3.toOptionalLiteralMap)(meta.listeners, o.literal));
    hostMetadata.set('properties', (0, util_3.toOptionalLiteralMap)(meta.properties, o.literal));
    if (meta.specialAttributes.styleAttr) {
        hostMetadata.set('styleAttribute', o.literal(meta.specialAttributes.styleAttr));
    }
    if (meta.specialAttributes.classAttr) {
        hostMetadata.set('classAttribute', o.literal(meta.specialAttributes.classAttr));
    }
    if (hostMetadata.values.length > 0) {
        return hostMetadata.toLiteralMap();
    }
    else {
        return null;
    }
}
function createHostDirectives(hostDirectives) {
    var expressions = hostDirectives.map(function (current) {
        var keys = [{
                key: 'directive',
                value: current.isForwardReference ? (0, util_1.generateForwardRef)(current.directive.type) :
                    current.directive.type,
                quoted: false
            }];
        var inputsLiteral = current.inputs ? (0, compiler_1.createHostDirectivesMappingArray)(current.inputs) : null;
        var outputsLiteral = current.outputs ? (0, compiler_1.createHostDirectivesMappingArray)(current.outputs) : null;
        if (inputsLiteral) {
            keys.push({ key: 'inputs', value: inputsLiteral, quoted: false });
        }
        if (outputsLiteral) {
            keys.push({ key: 'outputs', value: outputsLiteral, quoted: false });
        }
        return o.literalMap(keys);
    });
    return o.literalArr(expressions);
}
