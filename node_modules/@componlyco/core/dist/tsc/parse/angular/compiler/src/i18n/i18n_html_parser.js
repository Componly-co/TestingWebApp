"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.I18NHtmlParser = void 0;
var core_1 = require("../core");
var interpolation_config_1 = require("../ml_parser/interpolation_config");
var parser_1 = require("../ml_parser/parser");
var digest_1 = require("./digest");
var extractor_merger_1 = require("./extractor_merger");
var xliff_1 = require("./serializers/xliff");
var xliff2_1 = require("./serializers/xliff2");
var xmb_1 = require("./serializers/xmb");
var xtb_1 = require("./serializers/xtb");
var translation_bundle_1 = require("./translation_bundle");
var I18NHtmlParser = (function () {
    function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {
        if (missingTranslation === void 0) { missingTranslation = core_1.MissingTranslationStrategy.Warning; }
        this._htmlParser = _htmlParser;
        if (translations) {
            var serializer = createSerializer(translationsFormat);
            this._translationBundle =
                translation_bundle_1.TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);
        }
        else {
            this._translationBundle =
                new translation_bundle_1.TranslationBundle({}, null, digest_1.digest, undefined, missingTranslation, console);
        }
    }
    I18NHtmlParser.prototype.parse = function (source, url, options) {
        if (options === void 0) { options = {}; }
        var interpolationConfig = options.interpolationConfig || interpolation_config_1.DEFAULT_INTERPOLATION_CONFIG;
        var parseResult = this._htmlParser.parse(source, url, __assign({ interpolationConfig: interpolationConfig }, options));
        if (parseResult.errors.length) {
            return new parser_1.ParseTreeResult(parseResult.rootNodes, parseResult.errors);
        }
        return (0, extractor_merger_1.mergeTranslations)(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
    };
    return I18NHtmlParser;
}());
exports.I18NHtmlParser = I18NHtmlParser;
function createSerializer(format) {
    format = (format || 'xlf').toLowerCase();
    switch (format) {
        case 'xmb':
            return new xmb_1.Xmb();
        case 'xtb':
            return new xtb_1.Xtb();
        case 'xliff2':
        case 'xlf2':
            return new xliff2_1.Xliff2();
        case 'xliff':
        case 'xlf':
        default:
            return new xliff_1.Xliff();
    }
}
