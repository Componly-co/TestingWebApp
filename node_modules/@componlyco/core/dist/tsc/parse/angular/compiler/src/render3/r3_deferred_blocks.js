"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDeferredBlock = exports.SecondaryDeferredBlockType = void 0;
var html = __importStar(require("../ml_parser/ast"));
var parse_util_1 = require("../parse_util");
var t = __importStar(require("./r3_ast"));
var r3_deferred_triggers_1 = require("./r3_deferred_triggers");
var PREFETCH_WHEN_PATTERN = /^prefetch\s+when\s/;
var PREFETCH_ON_PATTERN = /^prefetch\s+on\s/;
var MINIMUM_PARAMETER_PATTERN = /^minimum\s/;
var AFTER_PARAMETER_PATTERN = /^after\s/;
var WHEN_PARAMETER_PATTERN = /^when\s/;
var ON_PARAMETER_PATTERN = /^on\s/;
var SecondaryDeferredBlockType;
(function (SecondaryDeferredBlockType) {
    SecondaryDeferredBlockType["PLACEHOLDER"] = "placeholder";
    SecondaryDeferredBlockType["LOADING"] = "loading";
    SecondaryDeferredBlockType["ERROR"] = "error";
})(SecondaryDeferredBlockType = exports.SecondaryDeferredBlockType || (exports.SecondaryDeferredBlockType = {}));
function createDeferredBlock(ast, visitor, bindingParser) {
    var errors = [];
    var _a = __read(ast.blocks), primaryBlock = _a[0], secondaryBlocks = _a.slice(1);
    var _b = parsePrimaryTriggers(primaryBlock.parameters, bindingParser, errors), triggers = _b.triggers, prefetchTriggers = _b.prefetchTriggers;
    var _c = parseSecondaryBlocks(secondaryBlocks, errors, visitor), placeholder = _c.placeholder, loading = _c.loading, error = _c.error;
    return {
        node: new t.DeferredBlock(html.visitAll(visitor, primaryBlock.children), triggers, prefetchTriggers, placeholder, loading, error, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan),
        errors: errors,
    };
}
exports.createDeferredBlock = createDeferredBlock;
function parseSecondaryBlocks(blocks, errors, visitor) {
    var e_1, _a;
    var placeholder = null;
    var loading = null;
    var error = null;
    try {
        for (var blocks_1 = __values(blocks), blocks_1_1 = blocks_1.next(); !blocks_1_1.done; blocks_1_1 = blocks_1.next()) {
            var block = blocks_1_1.value;
            try {
                switch (block.name) {
                    case SecondaryDeferredBlockType.PLACEHOLDER:
                        if (placeholder !== null) {
                            errors.push(new parse_util_1.ParseError(block.startSourceSpan, "\"defer\" block can only have one \"".concat(SecondaryDeferredBlockType.PLACEHOLDER, "\" block")));
                        }
                        else {
                            placeholder = parsePlaceholderBlock(block, visitor);
                        }
                        break;
                    case SecondaryDeferredBlockType.LOADING:
                        if (loading !== null) {
                            errors.push(new parse_util_1.ParseError(block.startSourceSpan, "\"defer\" block can only have one \"".concat(SecondaryDeferredBlockType.LOADING, "\" block")));
                        }
                        else {
                            loading = parseLoadingBlock(block, visitor);
                        }
                        break;
                    case SecondaryDeferredBlockType.ERROR:
                        if (error !== null) {
                            errors.push(new parse_util_1.ParseError(block.startSourceSpan, "\"defer\" block can only have one \"".concat(SecondaryDeferredBlockType.ERROR, "\" block")));
                        }
                        else {
                            error = parseErrorBlock(block, visitor);
                        }
                        break;
                    default:
                        errors.push(new parse_util_1.ParseError(block.startSourceSpan, "Unrecognized block \"".concat(block.name, "\"")));
                        break;
                }
            }
            catch (e) {
                errors.push(new parse_util_1.ParseError(block.startSourceSpan, e.message));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (blocks_1_1 && !blocks_1_1.done && (_a = blocks_1.return)) _a.call(blocks_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return { placeholder: placeholder, loading: loading, error: error };
}
function parsePlaceholderBlock(ast, visitor) {
    var e_2, _a;
    var minimumTime = null;
    try {
        for (var _b = __values(ast.parameters), _c = _b.next(); !_c.done; _c = _b.next()) {
            var param = _c.value;
            if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {
                if (minimumTime != null) {
                    throw new Error("Placeholder block can only have one \"minimum\" parameter");
                }
                var parsedTime = (0, r3_deferred_triggers_1.parseDeferredTime)(param.expression.slice((0, r3_deferred_triggers_1.getTriggerParametersStart)(param.expression)));
                if (parsedTime === null) {
                    throw new Error("Could not parse time value of parameter \"minimum\"");
                }
                minimumTime = parsedTime;
            }
            else {
                throw new Error("Unrecognized parameter in \"".concat(SecondaryDeferredBlockType.PLACEHOLDER, "\" block: \"").concat(param.expression, "\""));
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return new t.DeferredBlockPlaceholder(html.visitAll(visitor, ast.children), minimumTime, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);
}
function parseLoadingBlock(ast, visitor) {
    var e_3, _a;
    var afterTime = null;
    var minimumTime = null;
    try {
        for (var _b = __values(ast.parameters), _c = _b.next(); !_c.done; _c = _b.next()) {
            var param = _c.value;
            if (AFTER_PARAMETER_PATTERN.test(param.expression)) {
                if (afterTime != null) {
                    throw new Error("Loading block can only have one \"after\" parameter");
                }
                var parsedTime = (0, r3_deferred_triggers_1.parseDeferredTime)(param.expression.slice((0, r3_deferred_triggers_1.getTriggerParametersStart)(param.expression)));
                if (parsedTime === null) {
                    throw new Error("Could not parse time value of parameter \"after\"");
                }
                afterTime = parsedTime;
            }
            else if (MINIMUM_PARAMETER_PATTERN.test(param.expression)) {
                if (minimumTime != null) {
                    throw new Error("Loading block can only have one \"minimum\" parameter");
                }
                var parsedTime = (0, r3_deferred_triggers_1.parseDeferredTime)(param.expression.slice((0, r3_deferred_triggers_1.getTriggerParametersStart)(param.expression)));
                if (parsedTime === null) {
                    throw new Error("Could not parse time value of parameter \"minimum\"");
                }
                minimumTime = parsedTime;
            }
            else {
                throw new Error("Unrecognized parameter in \"".concat(SecondaryDeferredBlockType.LOADING, "\" block: \"").concat(param.expression, "\""));
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return new t.DeferredBlockLoading(html.visitAll(visitor, ast.children), afterTime, minimumTime, ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);
}
function parseErrorBlock(ast, visitor) {
    if (ast.parameters.length > 0) {
        throw new Error("\"".concat(SecondaryDeferredBlockType.ERROR, "\" block cannot have parameters"));
    }
    return new t.DeferredBlockError(html.visitAll(visitor, ast.children), ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);
}
function parsePrimaryTriggers(params, bindingParser, errors) {
    var e_4, _a;
    var triggers = {};
    var prefetchTriggers = {};
    try {
        for (var params_1 = __values(params), params_1_1 = params_1.next(); !params_1_1.done; params_1_1 = params_1.next()) {
            var param = params_1_1.value;
            if (WHEN_PARAMETER_PATTERN.test(param.expression)) {
                (0, r3_deferred_triggers_1.parseWhenTrigger)(param, bindingParser, triggers, errors);
            }
            else if (ON_PARAMETER_PATTERN.test(param.expression)) {
                (0, r3_deferred_triggers_1.parseOnTrigger)(param, triggers, errors);
            }
            else if (PREFETCH_WHEN_PATTERN.test(param.expression)) {
                (0, r3_deferred_triggers_1.parseWhenTrigger)(param, bindingParser, prefetchTriggers, errors);
            }
            else if (PREFETCH_ON_PATTERN.test(param.expression)) {
                (0, r3_deferred_triggers_1.parseOnTrigger)(param, prefetchTriggers, errors);
            }
            else {
                errors.push(new parse_util_1.ParseError(param.sourceSpan, 'Unrecognized trigger'));
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (params_1_1 && !params_1_1.done && (_a = params_1.return)) _a.call(params_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return { triggers: triggers, prefetchTriggers: prefetchTriggers };
}
