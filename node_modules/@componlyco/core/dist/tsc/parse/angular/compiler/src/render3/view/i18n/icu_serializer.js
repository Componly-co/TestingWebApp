"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeIcuNode = void 0;
var util_1 = require("./util");
var IcuSerializerVisitor = (function () {
    function IcuSerializerVisitor() {
    }
    IcuSerializerVisitor.prototype.visitText = function (text) {
        return text.value;
    };
    IcuSerializerVisitor.prototype.visitContainer = function (container) {
        var _this = this;
        return container.children.map(function (child) { return child.visit(_this); }).join('');
    };
    IcuSerializerVisitor.prototype.visitIcu = function (icu) {
        var _this = this;
        var strCases = Object.keys(icu.cases).map(function (k) { return "".concat(k, " {").concat(icu.cases[k].visit(_this), "}"); });
        var result = "{".concat(icu.expressionPlaceholder, ", ").concat(icu.type, ", ").concat(strCases.join(' '), "}");
        return result;
    };
    IcuSerializerVisitor.prototype.visitTagPlaceholder = function (ph) {
        var _this = this;
        return ph.isVoid ?
            this.formatPh(ph.startName) :
            "".concat(this.formatPh(ph.startName)).concat(ph.children.map(function (child) { return child.visit(_this); }).join('')).concat(this.formatPh(ph.closeName));
    };
    IcuSerializerVisitor.prototype.visitPlaceholder = function (ph) {
        return this.formatPh(ph.name);
    };
    IcuSerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
        return this.formatPh(ph.name);
    };
    IcuSerializerVisitor.prototype.formatPh = function (value) {
        return "{".concat((0, util_1.formatI18nPlaceholderName)(value, false), "}");
    };
    return IcuSerializerVisitor;
}());
var serializer = new IcuSerializerVisitor();
function serializeIcuNode(icu) {
    return icu.visit(serializer);
}
exports.serializeIcuNode = serializeIcuNode;
