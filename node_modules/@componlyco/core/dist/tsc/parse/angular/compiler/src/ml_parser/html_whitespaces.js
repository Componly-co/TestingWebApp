"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeWhitespaces = exports.WhitespaceVisitor = exports.replaceNgsp = exports.PRESERVE_WS_ATTR_NAME = void 0;
var html = __importStar(require("./ast"));
var entities_1 = require("./entities");
var parser_1 = require("./parser");
exports.PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';
var SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);
var WS_CHARS = ' \f\n\r\t\v\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff';
var NO_WS_REGEXP = new RegExp("[^".concat(WS_CHARS, "]"));
var WS_REPLACE_REGEXP = new RegExp("[".concat(WS_CHARS, "]{2,}"), 'g');
function hasPreserveWhitespacesAttr(attrs) {
    return attrs.some(function (attr) { return attr.name === exports.PRESERVE_WS_ATTR_NAME; });
}
function replaceNgsp(value) {
    return value.replace(new RegExp(entities_1.NGSP_UNICODE, 'g'), ' ');
}
exports.replaceNgsp = replaceNgsp;
var WhitespaceVisitor = (function () {
    function WhitespaceVisitor() {
    }
    WhitespaceVisitor.prototype.visitElement = function (element, context) {
        if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {
            return new html.Element(element.name, html.visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
        }
        return new html.Element(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
    };
    WhitespaceVisitor.prototype.visitAttribute = function (attribute, context) {
        return attribute.name !== exports.PRESERVE_WS_ATTR_NAME ? attribute : null;
    };
    WhitespaceVisitor.prototype.visitText = function (text, context) {
        var isNotBlank = text.value.match(NO_WS_REGEXP);
        var hasExpansionSibling = context &&
            (context.prev instanceof html.Expansion || context.next instanceof html.Expansion);
        if (isNotBlank || hasExpansionSibling) {
            var tokens = text.tokens.map(function (token) {
                return token.type === 5 ? createWhitespaceProcessedTextToken(token) : token;
            });
            var value = processWhitespace(text.value);
            return new html.Text(value, text.sourceSpan, tokens, text.i18n);
        }
        return null;
    };
    WhitespaceVisitor.prototype.visitComment = function (comment, context) {
        return comment;
    };
    WhitespaceVisitor.prototype.visitExpansion = function (expansion, context) {
        return expansion;
    };
    WhitespaceVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
        return expansionCase;
    };
    WhitespaceVisitor.prototype.visitBlockGroup = function (group, context) {
        return new html.BlockGroup(visitAllWithSiblings(this, group.blocks), group.sourceSpan, group.startSourceSpan, group.endSourceSpan);
    };
    WhitespaceVisitor.prototype.visitBlock = function (block, context) {
        return new html.Block(block.name, block.parameters, visitAllWithSiblings(this, block.children), block.sourceSpan, block.startSourceSpan);
    };
    WhitespaceVisitor.prototype.visitBlockParameter = function (parameter, context) {
        return parameter;
    };
    return WhitespaceVisitor;
}());
exports.WhitespaceVisitor = WhitespaceVisitor;
function createWhitespaceProcessedTextToken(_a) {
    var type = _a.type, parts = _a.parts, sourceSpan = _a.sourceSpan;
    return { type: type, parts: [processWhitespace(parts[0])], sourceSpan: sourceSpan };
}
function processWhitespace(text) {
    return replaceNgsp(text).replace(WS_REPLACE_REGEXP, ' ');
}
function removeWhitespaces(htmlAstWithErrors) {
    return new parser_1.ParseTreeResult(html.visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);
}
exports.removeWhitespaces = removeWhitespaces;
function visitAllWithSiblings(visitor, nodes) {
    var result = [];
    nodes.forEach(function (ast, i) {
        var context = { prev: nodes[i - 1], next: nodes[i + 1] };
        var astResult = ast.visit(visitor, context);
        if (astResult) {
            result.push(astResult);
        }
    });
    return result;
}
