"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newTrustedFunctionForJIT = void 0;
var util_1 = require("../util");
var policy;
function getPolicy() {
    if (policy === undefined) {
        policy = null;
        if (util_1.global.trustedTypes) {
            try {
                policy =
                    util_1.global.trustedTypes.createPolicy('angular#unsafe-jit', {
                        createScript: function (s) { return s; },
                    });
            }
            catch (_a) {
            }
        }
    }
    return policy;
}
function trustedScriptFromString(script) {
    var _a;
    return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;
}
function newTrustedFunctionForJIT() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (!util_1.global.trustedTypes) {
        return new (Function.bind.apply(Function, __spreadArray([void 0], __read(args), false)))();
    }
    var fnArgs = args.slice(0, -1).join(',');
    var fnBody = args[args.length - 1];
    var body = "(function anonymous(".concat(fnArgs, "\n) { ").concat(fnBody, "\n})");
    var fn = util_1.global['eval'](trustedScriptFromString(body));
    if (fn.bind === undefined) {
        return new (Function.bind.apply(Function, __spreadArray([void 0], __read(args), false)))();
    }
    fn.toString = function () { return body; };
    return fn.bind(util_1.global);
}
exports.newTrustedFunctionForJIT = newTrustedFunctionForJIT;
