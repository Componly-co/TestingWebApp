"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseProperty = exports.StylingBuilder = exports.MIN_STYLING_BINDING_SLOTS_REQUIRED = void 0;
var ast_1 = require("../../expression_parser/ast");
var o = __importStar(require("../../output/output_ast"));
var r3_identifiers_1 = require("../r3_identifiers");
var style_parser_1 = require("./style_parser");
var util_1 = require("./util");
var IMPORTANT_FLAG = '!important';
exports.MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;
var StylingBuilder = (function () {
    function StylingBuilder(_directiveExpr) {
        this._directiveExpr = _directiveExpr;
        this._hasInitialValues = false;
        this.hasBindings = false;
        this.hasBindingsWithPipes = false;
        this._classMapInput = null;
        this._styleMapInput = null;
        this._singleStyleInputs = null;
        this._singleClassInputs = null;
        this._lastStylingInput = null;
        this._firstStylingInput = null;
        this._stylesIndex = new Map();
        this._classesIndex = new Map();
        this._initialStyleValues = [];
        this._initialClassValues = [];
    }
    StylingBuilder.prototype.registerBoundInput = function (input) {
        var binding = null;
        var name = input.name;
        switch (input.type) {
            case 0:
                binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);
                break;
            case 3:
                binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);
                break;
            case 2:
                binding = this.registerClassInput(name, false, input.value, input.sourceSpan);
                break;
        }
        return binding ? true : false;
    };
    StylingBuilder.prototype.registerInputBasedOnName = function (name, expression, sourceSpan) {
        var binding = null;
        var prefix = name.substring(0, 6);
        var isStyle = name === 'style' || prefix === 'style.' || prefix === 'style!';
        var isClass = !isStyle && (name === 'class' || prefix === 'class.' || prefix === 'class!');
        if (isStyle || isClass) {
            var isMapBased = name.charAt(5) !== '.';
            var property = name.slice(isMapBased ? 5 : 6);
            if (isStyle) {
                binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);
            }
            else {
                binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);
            }
        }
        return binding;
    };
    StylingBuilder.prototype.registerStyleInput = function (name, isMapBased, value, sourceSpan, suffix) {
        if (isEmptyExpression(value)) {
            return null;
        }
        if (!isCssCustomProperty(name)) {
            name = (0, style_parser_1.hyphenate)(name);
        }
        var _a = parseProperty(name), property = _a.property, hasOverrideFlag = _a.hasOverrideFlag, bindingSuffix = _a.suffix;
        suffix = typeof suffix === 'string' && suffix.length !== 0 ? suffix : bindingSuffix;
        var entry = { name: property, suffix: suffix, value: value, sourceSpan: sourceSpan, hasOverrideFlag: hasOverrideFlag };
        if (isMapBased) {
            this._styleMapInput = entry;
        }
        else {
            (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);
            registerIntoMap(this._stylesIndex, property);
        }
        this._lastStylingInput = entry;
        this._firstStylingInput = this._firstStylingInput || entry;
        this._checkForPipes(value);
        this.hasBindings = true;
        return entry;
    };
    StylingBuilder.prototype.registerClassInput = function (name, isMapBased, value, sourceSpan) {
        if (isEmptyExpression(value)) {
            return null;
        }
        var _a = parseProperty(name), property = _a.property, hasOverrideFlag = _a.hasOverrideFlag;
        var entry = { name: property, value: value, sourceSpan: sourceSpan, hasOverrideFlag: hasOverrideFlag, suffix: null };
        if (isMapBased) {
            this._classMapInput = entry;
        }
        else {
            (this._singleClassInputs = this._singleClassInputs || []).push(entry);
            registerIntoMap(this._classesIndex, property);
        }
        this._lastStylingInput = entry;
        this._firstStylingInput = this._firstStylingInput || entry;
        this._checkForPipes(value);
        this.hasBindings = true;
        return entry;
    };
    StylingBuilder.prototype._checkForPipes = function (value) {
        if ((value instanceof ast_1.ASTWithSource) && (value.ast instanceof ast_1.BindingPipe)) {
            this.hasBindingsWithPipes = true;
        }
    };
    StylingBuilder.prototype.registerStyleAttr = function (value) {
        this._initialStyleValues = (0, style_parser_1.parse)(value);
        this._hasInitialValues = true;
    };
    StylingBuilder.prototype.registerClassAttr = function (value) {
        this._initialClassValues = value.trim().split(/\s+/g);
        this._hasInitialValues = true;
    };
    StylingBuilder.prototype.populateInitialStylingAttrs = function (attrs) {
        if (this._initialClassValues.length) {
            attrs.push(o.literal(1));
            for (var i = 0; i < this._initialClassValues.length; i++) {
                attrs.push(o.literal(this._initialClassValues[i]));
            }
        }
        if (this._initialStyleValues.length) {
            attrs.push(o.literal(2));
            for (var i = 0; i < this._initialStyleValues.length; i += 2) {
                attrs.push(o.literal(this._initialStyleValues[i]), o.literal(this._initialStyleValues[i + 1]));
            }
        }
    };
    StylingBuilder.prototype.assignHostAttrs = function (attrs, definitionMap) {
        if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {
            this.populateInitialStylingAttrs(attrs);
            definitionMap.set('hostAttrs', o.literalArr(attrs));
        }
    };
    StylingBuilder.prototype.buildClassMapInstruction = function (valueConverter) {
        if (this._classMapInput) {
            return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);
        }
        return null;
    };
    StylingBuilder.prototype.buildStyleMapInstruction = function (valueConverter) {
        if (this._styleMapInput) {
            return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);
        }
        return null;
    };
    StylingBuilder.prototype._buildMapBasedInstruction = function (valueConverter, isClassBased, stylingInput) {
        var totalBindingSlotsRequired = exports.MIN_STYLING_BINDING_SLOTS_REQUIRED;
        var mapValue = stylingInput.value.visit(valueConverter);
        var reference;
        if (mapValue instanceof ast_1.Interpolation) {
            totalBindingSlotsRequired += mapValue.expressions.length;
            reference = isClassBased ? getClassMapInterpolationExpression(mapValue) :
                getStyleMapInterpolationExpression(mapValue);
        }
        else {
            reference = isClassBased ? r3_identifiers_1.Identifiers.classMap : r3_identifiers_1.Identifiers.styleMap;
        }
        return {
            reference: reference,
            calls: [{
                    supportsInterpolation: true,
                    sourceSpan: stylingInput.sourceSpan,
                    allocateBindingSlots: totalBindingSlotsRequired,
                    params: function (convertFn) {
                        var convertResult = convertFn(mapValue);
                        var params = Array.isArray(convertResult) ? convertResult : [convertResult];
                        return params;
                    }
                }]
        };
    };
    StylingBuilder.prototype._buildSingleInputs = function (reference, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {
        var instructions = [];
        inputs.forEach(function (input) {
            var previousInstruction = instructions[instructions.length - 1];
            var value = input.value.visit(valueConverter);
            var referenceForCall = reference;
            var totalBindingSlotsRequired = exports.MIN_STYLING_BINDING_SLOTS_REQUIRED;
            if (value instanceof ast_1.Interpolation) {
                totalBindingSlotsRequired += value.expressions.length;
                if (getInterpolationExpressionFn) {
                    referenceForCall = getInterpolationExpressionFn(value);
                }
            }
            var call = {
                sourceSpan: input.sourceSpan,
                allocateBindingSlots: totalBindingSlotsRequired,
                supportsInterpolation: !!getInterpolationExpressionFn,
                params: function (convertFn) {
                    var params = [];
                    params.push(o.literal(input.name));
                    var convertResult = convertFn(value);
                    if (Array.isArray(convertResult)) {
                        params.push.apply(params, __spreadArray([], __read(convertResult), false));
                    }
                    else {
                        params.push(convertResult);
                    }
                    if (!isClassBased && input.suffix !== null) {
                        params.push(o.literal(input.suffix));
                    }
                    return params;
                }
            };
            if (previousInstruction && previousInstruction.reference === referenceForCall) {
                previousInstruction.calls.push(call);
            }
            else {
                instructions.push({ reference: referenceForCall, calls: [call] });
            }
        });
        return instructions;
    };
    StylingBuilder.prototype._buildClassInputs = function (valueConverter) {
        if (this._singleClassInputs) {
            return this._buildSingleInputs(r3_identifiers_1.Identifiers.classProp, this._singleClassInputs, valueConverter, null, true);
        }
        return [];
    };
    StylingBuilder.prototype._buildStyleInputs = function (valueConverter) {
        if (this._singleStyleInputs) {
            return this._buildSingleInputs(r3_identifiers_1.Identifiers.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);
        }
        return [];
    };
    StylingBuilder.prototype.buildUpdateLevelInstructions = function (valueConverter) {
        var instructions = [];
        if (this.hasBindings) {
            var styleMapInstruction = this.buildStyleMapInstruction(valueConverter);
            if (styleMapInstruction) {
                instructions.push(styleMapInstruction);
            }
            var classMapInstruction = this.buildClassMapInstruction(valueConverter);
            if (classMapInstruction) {
                instructions.push(classMapInstruction);
            }
            instructions.push.apply(instructions, __spreadArray([], __read(this._buildStyleInputs(valueConverter)), false));
            instructions.push.apply(instructions, __spreadArray([], __read(this._buildClassInputs(valueConverter)), false));
        }
        return instructions;
    };
    return StylingBuilder;
}());
exports.StylingBuilder = StylingBuilder;
function registerIntoMap(map, key) {
    if (!map.has(key)) {
        map.set(key, map.size);
    }
}
function parseProperty(name) {
    var hasOverrideFlag = false;
    var overrideIndex = name.indexOf(IMPORTANT_FLAG);
    if (overrideIndex !== -1) {
        name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';
        hasOverrideFlag = true;
    }
    var suffix = null;
    var property = name;
    var unitIndex = name.lastIndexOf('.');
    if (unitIndex > 0) {
        suffix = name.slice(unitIndex + 1);
        property = name.substring(0, unitIndex);
    }
    return { property: property, suffix: suffix, hasOverrideFlag: hasOverrideFlag };
}
exports.parseProperty = parseProperty;
function getClassMapInterpolationExpression(interpolation) {
    switch ((0, util_1.getInterpolationArgsLength)(interpolation)) {
        case 1:
            return r3_identifiers_1.Identifiers.classMap;
        case 3:
            return r3_identifiers_1.Identifiers.classMapInterpolate1;
        case 5:
            return r3_identifiers_1.Identifiers.classMapInterpolate2;
        case 7:
            return r3_identifiers_1.Identifiers.classMapInterpolate3;
        case 9:
            return r3_identifiers_1.Identifiers.classMapInterpolate4;
        case 11:
            return r3_identifiers_1.Identifiers.classMapInterpolate5;
        case 13:
            return r3_identifiers_1.Identifiers.classMapInterpolate6;
        case 15:
            return r3_identifiers_1.Identifiers.classMapInterpolate7;
        case 17:
            return r3_identifiers_1.Identifiers.classMapInterpolate8;
        default:
            return r3_identifiers_1.Identifiers.classMapInterpolateV;
    }
}
function getStyleMapInterpolationExpression(interpolation) {
    switch ((0, util_1.getInterpolationArgsLength)(interpolation)) {
        case 1:
            return r3_identifiers_1.Identifiers.styleMap;
        case 3:
            return r3_identifiers_1.Identifiers.styleMapInterpolate1;
        case 5:
            return r3_identifiers_1.Identifiers.styleMapInterpolate2;
        case 7:
            return r3_identifiers_1.Identifiers.styleMapInterpolate3;
        case 9:
            return r3_identifiers_1.Identifiers.styleMapInterpolate4;
        case 11:
            return r3_identifiers_1.Identifiers.styleMapInterpolate5;
        case 13:
            return r3_identifiers_1.Identifiers.styleMapInterpolate6;
        case 15:
            return r3_identifiers_1.Identifiers.styleMapInterpolate7;
        case 17:
            return r3_identifiers_1.Identifiers.styleMapInterpolate8;
        default:
            return r3_identifiers_1.Identifiers.styleMapInterpolateV;
    }
}
function getStylePropInterpolationExpression(interpolation) {
    switch ((0, util_1.getInterpolationArgsLength)(interpolation)) {
        case 1:
            return r3_identifiers_1.Identifiers.styleProp;
        case 3:
            return r3_identifiers_1.Identifiers.stylePropInterpolate1;
        case 5:
            return r3_identifiers_1.Identifiers.stylePropInterpolate2;
        case 7:
            return r3_identifiers_1.Identifiers.stylePropInterpolate3;
        case 9:
            return r3_identifiers_1.Identifiers.stylePropInterpolate4;
        case 11:
            return r3_identifiers_1.Identifiers.stylePropInterpolate5;
        case 13:
            return r3_identifiers_1.Identifiers.stylePropInterpolate6;
        case 15:
            return r3_identifiers_1.Identifiers.stylePropInterpolate7;
        case 17:
            return r3_identifiers_1.Identifiers.stylePropInterpolate8;
        default:
            return r3_identifiers_1.Identifiers.stylePropInterpolateV;
    }
}
function isCssCustomProperty(name) {
    return name.startsWith('--');
}
function isEmptyExpression(ast) {
    if (ast instanceof ast_1.ASTWithSource) {
        ast = ast.ast;
    }
    return ast instanceof ast_1.EmptyExpr;
}
