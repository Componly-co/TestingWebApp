"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOverrides = exports.extractLocalProjectModules = exports.extractLocalProjectComponents = void 0;
var ts_morph_1 = require("ts-morph");
var names_1 = require("../../react/utils/names");
var html_1 = require("../utils/html");
var utils_1 = require("../utils");
function extractLocalProjectComponents(_a) {
    var _this = this;
    var sourceFiles = _a.sourceFiles, localModules = _a.localModules, projectPath = _a.projectPath;
    var components = [];
    sourceFiles.forEach(function (sourceFile) {
        var relativePath = (0, names_1.getPathRelativeToRoot)(sourceFile, projectPath);
        sourceFile.getClasses().forEach(function (classDeclaration) { return __awaiter(_this, void 0, void 0, function () {
            var componentMetadata;
            return __generator(this, function (_a) {
                componentMetadata = {
                    id: "".concat(relativePath, "/").concat(classDeclaration.getName()),
                    path: relativePath,
                    name: classDeclaration.getName(),
                    selectors: [],
                    isSelfDeclared: true,
                    designSystems: []
                };
                classDeclaration.getDecorators().forEach(function (decorator) {
                    var decoratorName = decorator.getName();
                    if (decoratorName === 'Component') {
                        var args = decorator.getArguments();
                        if (args.length > 0) {
                            args[0].getProperties().forEach(function (prop) {
                                var _a, _b, _c;
                                if (prop.getName() === 'selector') {
                                    componentMetadata.selectors = [(_a = prop.getInitializer()) === null || _a === void 0 ? void 0 : _a.getText().replace(/'/g, '')];
                                }
                                if (prop.getName() === 'templateUrl') {
                                    var templateUrl = void 0;
                                    if (prop.getInitializer() && ((_b = prop.getInitializer()) === null || _b === void 0 ? void 0 : _b.getText().replace(/'/g, ''))) {
                                        templateUrl = (_c = prop.getInitializer()) === null || _c === void 0 ? void 0 : _c.getText().replace(/'/g, '');
                                        templateUrl = sourceFile.getFilePath().replace(sourceFile.getBaseName(), templateUrl.replace('./', ''));
                                        componentMetadata.templateUrl = templateUrl;
                                    }
                                }
                                if (prop.getName() === 'template') {
                                    componentMetadata.template = classDeclaration.getSourceFile().getFilePath();
                                }
                            });
                        }
                        var modules = localModules.filter(function (m) { return m.imports.map(function (i) { return i.imported; }).includes(classDeclaration.getName()); });
                        componentMetadata.modules = modules.map(function (m) { return m.name; });
                        components.push(componentMetadata);
                    }
                });
                return [2];
            });
        }); });
    });
    return components;
}
exports.extractLocalProjectComponents = extractLocalProjectComponents;
function extractLocalProjectModules(sourceFiles, projectPath) {
    var modules = [];
    sourceFiles
        .filter(function (file) { return !file.getFilePath().endsWith('.js'); })
        .forEach(function (sourceFile) {
        sourceFile.getClasses().forEach(function (classDeclaration) {
            var moduleMetadata = null;
            classDeclaration.getDecorators().forEach(function (decorator) {
                var decoratorName = decorator.getName();
                if (decoratorName === 'NgModule') {
                    var importDeclarations = classDeclaration.getSourceFile().getImportDeclarations();
                    var defaultImport_1 = [];
                    var namedImports_1 = [];
                    importDeclarations.forEach(function (dec) {
                        var _a, _b;
                        if ((_a = dec.getDefaultImport()) === null || _a === void 0 ? void 0 : _a.getText()) {
                            defaultImport_1 = __spreadArray(__spreadArray([], __read(defaultImport_1), false), [{ imported: (_b = dec.getDefaultImport()) === null || _b === void 0 ? void 0 : _b.getText(), from: dec.getModuleSpecifierValue() }], false);
                        }
                        namedImports_1 = __spreadArray(__spreadArray([], __read(namedImports_1), false), __read(dec
                            .getNamedImports()
                            .map(function (node) {
                            var _a, _b, _c;
                            return {
                                imported: (_b = (_a = node.getAliasNode()) === null || _a === void 0 ? void 0 : _a.getText()) !== null && _b !== void 0 ? _b : node.getText(),
                                from: dec.getModuleSpecifierValue(),
                                selector: (_c = dec.getFirstAncestorByKind(ts_morph_1.SyntaxKind.ImportSpecifier)) === null || _c === void 0 ? void 0 : _c.getText()
                            };
                        })), false);
                    });
                    var importedEntities = namedImports_1;
                    importedEntities = __spreadArray(__spreadArray([], __read(namedImports_1), false), __read(defaultImport_1), false);
                    var relativePath = (0, names_1.getPathRelativeToRoot)(sourceFile, projectPath);
                    moduleMetadata = {
                        name: classDeclaration.getName(),
                        path: relativePath,
                        imports: importedEntities
                    };
                }
            });
            if (moduleMetadata) {
                modules.push(moduleMetadata);
            }
        });
    });
    return modules;
}
exports.extractLocalProjectModules = extractLocalProjectModules;
function getOverrides(_a) {
    var components = _a.components, classDeclaration = _a.classDeclaration;
    return __awaiter(this, void 0, void 0, function () {
        var html, nodes_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4, (0, html_1.getHtmlFile)(classDeclaration)];
                case 1:
                    html = _b.sent();
                    if (html && html.ast && html.path) {
                        nodes_1 = (0, utils_1.flattenItemsWithChildren)(html.ast.nodes);
                        return [2, components
                                .map(function (component) { return component.selectors; })
                                .flat()
                                .map(function (selector) {
                                if (selector.includes('[') && selector.includes(']')) {
                                    var element_1 = selector.split('[')[0];
                                    var attr_1 = selector.split('[')[1].split(']')[0];
                                    return nodes_1
                                        .filter(function (node) { return node.name === element_1; })
                                        .filter(function (node) { return node.attributes.map(function (a) { return a.name; }).includes(attr_1); })
                                        .map(function (node) {
                                        return {
                                            lineNumber: node.sourceSpan.start.line,
                                            columnNumber: node.sourceSpan.start.col
                                        };
                                    });
                                }
                                else {
                                    return nodes_1.filter(function (node) { return node.name === selector; }).map(function (node) {
                                        return {
                                            lineNumber: node.sourceSpan.start.line,
                                            columnNumber: node.sourceSpan.start.col
                                        };
                                    });
                                }
                            }).flat()];
                    }
                    return [2, []];
            }
        });
    });
}
exports.getOverrides = getOverrides;
