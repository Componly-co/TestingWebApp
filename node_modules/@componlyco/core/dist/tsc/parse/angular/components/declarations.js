"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractModulesFromDeclarationsFiles = exports.extractComponentsFromDeclarationsFiles = void 0;
var ts_morph_1 = require("ts-morph");
var design_system_1 = require("../utils/design-system");
var utils_1 = require("../utils");
var fs_1 = require("fs");
function extractComponentsFromDeclarationsFiles(sourceFiles, externalModules, designSystems, dependencies) {
    var _this = this;
    var components = [];
    var typeRefToCheck = ['ɵɵComponentDeclaration', 'ɵɵComponentDefWithMeta'];
    sourceFiles
        .filter(function (file) { return file.getFilePath().endsWith('.d.ts'); })
        .forEach(function (sourceFile) {
        sourceFile.getClasses()
            .forEach(function (classD) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                classD.getProperties().forEach(function (property) {
                    if (property.getName() === 'ɵcmp') {
                        property.getChildrenOfKind(ts_morph_1.SyntaxKind.TypeReference)
                            .filter(function (typeRef) { return typeRefToCheck.includes(typeRef.compilerNode.typeName.right.text); })
                            .forEach(function (typeRef) {
                            var className = classD.getName();
                            var selectors = typeRef.getTypeArguments()[1].getText().trim().replace(/'/g, '').replace(/"/g, '').split(',').map(function (selector) { return selector.trim(); });
                            var module = externalModules.find(function (m) { return m.exports.includes(className); });
                            if (module) {
                                var library = dependencies.find(function (dep) { return module.library.includes(dep.name); }) ? dependencies.find(function (dep) { return module.library.includes(dep.name); }) : module.library;
                                var qualifyingDesignSystems = (0, design_system_1.findThirdPartyComponentDesignSystems)(module.library, designSystems);
                                components.push({
                                    id: "".concat(module.library, "/").concat(className),
                                    name: className,
                                    selectors: selectors,
                                    module: module === null || module === void 0 ? void 0 : module.name,
                                    library: library,
                                    designSystems: qualifyingDesignSystems,
                                    isSelfDeclared: false
                                });
                            }
                        });
                    }
                });
                return [2];
            });
        }); });
    });
    return components;
}
exports.extractComponentsFromDeclarationsFiles = extractComponentsFromDeclarationsFiles;
function extractModulesFromDeclarationsFiles(sourceFiles, localModules) {
    var _this = this;
    var modules = [];
    var typeRefToCheck = ['ɵɵNgModuleDeclaration', 'ɵɵNgModuleDefWithMeta'];
    sourceFiles
        .filter(function (file) { return file.getFilePath().endsWith('.d.ts'); })
        .forEach(function (sourceFile) {
        sourceFile.getClasses()
            .forEach(function (classD) {
            classD.getProperties().forEach(function (property) {
                if (property.getName() === 'ɵmod') {
                    property.getChildrenOfKind(ts_morph_1.SyntaxKind.TypeReference)
                        .filter(function (typeRef) { return typeRefToCheck.includes(typeRef.compilerNode.typeName.right.text); })
                        .forEach(function (typeRef) { return __awaiter(_this, void 0, void 0, function () {
                        var className, declarations, imports, exports, library, packageJSONPath, data, packageJSON, usage;
                        return __generator(this, function (_a) {
                            className = classD.getName();
                            declarations = [];
                            imports = [];
                            exports = [];
                            library = '';
                            if (typeRef.getTypeArguments()[1].compilerNode.elements) {
                                declarations = typeRef.getTypeArguments()[1].compilerNode.elements.filter(function (ele) { return ele.exprName.right; }).map(function (ele) { return ele.exprName.right.text; });
                            }
                            if (typeRef.getTypeArguments()[2].compilerNode.elements) {
                                imports = typeRef.getTypeArguments()[2].compilerNode.elements.filter(function (ele) { return ele.exprName.right; }).map(function (ele) { return ele.exprName.right.text; });
                            }
                            if (typeRef.getTypeArguments()[3].compilerNode.elements) {
                                exports = __spreadArray(__spreadArray([], __read(typeRef.getTypeArguments()[3].compilerNode.elements.filter(function (ele) { return ele.exprName.right; }).map(function (ele) { return ele.exprName.right.text; })), false), __read(typeRef.getTypeArguments()[3].compilerNode.elements.filter(function (ele) { return !ele.exprName.right; }).map(function (ele) { return ele.exprName.text; })), false);
                            }
                            packageJSONPath = (0, utils_1.findClosestPackageJson)(sourceFile.getFilePath());
                            if (packageJSONPath) {
                                data = (0, fs_1.readFileSync)(packageJSONPath, "utf8");
                                packageJSON = JSON.parse(data);
                                library = packageJSON.name;
                            }
                            usage = localModules.filter(function (m) { return m.imports.map(function (i) { return i.imported; }).includes(className); });
                            if (usage.length) {
                                modules.push({
                                    name: className,
                                    declarations: declarations || [],
                                    imports: imports || [],
                                    exports: exports || [],
                                    usage: usage.map(function (m) { return m.name; }),
                                    library: library
                                });
                            }
                            return [2];
                        });
                    }); });
                }
            });
        });
    });
    return modules;
}
exports.extractModulesFromDeclarationsFiles = extractModulesFromDeclarationsFiles;
