"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractComponentsFromJSFiles = exports.extractModulesFromJSFiles = void 0;
var ts_morph_1 = require("ts-morph");
var utils_1 = require("../utils");
var design_system_1 = require("../utils/design-system");
var fs_1 = require("fs");
function extractModulesFromJSFiles(sourceFiles, localModules) {
    var modules = [];
    sourceFiles
        .filter(function (file) { return file.getFilePath().endsWith('.js'); })
        .forEach(function (sourceFile) {
        var texp = sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.ExpressionStatement);
        texp.forEach(function (t) {
            var binary = t.getExpression();
            if (binary.isKind(ts_morph_1.SyntaxKind.BinaryExpression)) {
                var left = binary.getLeft();
                if (left.isKind(ts_morph_1.SyntaxKind.PropertyAccessExpression) && left.getName() === 'decorators') {
                    var className_1 = left.getExpression().getText();
                    var declarations_1 = [];
                    var imports_1 = [];
                    var usage_1 = [];
                    var exports_1 = [];
                    var library_1;
                    var right = binary.getRight();
                    if (right.isKind(ts_morph_1.SyntaxKind.ArrayLiteralExpression)) {
                        right.getElements().filter(function (el) { return el.isKind(ts_morph_1.SyntaxKind.ObjectLiteralExpression); })
                            .forEach(function (el) {
                            var _a, _b;
                            if (el.isKind(ts_morph_1.SyntaxKind.ObjectLiteralExpression)) {
                                var type = el.getProperty('type');
                                if (type === null || type === void 0 ? void 0 : type.isKind(ts_morph_1.SyntaxKind.PropertyAssignment)) {
                                    if (((_a = type.getInitializer()) === null || _a === void 0 ? void 0 : _a.getText()) === 'NgModule') {
                                        var args = el.getProperty('args');
                                        if (args === null || args === void 0 ? void 0 : args.isKind(ts_morph_1.SyntaxKind.PropertyAssignment)) {
                                            var argsInit = args.getInitializer();
                                            if (argsInit === null || argsInit === void 0 ? void 0 : argsInit.isKind(ts_morph_1.SyntaxKind.ArrayLiteralExpression)) {
                                                exports_1 = (0, utils_1.extractFromArray)(argsInit, 'exports');
                                                imports_1 = (0, utils_1.extractFromArray)(argsInit, 'imports');
                                                declarations_1 = (0, utils_1.extractFromArray)(argsInit, 'declarations');
                                            }
                                        }
                                        var packageJSONPath = (0, utils_1.findClosestPackageJson)(sourceFile.getFilePath());
                                        if (packageJSONPath) {
                                            var data = (0, fs_1.readFileSync)(packageJSONPath, "utf8");
                                            var packageJSON = JSON.parse(data);
                                            library_1 = packageJSON.name;
                                        }
                                        usage_1 = localModules.filter(function (m) { return m.imports.map(function (i) { return i.imported; }).includes(className_1); });
                                        if (usage_1.length) {
                                            library_1 = (_b = usage_1[0].imports.find(function (i) { return i.imported === className_1; })) === null || _b === void 0 ? void 0 : _b.from;
                                            var exist = modules.find(function (m) { return m.name === className_1; });
                                            if (library_1 && !exist) {
                                                modules.push({
                                                    name: className_1,
                                                    declarations: declarations_1 || [],
                                                    imports: imports_1 || [],
                                                    exports: exports_1 || [],
                                                    usage: usage_1.map(function (m) { return m.name; }),
                                                    library: library_1
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    }
                }
            }
        });
    });
    return modules;
}
exports.extractModulesFromJSFiles = extractModulesFromJSFiles;
function extractComponentsFromJSFiles(sourceFiles, externalModules, designSystems, dependencies) {
    var components = [];
    sourceFiles
        .filter(function (file) { return file.getFilePath().endsWith('.js'); })
        .forEach(function (sourceFile) {
        var texp = sourceFile.getDescendantsOfKind(ts_morph_1.SyntaxKind.ExpressionStatement);
        texp.forEach(function (t) {
            var binary = t.getExpression();
            if (binary.isKind(ts_morph_1.SyntaxKind.BinaryExpression)) {
                var left = binary.getLeft();
                if (left.isKind(ts_morph_1.SyntaxKind.PropertyAccessExpression) && left.getName() === 'decorators') {
                    var className_2 = left.getExpression().getText();
                    var selectors_1 = [];
                    var right = binary.getRight();
                    if (right.isKind(ts_morph_1.SyntaxKind.ArrayLiteralExpression)) {
                        right.getElements().filter(function (el) { return el.isKind(ts_morph_1.SyntaxKind.ObjectLiteralExpression); })
                            .forEach(function (el) {
                            var _a;
                            if (el.isKind(ts_morph_1.SyntaxKind.ObjectLiteralExpression)) {
                                var type = el.getProperty('type');
                                if (type === null || type === void 0 ? void 0 : type.isKind(ts_morph_1.SyntaxKind.PropertyAssignment)) {
                                    if (((_a = type.getInitializer()) === null || _a === void 0 ? void 0 : _a.getText()) === 'Component') {
                                        var args = el.getProperty('args');
                                        if (args === null || args === void 0 ? void 0 : args.isKind(ts_morph_1.SyntaxKind.PropertyAssignment)) {
                                            var argsInit = args.getInitializer();
                                            if (argsInit === null || argsInit === void 0 ? void 0 : argsInit.isKind(ts_morph_1.SyntaxKind.ArrayLiteralExpression)) {
                                                selectors_1 = [(0, utils_1.extractFromArray)(argsInit, 'selector')];
                                                if (className_2 === 'MatButton') {
                                                    console.log(sourceFile.getFilePath());
                                                    console.log(selectors_1);
                                                }
                                            }
                                        }
                                        var module_1 = externalModules.find(function (m) { return m.exports.includes(className_2); });
                                        if (module_1) {
                                            var library = dependencies.find(function (dep) { return module_1.library.includes(dep.name); }) ? dependencies.find(function (dep) { return module_1.library.includes(dep.name); }) : module_1.library;
                                            var qualifyingDesignSystems = (0, design_system_1.findThirdPartyComponentDesignSystems)(module_1.library, designSystems);
                                            var exist = components.find(function (m) { return m.name === className_2; });
                                            if (!exist) {
                                                components.push({
                                                    id: "".concat(module_1.library, "/").concat(className_2),
                                                    name: className_2,
                                                    selectors: selectors_1,
                                                    module: module_1 === null || module_1 === void 0 ? void 0 : module_1.name,
                                                    library: library,
                                                    designSystems: qualifyingDesignSystems,
                                                    isSelfDeclared: false
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    }
                }
            }
        });
    });
    return components;
}
exports.extractComponentsFromJSFiles = extractComponentsFromJSFiles;
