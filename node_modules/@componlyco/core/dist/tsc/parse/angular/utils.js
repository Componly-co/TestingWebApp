"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addOverriddenComponents = exports.saveToJSON = exports.getComponentStatistics = exports.flattenItemsWithChildren = exports.extractFromArray = exports.extractFromObject = exports.findClosestPackageJson = void 0;
var promises_1 = require("fs/promises");
var lodash_1 = require("lodash");
var ts_morph_1 = require("ts-morph");
var path_1 = require("path");
var fs_1 = require("fs");
function findClosestPackageJson(filePath) {
    var currentDir = (0, path_1.dirname)(filePath);
    while (true) {
        var packageJsonPath = (0, path_1.join)(currentDir, 'package.json');
        if ((0, fs_1.existsSync)(packageJsonPath)) {
            return packageJsonPath;
        }
        if (currentDir === (0, path_1.resolve)('/')) {
            break;
        }
        currentDir = (0, path_1.dirname)(currentDir);
    }
    return null;
}
exports.findClosestPackageJson = findClosestPackageJson;
function extractFromObject(node, property) {
    var result;
    var prop = node.getProperty(property);
    if (prop && prop.isKind(ts_morph_1.SyntaxKind.PropertyAssignment)) {
        var init = prop.getInitializer();
        if (init === null || init === void 0 ? void 0 : init.isKind(ts_morph_1.SyntaxKind.Identifier)) {
            result = init.getText().trim().replace(/'/g, '').replace(/"/g, '');
            return result;
        }
        if (init === null || init === void 0 ? void 0 : init.isKind(ts_morph_1.SyntaxKind.StringLiteral)) {
            result = init.getText().trim().replace(/'/g, '').replace(/"/g, '');
            return result;
        }
        if (init === null || init === void 0 ? void 0 : init.isKind(ts_morph_1.SyntaxKind.ArrayLiteralExpression)) {
            result = [];
            init.getElements().forEach(function (el) {
                if (el.isKind(ts_morph_1.SyntaxKind.Identifier)) {
                    result = __spreadArray(__spreadArray([], __read(result), false), [el.getText()], false);
                }
            });
        }
    }
    return result;
}
exports.extractFromObject = extractFromObject;
function extractFromArray(node, property) {
    var result;
    node.getElements().forEach(function (el) {
        if (el.isKind(ts_morph_1.SyntaxKind.ObjectLiteralExpression)) {
            result = extractFromObject(el, property);
        }
    });
    return result;
}
exports.extractFromArray = extractFromArray;
function flattenItemsWithChildren(items) {
    return items.reduce(function (result, item) {
        result.push(item);
        if (item.children && item.children.length > 0) {
            result.push.apply(result, __spreadArray([], __read(flattenItemsWithChildren(item.children)), false));
        }
        return result;
    }, []);
}
exports.flattenItemsWithChildren = flattenItemsWithChildren;
function getComponentStatistics(components) {
    var thirdPartyComponents = components.filter(function (c) { return !c.isSelfDeclared; }).length;
    var selfDeclaredComponents = components.filter(function (c) { return c.isSelfDeclared; }).length;
    var totalComponents = thirdPartyComponents + selfDeclaredComponents;
    var _a = __read((0, lodash_1.partition)(components, function (component) { return component.designSystems && component.designSystems.length > 0; }), 2), withDesignSystem = _a[0], withoutDesignSystem = _a[1];
    var designSystemsComponents = withDesignSystem.length;
    var nonDesignSystemComponents = withoutDesignSystem.length;
    var coverage = designSystemsComponents / totalComponents;
    return {
        thirdPartyComponents: thirdPartyComponents,
        selfDeclaredComponents: selfDeclaredComponents,
        designSystemsComponents: designSystemsComponents,
        nonDesignSystemComponents: nonDesignSystemComponents,
        totalComponents: totalComponents,
        coverage: coverage,
    };
}
exports.getComponentStatistics = getComponentStatistics;
function saveToJSON(outputPath, content) {
    return __awaiter(this, void 0, void 0, function () {
        var outputDir;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    outputDir = (0, path_1.dirname)(outputPath);
                    return [4, (0, promises_1.mkdir)(outputDir, {
                            recursive: true,
                        })];
                case 1:
                    _a.sent();
                    return [4, (0, promises_1.writeFile)(outputPath, JSON.stringify(content, undefined, 2))];
                case 2:
                    _a.sent();
                    return [2];
            }
        });
    });
}
exports.saveToJSON = saveToJSON;
function getOverriddenByDictionary(components) {
    var invertedMapping = {};
    for (var filePath in components) {
        var componentsUsed = components[filePath];
        for (var componentName in componentsUsed) {
            if (!invertedMapping[componentName]) {
                invertedMapping[componentName] = {};
            }
            invertedMapping[componentName][filePath] = componentsUsed[componentName];
        }
    }
    return invertedMapping;
}
function addOverriddenComponents(importedComponents, selfDeclaredComponents) {
    var overriddenComponents = selfDeclaredComponents.reduce(function (acc, ele) {
        var _a;
        return (__assign(__assign({}, acc), (_a = {}, _a[ele.id] = ele.overriddenComponents || {}, _a)));
    }, {});
    var overriddenByDictionary = getOverriddenByDictionary(overriddenComponents);
    var updatedComponents = importedComponents.map(function (component) { return (__assign(__assign({}, component), { overriddenBy: overriddenByDictionary[component.id] })); });
    return updatedComponents;
}
exports.addOverriddenComponents = addOverriddenComponents;
