"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scan = void 0;
var schemas_1 = require("@componlyco/schemas");
var design_tokens_1 = require("../design-tokens");
var detect_1 = require("../detect");
var parse_1 = require("../parse");
var utils_1 = require("./utils");
function scan(input) {
    return __awaiter(this, void 0, void 0, function () {
        var project, storybook, storybookBuild, url, designTokenGlobs, projectType, clientName, staticDomain, designSystems, codebaseID, projectID, ignorePatterns, extract, parsedInput, parseOutput, stories, designTokens, updatedComponents, detected, e_1, output;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!input.token) {
                        throw new Error("Token is required");
                    }
                    project = input.project, storybook = input.storybook, storybookBuild = input.storybookBuild, url = input.url, designTokenGlobs = input.designTokenGlobs, projectType = input.projectType, clientName = input.clientName, staticDomain = input.staticDomain, designSystems = input.designSystems, codebaseID = input.codebaseID, projectID = input.projectID, ignorePatterns = input.ignorePatterns, extract = input.extract;
                    parsedInput = schemas_1.ScanSchema.safeParse(input);
                    if (parsedInput.success === false) {
                        throw new Error("Invalid scan parameters. Their format don't match the prescribed schema.");
                    }
                    return [4, (0, parse_1.parse)({ project: project, projectType: projectType, designSystems: designSystems, ignorePatterns: ignorePatterns, token: input.token })];
                case 1:
                    parseOutput = _a.sent();
                    stories = null;
                    if (!extract) return [3, 3];
                    return [4, (0, utils_1.extractStorybookURLs)({ storybookBuild: storybookBuild, baseURL: url, clientName: clientName, staticDomain: staticDomain })];
                case 2:
                    stories = _a.sent();
                    _a.label = 3;
                case 3: return [4, (0, design_tokens_1.parseDesignTokensJSON)({
                        designTokenGlobs: designTokenGlobs,
                        project: project,
                        ignorePatterns: ignorePatterns,
                    })];
                case 4:
                    designTokens = _a.sent();
                    if (stories && parseOutput !== undefined) {
                        updatedComponents = parseOutput.components.map(function (ele) {
                            var output = ele;
                            if (ele.isSelfDeclared === true) {
                                output = __assign(__assign({}, ele), { storyURLs: (0, utils_1.getComponentStoryURLs)(ele, stories) });
                            }
                            return output;
                        });
                        parseOutput = __assign(__assign({}, parseOutput), { components: updatedComponents });
                    }
                    detected = {};
                    _a.label = 5;
                case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4, (0, detect_1.detect)({ storybook: storybook, project: project, ignorePatterns: ignorePatterns, token: input.token })];
                case 6:
                    detected = _a.sent();
                    return [3, 8];
                case 7:
                    e_1 = _a.sent();
                    return [3, 8];
                case 8:
                    output = {
                        detect: detected,
                        designTokens: designTokens,
                        stories: stories || {},
                        parse: parseOutput,
                        codebaseID: codebaseID,
                        projectID: projectID,
                        timestamp: new Date().getTime().toString(),
                        designSystems: input.designSystems
                    };
                    return [2, output];
            }
        });
    });
}
exports.scan = scan;
