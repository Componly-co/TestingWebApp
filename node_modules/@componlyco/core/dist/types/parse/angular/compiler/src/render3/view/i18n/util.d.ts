import * as i18n from '../../../i18n/i18n_ast';
import * as html from '../../../ml_parser/ast';
import * as o from '../../../output/output_ast';
import * as t from '../../r3_ast';
export declare const TRANSLATION_VAR_PREFIX = "i18n_";
export declare const I18N_ATTR = "i18n";
export declare const I18N_ATTR_PREFIX = "i18n-";
export declare const I18N_ICU_VAR_PREFIX = "VAR_";
export declare const I18N_ICU_MAPPING_PREFIX = "I18N_EXP_";
export declare const I18N_PLACEHOLDER_SYMBOL = "\uFFFD";
export declare function isI18nAttribute(name: string): boolean;
export declare function isI18nRootNode(meta?: i18n.I18nMeta): meta is i18n.Message;
export declare function isSingleI18nIcu(meta?: i18n.I18nMeta): boolean;
export declare function hasI18nMeta(node: t.Node & {
    i18n?: i18n.I18nMeta;
}): boolean;
export declare function hasI18nAttrs(element: html.Element): boolean;
export declare function icuFromI18nMessage(message: i18n.Message): i18n.IcuPlaceholder;
export declare function wrapI18nPlaceholder(content: string | number, contextId?: number): string;
export declare function assembleI18nBoundString(strings: string[], bindingStartIndex?: number, contextId?: number): string;
export declare function getSeqNumberGenerator(startsAt?: number): () => number;
export declare function placeholdersToParams(placeholders: Map<string, string[]>): {
    [name: string]: o.LiteralExpr;
};
export declare function updatePlaceholderMap(map: Map<string, any[]>, name: string, ...values: any[]): void;
export declare function assembleBoundTextPlaceholders(meta: i18n.I18nMeta, bindingStartIndex?: number, contextId?: number): Map<string, any[]>;
export declare function formatI18nPlaceholderNamesInMap(params: {
    [name: string]: o.Expression;
} | undefined, useCamelCase: boolean): {
    [key: string]: o.Expression;
};
export declare function formatI18nPlaceholderName(name: string, useCamelCase?: boolean): string;
export declare function getTranslationConstPrefix(extra: string): string;
export declare function declareI18nVariable(variable: o.ReadVarExpr): o.Statement;
//# sourceMappingURL=util.d.ts.map