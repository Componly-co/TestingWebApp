import { AST } from '../../expression_parser/ast';
import * as o from '../../output/output_ast';
import { ParseSourceSpan } from '../../parse_util';
import * as t from '../r3_ast';
import { ValueConverter } from './template';
import { DefinitionMap } from './util';
export declare const MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;
export interface StylingInstruction {
    reference: o.ExternalReference;
    calls: StylingInstructionCall[];
}
export interface StylingInstructionCall {
    sourceSpan: ParseSourceSpan | null;
    supportsInterpolation: boolean;
    allocateBindingSlots: number;
    params: ((convertFn: (value: any) => o.Expression | o.Expression[]) => o.Expression[]);
}
interface BoundStylingEntry {
    hasOverrideFlag: boolean;
    name: string | null;
    suffix: string | null;
    sourceSpan: ParseSourceSpan;
    value: AST;
}
export declare class StylingBuilder {
    private _directiveExpr;
    private _hasInitialValues;
    hasBindings: boolean;
    hasBindingsWithPipes: boolean;
    private _classMapInput;
    private _styleMapInput;
    private _singleStyleInputs;
    private _singleClassInputs;
    private _lastStylingInput;
    private _firstStylingInput;
    private _stylesIndex;
    private _classesIndex;
    private _initialStyleValues;
    private _initialClassValues;
    constructor(_directiveExpr: o.Expression | null);
    registerBoundInput(input: t.BoundAttribute): boolean;
    registerInputBasedOnName(name: string, expression: AST, sourceSpan: ParseSourceSpan): BoundStylingEntry | null;
    registerStyleInput(name: string, isMapBased: boolean, value: AST, sourceSpan: ParseSourceSpan, suffix?: string | null): BoundStylingEntry | null;
    registerClassInput(name: string, isMapBased: boolean, value: AST, sourceSpan: ParseSourceSpan): BoundStylingEntry | null;
    private _checkForPipes;
    registerStyleAttr(value: string): void;
    registerClassAttr(value: string): void;
    populateInitialStylingAttrs(attrs: o.Expression[]): void;
    assignHostAttrs(attrs: o.Expression[], definitionMap: DefinitionMap): void;
    buildClassMapInstruction(valueConverter: ValueConverter): StylingInstruction | null;
    buildStyleMapInstruction(valueConverter: ValueConverter): StylingInstruction | null;
    private _buildMapBasedInstruction;
    private _buildSingleInputs;
    private _buildClassInputs;
    private _buildStyleInputs;
    buildUpdateLevelInstructions(valueConverter: ValueConverter): StylingInstruction[];
}
export declare function parseProperty(name: string): {
    property: string;
    suffix: string | null;
    hasOverrideFlag: boolean;
};
export {};
//# sourceMappingURL=styling_builder.d.ts.map