import * as o from '../../../../../output/output_ast';
import { ParseSourceSpan } from '../../../../../parse_util';
import { BindingKind, OpKind } from '../enums';
import { Op, OpList, XrefId } from '../operations';
import { ConsumesSlotOpTrait, UsesSlotIndexTrait } from '../traits';
import { ListEndOp, StatementOp, VariableOp } from './shared';
import type { UpdateOp } from './update';
export type CreateOp = ListEndOp<CreateOp> | StatementOp<CreateOp> | ElementOp | ElementStartOp | ElementEndOp | ContainerOp | ContainerStartOp | ContainerEndOp | TemplateOp | EnableBindingsOp | DisableBindingsOp | TextOp | ListenerOp | PipeOp | VariableOp<CreateOp> | NamespaceOp | ExtractedAttributeOp;
export type ElementOrContainerOps = ElementOp | ElementStartOp | ContainerOp | ContainerStartOp | TemplateOp;
export declare function isElementOrContainerOp(op: CreateOp): op is ElementOrContainerOps;
export interface LocalRef {
    name: string;
    target: string;
}
export interface ElementOrContainerOpBase extends Op<CreateOp>, ConsumesSlotOpTrait {
    kind: ElementOrContainerOps['kind'];
    xref: XrefId;
    attributes: ConstIndex | null;
    localRefs: LocalRef[] | ConstIndex | null;
    nonBindable: boolean;
    sourceSpan: ParseSourceSpan;
}
export interface ElementOpBase extends ElementOrContainerOpBase {
    kind: OpKind.Element | OpKind.ElementStart | OpKind.Template;
    tag: string;
    namespace: Namespace;
}
export interface ElementStartOp extends ElementOpBase {
    kind: OpKind.ElementStart;
}
export declare function createElementStartOp(tag: string, xref: XrefId, namespace: Namespace, sourceSpan: ParseSourceSpan): ElementStartOp;
export interface ElementOp extends ElementOpBase {
    kind: OpKind.Element;
}
export interface TemplateOp extends ElementOpBase {
    kind: OpKind.Template;
    decls: number | null;
    vars: number | null;
}
export declare function createTemplateOp(xref: XrefId, tag: string, namespace: Namespace, sourceSpan: ParseSourceSpan): TemplateOp;
export interface ElementEndOp extends Op<CreateOp> {
    kind: OpKind.ElementEnd;
    xref: XrefId;
    sourceSpan: ParseSourceSpan | null;
}
export declare function createElementEndOp(xref: XrefId, sourceSpan: ParseSourceSpan | null): ElementEndOp;
export interface ContainerStartOp extends ElementOrContainerOpBase {
    kind: OpKind.ContainerStart;
}
export interface ContainerOp extends ElementOrContainerOpBase {
    kind: OpKind.Container;
}
export interface ContainerEndOp extends Op<CreateOp> {
    kind: OpKind.ContainerEnd;
    xref: XrefId;
    sourceSpan: ParseSourceSpan;
}
export interface DisableBindingsOp extends Op<CreateOp> {
    kind: OpKind.DisableBindings;
    xref: XrefId;
}
export declare function createDisableBindingsOp(xref: XrefId): DisableBindingsOp;
export interface EnableBindingsOp extends Op<CreateOp> {
    kind: OpKind.EnableBindings;
    xref: XrefId;
}
export declare function createEnableBindingsOp(xref: XrefId): EnableBindingsOp;
export interface TextOp extends Op<CreateOp>, ConsumesSlotOpTrait {
    kind: OpKind.Text;
    xref: XrefId;
    initialValue: string;
    sourceSpan: ParseSourceSpan | null;
}
export declare function createTextOp(xref: XrefId, initialValue: string, sourceSpan: ParseSourceSpan | null): TextOp;
export interface ListenerOp extends Op<CreateOp>, UsesSlotIndexTrait {
    kind: OpKind.Listener;
    name: string;
    tag: string;
    handlerOps: OpList<UpdateOp>;
    handlerFnName: string | null;
    consumesDollarEvent: boolean;
    isAnimationListener: boolean;
    animationPhase: string | null;
}
export declare function createListenerOp(target: XrefId, name: string, tag: string): ListenerOp;
export declare function createListenerOpForAnimation(target: XrefId, name: string, animationPhase: string, tag: string): ListenerOp;
export interface PipeOp extends Op<CreateOp>, ConsumesSlotOpTrait {
    kind: OpKind.Pipe;
    xref: XrefId;
    name: string;
}
export declare function createPipeOp(xref: XrefId, name: string): PipeOp;
export declare enum Namespace {
    HTML = 0,
    SVG = 1,
    Math = 2
}
export interface NamespaceOp extends Op<CreateOp> {
    kind: OpKind.Namespace;
    active: Namespace;
}
export declare function createNamespaceOp(namespace: Namespace): NamespaceOp;
export interface ExtractedAttributeOp extends Op<CreateOp> {
    kind: OpKind.ExtractedAttribute;
    target: XrefId;
    bindingKind: BindingKind;
    name: string;
    expression: o.Expression | null;
}
export declare function createExtractedAttributeOp(target: XrefId, bindingKind: BindingKind, name: string, expression: o.Expression | null): ExtractedAttributeOp;
export type ConstIndex = number & {
    __brand: 'ConstIndex';
};
//# sourceMappingURL=create.d.ts.map