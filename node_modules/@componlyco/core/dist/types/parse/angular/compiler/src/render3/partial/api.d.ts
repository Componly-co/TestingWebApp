import { ChangeDetectionStrategy, ViewEncapsulation } from '../../core';
import * as o from '../../output/output_ast';
export interface R3PartialDeclaration {
    minVersion: string;
    version: string;
    ngImport: o.Expression;
    type: o.Expression;
}
export interface R3DeclareDirectiveMetadata extends R3PartialDeclaration {
    selector?: string;
    inputs?: {
        [classPropertyName: string]: string | [
            bindingPropertyName: string,
            classPropertyName: string,
            transformFunction?: o.Expression
        ];
    };
    outputs?: {
        [classPropertyName: string]: string;
    };
    host?: {
        attributes?: {
            [key: string]: o.Expression;
        };
        listeners: {
            [key: string]: string;
        };
        properties?: {
            [key: string]: string;
        };
        classAttribute?: string;
        styleAttribute?: string;
    };
    queries?: R3DeclareQueryMetadata[];
    viewQueries?: R3DeclareQueryMetadata[];
    providers?: o.Expression;
    exportAs?: string[];
    usesInheritance?: boolean;
    usesOnChanges?: boolean;
    isStandalone?: boolean;
    isSignal?: boolean;
    hostDirectives?: R3DeclareHostDirectiveMetadata[];
}
export interface R3DeclareComponentMetadata extends R3DeclareDirectiveMetadata {
    template: o.Expression;
    isInline?: boolean;
    styles?: string[];
    components?: R3DeclareDirectiveDependencyMetadata[];
    directives?: R3DeclareDirectiveDependencyMetadata[];
    dependencies?: R3DeclareTemplateDependencyMetadata[];
    pipes?: {
        [pipeName: string]: o.Expression | (() => o.Expression);
    };
    viewProviders?: o.Expression;
    animations?: o.Expression;
    changeDetection?: ChangeDetectionStrategy;
    encapsulation?: ViewEncapsulation;
    interpolation?: [string, string];
    preserveWhitespaces?: boolean;
}
export type R3DeclareTemplateDependencyMetadata = R3DeclareDirectiveDependencyMetadata | R3DeclarePipeDependencyMetadata | R3DeclareNgModuleDependencyMetadata;
export interface R3DeclareDirectiveDependencyMetadata {
    kind: 'directive' | 'component';
    selector: string;
    type: o.Expression | (() => o.Expression);
    inputs?: string[];
    outputs?: string[];
    exportAs?: string[];
}
export interface R3DeclarePipeDependencyMetadata {
    kind: 'pipe';
    name: string;
    type: o.Expression | (() => o.Expression);
}
export interface R3DeclareNgModuleDependencyMetadata {
    kind: 'ngmodule';
    type: o.Expression | (() => o.Expression);
}
export interface R3DeclareQueryMetadata {
    propertyName: string;
    first?: boolean;
    predicate: o.Expression | string[];
    descendants?: boolean;
    emitDistinctChangesOnly?: boolean;
    read?: o.Expression;
    static?: boolean;
}
export interface R3DeclareNgModuleMetadata extends R3PartialDeclaration {
    bootstrap?: o.Expression[];
    declarations?: o.Expression[];
    imports?: o.Expression[];
    exports?: o.Expression[];
    schemas?: o.Expression[];
    id?: o.Expression;
}
export interface R3DeclareInjectorMetadata extends R3PartialDeclaration {
    providers?: o.Expression;
    imports?: o.Expression[];
}
export interface R3DeclarePipeMetadata extends R3PartialDeclaration {
    name: string;
    pure?: boolean;
    isStandalone?: boolean;
}
export interface R3DeclareFactoryMetadata extends R3PartialDeclaration {
    deps: R3DeclareDependencyMetadata[] | 'invalid' | null;
    target: FactoryTarget;
}
export declare enum FactoryTarget {
    Directive = 0,
    Component = 1,
    Injectable = 2,
    Pipe = 3,
    NgModule = 4
}
export interface R3DeclareInjectableMetadata extends R3PartialDeclaration {
    providedIn?: o.Expression;
    useClass?: o.Expression;
    useFactory?: o.Expression;
    useExisting?: o.Expression;
    useValue?: o.Expression;
    deps?: R3DeclareDependencyMetadata[];
}
export interface R3DeclareDependencyMetadata {
    token: o.Expression | null;
    attribute?: boolean;
    host?: boolean;
    optional?: boolean;
    self?: boolean;
    skipSelf?: boolean;
}
export interface R3DeclareClassMetadata extends R3PartialDeclaration {
    decorators: o.Expression;
    ctorParameters?: o.Expression;
    propDecorators?: o.Expression;
}
export interface R3DeclareHostDirectiveMetadata {
    directive: o.Expression;
    inputs?: string[];
    outputs?: string[];
}
//# sourceMappingURL=api.d.ts.map