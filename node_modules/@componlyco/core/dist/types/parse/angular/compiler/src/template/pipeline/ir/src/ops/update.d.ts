import { SecurityContext } from '../../../../../core';
import * as o from '../../../../../output/output_ast';
import { ParseSourceSpan } from '../../../../../parse_util';
import { BindingKind, OpKind } from '../enums';
import { Op, XrefId } from '../operations';
import { ConsumesVarsTrait, DependsOnSlotContextOpTrait } from '../traits';
import type { HostPropertyOp } from './host';
import { ListEndOp, StatementOp, VariableOp } from './shared';
export type UpdateOp = ListEndOp<UpdateOp> | StatementOp<UpdateOp> | PropertyOp | AttributeOp | StylePropOp | ClassPropOp | StyleMapOp | ClassMapOp | InterpolateTextOp | AdvanceOp | VariableOp<UpdateOp> | BindingOp | HostPropertyOp;
export interface InterpolateTextOp extends Op<UpdateOp>, ConsumesVarsTrait {
    kind: OpKind.InterpolateText;
    target: XrefId;
    interpolation: Interpolation;
    sourceSpan: ParseSourceSpan;
}
export declare function createInterpolateTextOp(xref: XrefId, interpolation: Interpolation, sourceSpan: ParseSourceSpan): InterpolateTextOp;
export declare class Interpolation {
    readonly strings: string[];
    readonly expressions: o.Expression[];
    constructor(strings: string[], expressions: o.Expression[]);
}
export interface BindingOp extends Op<UpdateOp> {
    kind: OpKind.Binding;
    target: XrefId;
    bindingKind: BindingKind;
    name: string;
    expression: o.Expression | Interpolation;
    unit: string | null;
    securityContext: SecurityContext;
    isTextAttribute: boolean;
    isTemplate: boolean;
    sourceSpan: ParseSourceSpan;
}
export declare function createBindingOp(target: XrefId, kind: BindingKind, name: string, expression: o.Expression | Interpolation, unit: string | null, securityContext: SecurityContext, isTextAttribute: boolean, isTemplate: boolean, sourceSpan: ParseSourceSpan): BindingOp;
export interface PropertyOp extends Op<UpdateOp>, ConsumesVarsTrait, DependsOnSlotContextOpTrait {
    kind: OpKind.Property;
    target: XrefId;
    name: string;
    expression: o.Expression | Interpolation;
    isAnimationTrigger: boolean;
    securityContext: SecurityContext;
    sanitizer: o.Expression | null;
    isTemplate: boolean;
    sourceSpan: ParseSourceSpan;
}
export declare function createPropertyOp(target: XrefId, name: string, expression: o.Expression | Interpolation, isAnimationTrigger: boolean, securityContext: SecurityContext, isTemplate: boolean, sourceSpan: ParseSourceSpan): PropertyOp;
export interface StylePropOp extends Op<UpdateOp>, ConsumesVarsTrait, DependsOnSlotContextOpTrait {
    kind: OpKind.StyleProp;
    target: XrefId;
    name: string;
    expression: o.Expression | Interpolation;
    unit: string | null;
    sourceSpan: ParseSourceSpan;
}
export declare function createStylePropOp(xref: XrefId, name: string, expression: o.Expression | Interpolation, unit: string | null, sourceSpan: ParseSourceSpan): StylePropOp;
export interface ClassPropOp extends Op<UpdateOp>, ConsumesVarsTrait, DependsOnSlotContextOpTrait {
    kind: OpKind.ClassProp;
    target: XrefId;
    name: string;
    expression: o.Expression;
    sourceSpan: ParseSourceSpan;
}
export declare function createClassPropOp(xref: XrefId, name: string, expression: o.Expression, sourceSpan: ParseSourceSpan): ClassPropOp;
export interface StyleMapOp extends Op<UpdateOp>, ConsumesVarsTrait, DependsOnSlotContextOpTrait {
    kind: OpKind.StyleMap;
    target: XrefId;
    expression: o.Expression | Interpolation;
    sourceSpan: ParseSourceSpan;
}
export declare function createStyleMapOp(xref: XrefId, expression: o.Expression | Interpolation, sourceSpan: ParseSourceSpan): StyleMapOp;
export interface ClassMapOp extends Op<UpdateOp>, ConsumesVarsTrait, DependsOnSlotContextOpTrait {
    kind: OpKind.ClassMap;
    target: XrefId;
    expression: o.Expression | Interpolation;
    sourceSpan: ParseSourceSpan;
}
export declare function createClassMapOp(xref: XrefId, expression: o.Expression | Interpolation, sourceSpan: ParseSourceSpan): ClassMapOp;
export interface AttributeOp extends Op<UpdateOp> {
    kind: OpKind.Attribute;
    target: XrefId;
    name: string;
    expression: o.Expression | Interpolation;
    securityContext: SecurityContext;
    sanitizer: o.Expression | null;
    isTextAttribute: boolean;
    isTemplate: boolean;
    sourceSpan: ParseSourceSpan;
}
export declare function createAttributeOp(target: XrefId, name: string, expression: o.Expression | Interpolation, securityContext: SecurityContext, isTextAttribute: boolean, isTemplate: boolean, sourceSpan: ParseSourceSpan): AttributeOp;
export interface AdvanceOp extends Op<UpdateOp> {
    kind: OpKind.Advance;
    delta: number;
    sourceSpan: ParseSourceSpan;
}
export declare function createAdvanceOp(delta: number, sourceSpan: ParseSourceSpan): AdvanceOp;
//# sourceMappingURL=update.d.ts.map