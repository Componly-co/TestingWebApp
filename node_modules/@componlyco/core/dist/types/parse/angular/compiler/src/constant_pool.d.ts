import * as o from './output/output_ast';
export declare class ConstantPool {
    private readonly isClosureCompilerEnabled;
    statements: o.Statement[];
    private literals;
    private literalFactories;
    private sharedConstants;
    private nextNameIndex;
    constructor(isClosureCompilerEnabled?: boolean);
    getConstLiteral(literal: o.Expression, forceShared?: boolean): o.Expression;
    getSharedConstant(def: SharedConstantDefinition, expr: o.Expression): o.Expression;
    getLiteralFactory(literal: o.LiteralArrayExpr | o.LiteralMapExpr): {
        literalFactory: o.Expression;
        literalFactoryArguments: o.Expression[];
    };
    private _getLiteralFactory;
    uniqueName(prefix: string): string;
    private freshName;
}
export interface ExpressionKeyFn {
    keyOf(expr: o.Expression): string;
}
export interface SharedConstantDefinition extends ExpressionKeyFn {
    toSharedConstantDeclaration(declName: string, keyExpr: o.Expression): o.Statement;
}
export declare class GenericKeyFn implements ExpressionKeyFn {
    static readonly INSTANCE: GenericKeyFn;
    keyOf(expr: o.Expression): string;
}
//# sourceMappingURL=constant_pool.d.ts.map