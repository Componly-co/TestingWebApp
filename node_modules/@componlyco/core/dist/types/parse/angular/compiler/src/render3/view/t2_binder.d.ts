import { AST } from '../../expression_parser/ast';
import { SelectorMatcher } from '../../selector';
import { BoundAttribute, BoundEvent, DeferredBlock, Element, Reference, Template, TextAttribute, Variable } from '../r3_ast';
import { BoundTarget, DirectiveMeta, Target, TargetBinder } from './t2_api';
export declare class R3TargetBinder<DirectiveT extends DirectiveMeta> implements TargetBinder<DirectiveT> {
    private directiveMatcher;
    constructor(directiveMatcher: SelectorMatcher<DirectiveT[]>);
    bind(target: Target): BoundTarget<DirectiveT>;
}
export declare class R3BoundTarget<DirectiveT extends DirectiveMeta> implements BoundTarget<DirectiveT> {
    readonly target: Target;
    private directives;
    private eagerDirectives;
    private bindings;
    private references;
    private exprTargets;
    private symbols;
    private nestingLevel;
    private templateEntities;
    private usedPipes;
    private eagerPipes;
    private deferredBlocks;
    constructor(target: Target, directives: Map<Element | Template, DirectiveT[]>, eagerDirectives: DirectiveT[], bindings: Map<BoundAttribute | BoundEvent | TextAttribute, DirectiveT | Element | Template>, references: Map<BoundAttribute | BoundEvent | Reference | TextAttribute, {
        directive: DirectiveT;
        node: Element | Template;
    } | Element | Template>, exprTargets: Map<AST, Reference | Variable>, symbols: Map<Reference | Variable, Template>, nestingLevel: Map<Template, number>, templateEntities: Map<Template | null, ReadonlySet<Reference | Variable>>, usedPipes: Set<string>, eagerPipes: Set<string>, deferredBlocks: Set<DeferredBlock>);
    getEntitiesInTemplateScope(template: Template | null): ReadonlySet<Reference | Variable>;
    getDirectivesOfNode(node: Element | Template): DirectiveT[] | null;
    getReferenceTarget(ref: Reference): {
        directive: DirectiveT;
        node: Element | Template;
    } | Element | Template | null;
    getConsumerOfBinding(binding: BoundAttribute | BoundEvent | TextAttribute): DirectiveT | Element | Template | null;
    getExpressionTarget(expr: AST): Reference | Variable | null;
    getTemplateOfSymbol(symbol: Reference | Variable): Template | null;
    getNestingLevel(template: Template): number;
    getUsedDirectives(): DirectiveT[];
    getEagerlyUsedDirectives(): DirectiveT[];
    getUsedPipes(): string[];
    getEagerlyUsedPipes(): string[];
    getDeferBlocks(): DeferredBlock[];
}
//# sourceMappingURL=t2_binder.d.ts.map