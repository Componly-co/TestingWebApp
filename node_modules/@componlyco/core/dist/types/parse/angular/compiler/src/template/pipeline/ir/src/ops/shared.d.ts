import * as o from '../../../../../output/output_ast';
import { OpKind } from '../enums';
import { Op, XrefId } from '../operations';
import { SemanticVariable } from '../variable';
export interface ListEndOp<OpT extends Op<OpT>> extends Op<OpT> {
    kind: OpKind.ListEnd;
}
export interface StatementOp<OpT extends Op<OpT>> extends Op<OpT> {
    kind: OpKind.Statement;
    statement: o.Statement;
}
export declare function createStatementOp<OpT extends Op<OpT>>(statement: o.Statement): StatementOp<OpT>;
export interface VariableOp<OpT extends Op<OpT>> extends Op<OpT> {
    kind: OpKind.Variable;
    xref: XrefId;
    variable: SemanticVariable;
    initializer: o.Expression;
}
export declare function createVariableOp<OpT extends Op<OpT>>(xref: XrefId, variable: SemanticVariable, initializer: o.Expression): VariableOp<OpT>;
export declare const NEW_OP: Pick<Op<any>, 'debugListId' | 'prev' | 'next'>;
//# sourceMappingURL=shared.d.ts.map