import * as o from '../../../output/output_ast';
import { ParseSourceSpan } from '../../../parse_util';
import * as ir from '../ir';
export declare function element(slot: number, tag: string, constIndex: number | null, localRefIndex: number | null, sourceSpan: ParseSourceSpan): ir.CreateOp;
export declare function elementStart(slot: number, tag: string, constIndex: number | null, localRefIndex: number | null, sourceSpan: ParseSourceSpan): ir.CreateOp;
export declare function elementEnd(sourceSpan: ParseSourceSpan | null): ir.CreateOp;
export declare function elementContainerStart(slot: number, constIndex: number | null, localRefIndex: number | null, sourceSpan: ParseSourceSpan): ir.CreateOp;
export declare function elementContainer(slot: number, constIndex: number | null, localRefIndex: number | null, sourceSpan: ParseSourceSpan): ir.CreateOp;
export declare function elementContainerEnd(): ir.CreateOp;
export declare function template(slot: number, templateFnRef: o.Expression, decls: number, vars: number, tag: string, constIndex: number, sourceSpan: ParseSourceSpan): ir.CreateOp;
export declare function disableBindings(): ir.CreateOp;
export declare function enableBindings(): ir.CreateOp;
export declare function listener(name: string, handlerFn: o.Expression): ir.CreateOp;
export declare function pipe(slot: number, name: string): ir.CreateOp;
export declare function namespaceHTML(): ir.CreateOp;
export declare function namespaceSVG(): ir.CreateOp;
export declare function namespaceMath(): ir.CreateOp;
export declare function advance(delta: number, sourceSpan: ParseSourceSpan): ir.UpdateOp;
export declare function reference(slot: number): o.Expression;
export declare function nextContext(steps: number): o.Expression;
export declare function getCurrentView(): o.Expression;
export declare function restoreView(savedView: o.Expression): o.Expression;
export declare function resetView(returnValue: o.Expression): o.Expression;
export declare function text(slot: number, initialValue: string, sourceSpan: ParseSourceSpan | null): ir.CreateOp;
export declare function property(name: string, expression: o.Expression, sanitizer: o.Expression | null, sourceSpan: ParseSourceSpan): ir.UpdateOp;
export declare function attribute(name: string, expression: o.Expression, sanitizer: o.Expression | null): ir.UpdateOp;
export declare function styleProp(name: string, expression: o.Expression, unit: string | null): ir.UpdateOp;
export declare function classProp(name: string, expression: o.Expression): ir.UpdateOp;
export declare function styleMap(expression: o.Expression): ir.UpdateOp;
export declare function classMap(expression: o.Expression): ir.UpdateOp;
export declare function pipeBind(slot: number, varOffset: number, args: o.Expression[]): o.Expression;
export declare function pipeBindV(slot: number, varOffset: number, args: o.Expression): o.Expression;
export declare function textInterpolate(strings: string[], expressions: o.Expression[], sourceSpan: ParseSourceSpan): ir.UpdateOp;
export declare function propertyInterpolate(name: string, strings: string[], expressions: o.Expression[], sanitizer: o.Expression | null, sourceSpan: ParseSourceSpan): ir.UpdateOp;
export declare function attributeInterpolate(name: string, strings: string[], expressions: o.Expression[], sanitizer: o.Expression | null): ir.UpdateOp;
export declare function stylePropInterpolate(name: string, strings: string[], expressions: o.Expression[], unit: string | null): ir.UpdateOp;
export declare function styleMapInterpolate(strings: string[], expressions: o.Expression[]): ir.UpdateOp;
export declare function classMapInterpolate(strings: string[], expressions: o.Expression[]): ir.UpdateOp;
export declare function hostProperty(name: string, expression: o.Expression): ir.UpdateOp;
export declare function pureFunction(varOffset: number, fn: o.Expression, args: o.Expression[]): o.Expression;
//# sourceMappingURL=instruction.d.ts.map