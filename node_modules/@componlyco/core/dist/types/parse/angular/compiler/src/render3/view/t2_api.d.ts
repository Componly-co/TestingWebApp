import { AST } from '../../expression_parser/ast';
import { BoundAttribute, BoundEvent, DeferredBlock, Element, Node, Reference, Template, TextAttribute, Variable } from '../r3_ast';
export interface Target {
    template?: Node[];
}
export interface InputOutputPropertySet {
    hasBindingPropertyName(propertyName: string): boolean;
}
export interface AnimationTriggerNames {
    includesDynamicAnimations: boolean;
    staticTriggerNames: string[];
}
export interface DirectiveMeta {
    name: string;
    selector: string | null;
    isComponent: boolean;
    inputs: InputOutputPropertySet;
    outputs: InputOutputPropertySet;
    exportAs: string[] | null;
    isStructural: boolean;
    animationTriggerNames: AnimationTriggerNames | null;
}
export interface TargetBinder<D extends DirectiveMeta> {
    bind(target: Target): BoundTarget<D>;
}
export interface BoundTarget<DirectiveT extends DirectiveMeta> {
    readonly target: Target;
    getDirectivesOfNode(node: Element | Template): DirectiveT[] | null;
    getReferenceTarget(ref: Reference): {
        directive: DirectiveT;
        node: Element | Template;
    } | Element | Template | null;
    getConsumerOfBinding(binding: BoundAttribute | BoundEvent | TextAttribute): DirectiveT | Element | Template | null;
    getExpressionTarget(expr: AST): Reference | Variable | null;
    getTemplateOfSymbol(symbol: Reference | Variable): Template | null;
    getNestingLevel(template: Template): number;
    getEntitiesInTemplateScope(template: Template | null): ReadonlySet<Reference | Variable>;
    getUsedDirectives(): DirectiveT[];
    getEagerlyUsedDirectives(): DirectiveT[];
    getUsedPipes(): string[];
    getEagerlyUsedPipes(): string[];
    getDeferBlocks(): DeferredBlock[];
}
//# sourceMappingURL=t2_api.d.ts.map