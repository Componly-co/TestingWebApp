import * as o from '../output/output_ast';
import { R3CompiledExpression, R3Reference } from './util';
export interface R3ConstructorFactoryMetadata {
    name: string;
    type: R3Reference;
    typeArgumentCount: number;
    deps: R3DependencyMetadata[] | 'invalid' | null;
    target: FactoryTarget;
}
export declare enum R3FactoryDelegateType {
    Class = 0,
    Function = 1
}
export interface R3DelegatedFnOrClassMetadata extends R3ConstructorFactoryMetadata {
    delegate: o.Expression;
    delegateType: R3FactoryDelegateType;
    delegateDeps: R3DependencyMetadata[];
}
export interface R3ExpressionFactoryMetadata extends R3ConstructorFactoryMetadata {
    expression: o.Expression;
}
export type R3FactoryMetadata = R3ConstructorFactoryMetadata | R3DelegatedFnOrClassMetadata | R3ExpressionFactoryMetadata;
export declare enum FactoryTarget {
    Directive = 0,
    Component = 1,
    Injectable = 2,
    Pipe = 3,
    NgModule = 4
}
export interface R3DependencyMetadata {
    token: o.Expression | null;
    attributeNameType: o.Expression | null;
    host: boolean;
    optional: boolean;
    self: boolean;
    skipSelf: boolean;
}
export declare function compileFactoryFunction(meta: R3FactoryMetadata): R3CompiledExpression;
export declare function createFactoryType(meta: R3FactoryMetadata): o.ExpressionType;
export declare function isDelegatedFactoryMetadata(meta: R3FactoryMetadata): meta is R3DelegatedFnOrClassMetadata;
export declare function isExpressionFactoryMetadata(meta: R3FactoryMetadata): meta is R3ExpressionFactoryMetadata;
//# sourceMappingURL=r3_factory.d.ts.map