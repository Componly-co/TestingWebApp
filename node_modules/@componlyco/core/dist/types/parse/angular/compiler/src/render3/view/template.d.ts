import { LocalResolver } from '../../compiler_util/expression_converter';
import { ConstantPool } from '../../constant_pool';
import * as core from '../../core';
import { AST, AstMemoryEfficientTransformer, BindingPipe, LiteralArray, LiteralMap } from '../../expression_parser/ast';
import * as i18n from '../../i18n/i18n_ast';
import { InterpolationConfig } from '../../ml_parser/interpolation_config';
import { LexerRange } from '../../ml_parser/lexer';
import * as o from '../../output/output_ast';
import { ParseError } from '../../parse_util';
import { CssSelector } from '../../selector';
import { BindingParser } from '../../template_parser/binding_parser';
import * as t from '../r3_ast';
import { DeferBlockTemplateDependency } from './api';
import { I18nContext } from './i18n/context';
import { invalid } from './util';
export declare const LEADING_TRIVIA_CHARS: string[];
export declare function renderFlagCheckIfStmt(flags: core.RenderFlags, statements: o.Statement[]): o.IfStmt;
export declare function prepareEventListenerParameters(eventAst: t.BoundEvent, handlerName?: string | null, scope?: BindingScope | null): o.Expression[];
export interface ComponentDefConsts {
    prepareStatements: o.Statement[];
    constExpressions: o.Expression[];
    i18nVarRefsCache: Map<i18n.I18nMeta, o.ReadVarExpr>;
}
export declare class TemplateDefinitionBuilder implements t.Visitor<void>, LocalResolver {
    private constantPool;
    private level;
    private contextName;
    private i18nContext;
    private templateIndex;
    private templateName;
    private _namespace;
    private i18nUseExternalIds;
    private deferBlocks;
    private _constants;
    private _dataIndex;
    private _bindingContext;
    private _prefixCode;
    private _creationCodeFns;
    private _updateCodeFns;
    private _currentIndex;
    private _tempVariables;
    private _controlFlowTempVariable;
    private _nestedTemplateFns;
    private _bindingScope;
    private _valueConverter;
    private i18n;
    private _pureFunctionSlots;
    private _bindingSlots;
    private fileBasedI18nSuffix;
    private _ngContentReservedSlots;
    private _ngContentSelectorsOffset;
    private _implicitReceiverExpr;
    constructor(constantPool: ConstantPool, parentBindingScope: BindingScope, level: number, contextName: string | null, i18nContext: I18nContext | null, templateIndex: number | null, templateName: string | null, _namespace: o.ExternalReference, relativeContextFilePath: string, i18nUseExternalIds: boolean, deferBlocks: Map<t.DeferredBlock, DeferBlockTemplateDependency[]>, _constants?: ComponentDefConsts);
    buildTemplateFunction(nodes: t.Node[], variables: t.Variable[], ngContentSelectorsOffset?: number, i18n?: i18n.I18nMeta): o.FunctionExpr;
    getLocal(name: string): o.Expression | null;
    notifyImplicitReceiverUse(): void;
    maybeRestoreView(): void;
    private i18nTranslate;
    private registerContextVariables;
    private i18nAppendBindings;
    private i18nBindProps;
    private i18nGenerateMainBlockVar;
    private i18nGenerateClosureVar;
    private i18nUpdateRef;
    private i18nStart;
    private i18nEnd;
    private i18nAttributesInstruction;
    private getNamespaceInstruction;
    private addNamespaceInstruction;
    private interpolatedUpdateInstruction;
    visitContent(ngContent: t.Content): void;
    visitElement(element: t.Element): void;
    private createEmbeddedTemplateFn;
    visitTemplate(template: t.Template): void;
    readonly visitReference: typeof invalid;
    readonly visitVariable: typeof invalid;
    readonly visitTextAttribute: typeof invalid;
    readonly visitBoundAttribute: typeof invalid;
    readonly visitBoundEvent: typeof invalid;
    readonly visitDeferredTrigger: typeof invalid;
    readonly visitDeferredBlockError: typeof invalid;
    readonly visitDeferredBlockLoading: typeof invalid;
    readonly visitDeferredBlockPlaceholder: typeof invalid;
    readonly visitIfBlockBranch: typeof invalid;
    readonly visitSwitchBlockCase: typeof invalid;
    visitBoundText(text: t.BoundText): void;
    visitText(text: t.Text): void;
    visitIcu(icu: t.Icu): null;
    visitIfBlock(block: t.IfBlock): void;
    visitSwitchBlock(block: t.SwitchBlock): void;
    visitDeferredBlock(deferred: t.DeferredBlock): void;
    private createDeferredDepsFunction;
    private createDeferTriggerInstructions;
    private allocateDataSlot;
    visitForLoopBlock(block: t.ForLoopBlock): void;
    visitForLoopBlockEmpty(block: t.ForLoopBlockEmpty): void;
    getConstCount(): number;
    getVarCount(): number;
    getConsts(): ComponentDefConsts;
    getNgContentSelectors(): o.Expression | null;
    private bindingContext;
    private templatePropertyBindings;
    private instructionFn;
    private processStylingUpdateInstruction;
    private creationInstruction;
    private updateInstructionWithAdvance;
    private updateInstruction;
    private addAdvanceInstructionIfNecessary;
    private allocatePureFunctionSlots;
    private allocateBindingSlots;
    private getImplicitReceiverExpr;
    private convertPropertyBinding;
    private getUpdateInstructionArguments;
    private allocateControlFlowTempVariable;
    private getAttributeExpressions;
    private addToConsts;
    private addAttrsToConsts;
    private prepareRefsArray;
    private prepareListenerParameter;
}
export declare class ValueConverter extends AstMemoryEfficientTransformer {
    private constantPool;
    private allocateSlot;
    private allocatePureFunctionSlots;
    private definePipe;
    private _pipeBindExprs;
    constructor(constantPool: ConstantPool, allocateSlot: () => number, allocatePureFunctionSlots: (numSlots: number) => number, definePipe: (name: string, localName: string, slot: number, value: o.Expression) => void);
    visitPipe(pipe: BindingPipe, context: any): AST;
    updatePipeSlotOffsets(bindingSlots: number): void;
    visitLiteralArray(array: LiteralArray, context: any): AST;
    visitLiteralMap(map: LiteralMap, context: any): AST;
}
type DeclareLocalVarCallback = (scope: BindingScope, relativeLevel: number) => o.Statement[];
type LocalVarRefCallback = (scope: BindingScope) => o.Expression;
type BindingData = {
    retrievalLevel: number;
    lhs: o.Expression | LocalVarRefCallback;
    declareLocalCallback?: DeclareLocalVarCallback;
    declare: boolean;
    priority: number;
};
export declare class BindingScope implements LocalResolver {
    bindingLevel: number;
    private parent;
    globals?: Set<string> | undefined;
    private map;
    private referenceNameIndex;
    private restoreViewVariable;
    private usesRestoredViewContext;
    static createRootScope(): BindingScope;
    private constructor();
    get(name: string): o.Expression | null;
    set(retrievalLevel: number, name: string, lhs: o.Expression | LocalVarRefCallback, priority?: number, declareLocalCallback?: DeclareLocalVarCallback, localRef?: true): BindingScope;
    getLocal(name: string): (o.Expression | null);
    notifyImplicitReceiverUse(): void;
    nestedScope(level: number, globals?: Set<string>): BindingScope;
    getOrCreateSharedContextVar(retrievalLevel: number): o.ReadVarExpr;
    getSharedContextName(retrievalLevel: number): o.ReadVarExpr | null;
    maybeGenerateSharedContextVar(value: BindingData): void;
    generateSharedContextVar(retrievalLevel: number): void;
    getComponentProperty(name: string): o.Expression;
    maybeRestoreView(): void;
    restoreViewStatement(): o.Statement | null;
    viewSnapshotStatements(): o.Statement[];
    isListenerScope(): boolean | null;
    variableDeclarations(): o.Statement[];
    freshReferenceName(): string;
    hasRestoreViewVariable(): boolean;
    notifyRestoredViewContextUse(): void;
}
export declare function createCssSelector(elementName: string, attributes: {
    [name: string]: string;
}): CssSelector;
export interface ParseTemplateOptions {
    preserveWhitespaces?: boolean;
    preserveLineEndings?: boolean;
    interpolationConfig?: InterpolationConfig;
    range?: LexerRange;
    escapedString?: boolean;
    leadingTriviaChars?: string[];
    enableI18nLegacyMessageIdFormat?: boolean;
    i18nNormalizeLineEndingsInICUs?: boolean;
    alwaysAttemptHtmlToR3AstConversion?: boolean;
    collectCommentNodes?: boolean;
    enabledBlockTypes?: Set<string>;
}
export declare function parseTemplate(template: string, templateUrl: string, options?: ParseTemplateOptions): ParsedTemplate;
export declare function makeBindingParser(interpolationConfig?: InterpolationConfig): BindingParser;
export declare function resolveSanitizationFn(context: core.SecurityContext, isAttribute?: boolean): o.ExternalExpr | null;
export declare function getTranslationDeclStmts(message: i18n.Message, variable: o.ReadVarExpr, closureVar: o.ReadVarExpr, params?: {
    [name: string]: o.Expression;
}, transformFn?: (raw: o.ReadVarExpr) => o.Expression): o.Statement[];
export interface ParsedTemplate {
    preserveWhitespaces?: boolean;
    interpolationConfig?: InterpolationConfig;
    errors: ParseError[] | null;
    nodes: t.Node[];
    styleUrls: string[];
    styles: string[];
    ngContentSelectors: string[];
    commentNodes?: t.Comment[];
}
export {};
//# sourceMappingURL=template.d.ts.map