import { ChangeDetectionStrategy, ViewEncapsulation } from '../../core';
import { InterpolationConfig } from '../../ml_parser/interpolation_config';
import * as o from '../../output/output_ast';
import { ParseSourceSpan } from '../../parse_util';
import * as t from '../r3_ast';
import { R3DependencyMetadata } from '../r3_factory';
import { MaybeForwardRefExpression, R3Reference } from '../util';
export interface R3DirectiveMetadata {
    name: string;
    type: R3Reference;
    typeArgumentCount: number;
    typeSourceSpan: ParseSourceSpan;
    deps: R3DependencyMetadata[] | 'invalid' | null;
    selector: string | null;
    queries: R3QueryMetadata[];
    viewQueries: R3QueryMetadata[];
    host: R3HostMetadata;
    lifecycle: {
        usesOnChanges: boolean;
    };
    inputs: {
        [field: string]: R3InputMetadata;
    };
    outputs: {
        [field: string]: string;
    };
    usesInheritance: boolean;
    fullInheritance: boolean;
    exportAs: string[] | null;
    providers: o.Expression | null;
    isStandalone: boolean;
    isSignal: boolean;
    hostDirectives: R3HostDirectiveMetadata[] | null;
}
export declare const enum DeclarationListEmitMode {
    Direct = 0,
    Closure = 1,
    ClosureResolved = 2,
    RuntimeResolved = 3
}
export interface DeferBlockTemplateDependency {
    type: o.WrappedNodeExpr<unknown>;
    symbolName: string;
    isDeferrable: boolean;
    importPath: string | null;
}
export interface R3ComponentMetadata<DeclarationT extends R3TemplateDependency> extends R3DirectiveMetadata {
    template: {
        nodes: t.Node[];
        ngContentSelectors: string[];
    };
    declarations: DeclarationT[];
    deferrableDeclToImportDecl: Map<o.Expression, o.Expression>;
    deferBlocks: Map<t.DeferredBlock, Array<DeferBlockTemplateDependency>>;
    declarationListEmitMode: DeclarationListEmitMode;
    styles: string[];
    encapsulation: ViewEncapsulation;
    animations: o.Expression | null;
    viewProviders: o.Expression | null;
    relativeContextFilePath: string;
    i18nUseExternalIds: boolean;
    interpolation: InterpolationConfig;
    changeDetection?: ChangeDetectionStrategy;
    rawImports?: o.Expression;
}
export interface R3InputMetadata {
    classPropertyName: string;
    bindingPropertyName: string;
    required: boolean;
    transformFunction: o.Expression | null;
}
export declare enum R3TemplateDependencyKind {
    Directive = 0,
    Pipe = 1,
    NgModule = 2
}
export interface R3TemplateDependency {
    kind: R3TemplateDependencyKind;
    type: o.Expression;
}
export type R3TemplateDependencyMetadata = R3DirectiveDependencyMetadata | R3PipeDependencyMetadata | R3NgModuleDependencyMetadata;
export interface R3DirectiveDependencyMetadata extends R3TemplateDependency {
    kind: R3TemplateDependencyKind.Directive;
    selector: string;
    inputs: string[];
    outputs: string[];
    exportAs: string[] | null;
    isComponent: boolean;
}
export interface R3PipeDependencyMetadata extends R3TemplateDependency {
    kind: R3TemplateDependencyKind.Pipe;
    name: string;
}
export interface R3NgModuleDependencyMetadata extends R3TemplateDependency {
    kind: R3TemplateDependencyKind.NgModule;
}
export interface R3QueryMetadata {
    propertyName: string;
    first: boolean;
    predicate: MaybeForwardRefExpression | string[];
    descendants: boolean;
    emitDistinctChangesOnly: boolean;
    read: o.Expression | null;
    static: boolean;
}
export interface R3HostMetadata {
    attributes: {
        [key: string]: o.Expression;
    };
    listeners: {
        [key: string]: string;
    };
    properties: {
        [key: string]: string;
    };
    specialAttributes: {
        styleAttr?: string;
        classAttr?: string;
    };
}
export interface R3HostDirectiveMetadata {
    directive: R3Reference;
    isForwardReference: boolean;
    inputs: {
        [publicName: string]: string;
    } | null;
    outputs: {
        [publicName: string]: string;
    } | null;
}
//# sourceMappingURL=api.d.ts.map