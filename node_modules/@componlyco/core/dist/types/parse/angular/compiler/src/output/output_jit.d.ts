import { EmitterVisitorContext } from './abstract_emitter';
import { AbstractJsEmitterVisitor } from './abstract_js_emitter';
import * as o from './output_ast';
export interface ExternalReferenceResolver {
    resolveExternalReference(ref: o.ExternalReference): unknown;
}
export declare class JitEvaluator {
    evaluateStatements(sourceUrl: string, statements: o.Statement[], refResolver: ExternalReferenceResolver, createSourceMaps: boolean): {
        [key: string]: any;
    };
    evaluateCode(sourceUrl: string, ctx: EmitterVisitorContext, vars: {
        [key: string]: any;
    }, createSourceMap: boolean): any;
    executeFunction(fn: Function, args: any[]): any;
}
export declare class JitEmitterVisitor extends AbstractJsEmitterVisitor {
    private refResolver;
    private _evalArgNames;
    private _evalArgValues;
    private _evalExportedVars;
    constructor(refResolver: ExternalReferenceResolver);
    createReturnStmt(ctx: EmitterVisitorContext): void;
    getArgs(): {
        [key: string]: any;
    };
    visitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext): any;
    visitWrappedNodeExpr(ast: o.WrappedNodeExpr<any>, ctx: EmitterVisitorContext): any;
    visitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext): any;
    visitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, ctx: EmitterVisitorContext): any;
    private _emitReferenceToExternal;
}
//# sourceMappingURL=output_jit.d.ts.map