import * as i18n from '../../../i18n/i18n_ast';
import * as html from '../../../ml_parser/ast';
import { InterpolationConfig } from '../../../ml_parser/interpolation_config';
import { ParseTreeResult } from '../../../ml_parser/parser';
import * as o from '../../../output/output_ast';
export type I18nMeta = {
    id?: string;
    customId?: string;
    legacyIds?: string[];
    description?: string;
    meaning?: string;
};
export declare class I18nMetaVisitor implements html.Visitor {
    private interpolationConfig;
    private keepI18nAttrs;
    private enableI18nLegacyMessageIdFormat;
    hasI18nMeta: boolean;
    private _errors;
    constructor(interpolationConfig?: InterpolationConfig, keepI18nAttrs?: boolean, enableI18nLegacyMessageIdFormat?: boolean);
    private _generateI18nMessage;
    visitAllWithErrors(nodes: html.Node[]): ParseTreeResult;
    visitElement(element: html.Element): any;
    visitExpansion(expansion: html.Expansion, currentMessage: i18n.Message | null): any;
    visitText(text: html.Text): any;
    visitAttribute(attribute: html.Attribute): any;
    visitComment(comment: html.Comment): any;
    visitExpansionCase(expansionCase: html.ExpansionCase): any;
    visitBlockGroup(group: html.BlockGroup, context: any): html.BlockGroup;
    visitBlock(block: html.Block, context: any): html.Block;
    visitBlockParameter(parameter: html.BlockParameter, context: any): html.BlockParameter;
    private _parseMetadata;
    private _setMessageId;
    private _setLegacyIds;
    private _reportError;
}
export declare function parseI18nMeta(meta?: string): I18nMeta;
export declare function i18nMetaToJSDoc(meta: I18nMeta): o.JSDocComment;
//# sourceMappingURL=meta.d.ts.map