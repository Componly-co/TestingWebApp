import { ConstantPool } from '../../../constant_pool';
import * as o from '../../../output/output_ast';
import * as ir from '../ir';
export declare abstract class CompilationUnit {
    readonly xref: ir.XrefId;
    readonly create: ir.OpList<ir.CreateOp>;
    readonly update: ir.OpList<ir.UpdateOp>;
    abstract readonly job: CompilationJob;
    constructor(xref: ir.XrefId);
    ops(): Generator<ir.CreateOp | ir.UpdateOp>;
    fnName: string | null;
    vars: number | null;
}
export interface CompilationJob {
    get units(): Iterable<CompilationUnit>;
    get fnSuffix(): string;
    compatibility: ir.CompatibilityMode;
    componentName: string;
    root: CompilationUnit;
    pool: ConstantPool;
    allocateXrefId(): ir.XrefId;
}
export declare class HostBindingCompilationJob extends CompilationUnit implements CompilationJob {
    readonly componentName: string;
    readonly pool: ConstantPool;
    readonly compatibility: ir.CompatibilityMode;
    readonly fnSuffix = "HostBindings";
    readonly units: this[];
    private nextXrefId;
    constructor(componentName: string, pool: ConstantPool, compatibility: ir.CompatibilityMode);
    get job(): this;
    get root(): this;
    allocateXrefId(): ir.XrefId;
}
export declare class ComponentCompilationJob implements CompilationJob {
    readonly componentName: string;
    readonly pool: ConstantPool;
    readonly compatibility: ir.CompatibilityMode;
    readonly fnSuffix = "Template";
    private nextXrefId;
    readonly views: Map<ir.XrefId, ViewCompilationUnit>;
    get units(): Iterable<ViewCompilationUnit>;
    readonly consts: o.Expression[];
    readonly root: ViewCompilationUnit;
    constructor(componentName: string, pool: ConstantPool, compatibility: ir.CompatibilityMode);
    allocateView(parent: ir.XrefId): ViewCompilationUnit;
    allocateXrefId(): ir.XrefId;
    addConst(newConst: o.Expression): ir.ConstIndex;
}
export declare class ViewCompilationUnit extends CompilationUnit {
    readonly job: ComponentCompilationJob;
    readonly parent: ir.XrefId | null;
    constructor(job: ComponentCompilationJob, xref: ir.XrefId, parent: ir.XrefId | null);
    readonly contextVariables: Map<string, string>;
    decls: number | null;
    get compatibility(): ir.CompatibilityMode;
}
//# sourceMappingURL=compilation.d.ts.map