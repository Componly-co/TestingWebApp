import { SyntaxKind, SourceFile } from "ts-morph";
import type { ComponentDeclaration } from "./functions-classes";
import type { JsxOpeningElement, JsxSelfClosingElement, ImportDeclaration, JsxElement } from "ts-morph";
export declare function getPathRelativeToRoot(sourceFile: SourceFile, projectPath: string): string;
export declare function getImportAlias(importDeclaration: ImportDeclaration): Record<string, string>;
export declare function getTagName(element: JsxOpeningElement | JsxSelfClosingElement): string;
export declare function getElementProps(sourceFile: SourceFile, projectPath: string, componentName: string): {
    [key: string]: {
        line: number;
        column: number;
        filePath: string;
    }[];
};
export declare function getJSXElementNames(node: ComponentDeclaration | SourceFile): string[];
export declare function getJSXElementNamesWithParent(node: ComponentDeclaration | SourceFile): {
    name: string;
    parent: string | null;
}[];
export declare function hasAncestorOfType(node: JsxElement | JsxSelfClosingElement, kinds: SyntaxKind[]): string | null;
export declare function getImportedEntitiesNames(importDeclaration: ImportDeclaration): {
    value: string;
    type: 'named' | 'default';
}[];
export declare function getComponentName(component: ComponentDeclaration): string | undefined;
export declare function getComponentNamesPerImport(importDeclaration: ImportDeclaration): string[];
export declare function getStencilComponentNames(projectPath?: string | null): Promise<Record<string, string[]>>;
//# sourceMappingURL=names.d.ts.map