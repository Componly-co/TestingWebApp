var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { getStylesRef, Group, Image, Stack, Text, Modal, Card as MantineCard, } from "@mantine/core";
import { Button } from "../Button";
import { Colors, FontSizes, Layout } from "../../design-tokens";
import close from "../../assets/closeIcon.svg";
import logo from "../../assets/logo.svg";
export function LoadingModal(_a) {
    var _b;
    var isOpened = _a.isOpened, _c = _a.onClose, onClose = _c === void 0 ? function () { return null; } : _c, title = _a.title, styles = _a.styles, sx = _a.sx, _d = _a.size, size = _d === void 0 ? "lg" : _d, selector = _a.selector;
    return (_jsx(Modal, __assign({ opened: isOpened, onClose: onClose, withCloseButton: false, overlayProps: {
            opacity: 0.55,
            blur: 3,
        }, centered: true, size: size, styles: __assign({ inner: {
                left: 0,
                "& section": {
                    background: "transparent",
                    boxShadow: "none",
                },
            }, body: {
                padding: 0,
            } }, styles) }, selector, { children: _jsx(MantineCard, __assign({ radius: "xl", padding: 0, sx: __assign((_b = { height: "100%", minHeight: 245, boxShadow: "0px 0px 2px 0.5px #0A090B05, 0px 7px 14px 0px #0A090B12", border: "2px solid ".concat(Colors.Disabled.Gray), display: "flex", justifyContent: "space-between", flexDirection: "column", "&:hover": {
                        border: Colors.Card.Hover.Border,
                    }, "&:focus": {
                        boxShadow: Colors.Card.Focus,
                    } }, _b["&:hover .".concat(getStylesRef("primary-text"))] = {
                color: Colors.Card.Hover.PrimaryTextColor,
            }, _b.cursor = undefined, _b), sx), tabIndex: 0 }, { children: _jsxs(Stack, __assign({ style: {
                    flex: 1,
                    padding: Layout.TBR,
                    gap: Layout.xl,
                } }, { children: [title && onClose && (_jsxs(Group, __assign({ position: "apart", noWrap: true, align: "flex-start" }, { children: [title && (_jsx(Text, __assign({ sx: __assign({ ref: getStylesRef("primary-text"), fontFamily: "Ruda, sans-serif" }, FontSizes.Subtitle2) }, { children: title }))), onClose && (_jsx(Button, { type: "borders", onClick: onClose, icon: _jsx(Image, { width: "24px", alt: "close", src: close }), sx: {
                                    padding: 7,
                                    height: "auto",
                                    marginTop: -7,
                                    marginRight: -7,
                                } }))] }))), _jsx(Stack, __assign({ align: "center", justify: "center", style: {
                            flex: 1,
                        } }, { children: _jsx(Image, { width: "110px", alt: "close", src: logo }) }))] })) })) })));
}
