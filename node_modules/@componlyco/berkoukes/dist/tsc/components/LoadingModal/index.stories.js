var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { LoadingModal } from "./index";
import { Button } from "../Button";
export default {
    title: "LoadingModal",
    component: LoadingModal,
    args: {
        title: "Loading",
        size: "lg",
    },
};
export var Template = function (props) {
    var _a = useState(false), isOpened = _a[0], setOpen = _a[1];
    return (_jsxs(_Fragment, { children: [_jsx(Button, { type: "primary", label: "Modal", onClick: function () { return setOpen(true); } }), _jsx(LoadingModal, __assign({}, props, { isOpened: isOpened, onClose: function () { return setOpen(false); } }))] }));
};
export var Small = Template.bind({});
Small.args = {
    size: "sm",
};
