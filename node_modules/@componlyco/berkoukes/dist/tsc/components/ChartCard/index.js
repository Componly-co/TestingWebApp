var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Group, Card as MantineCard, Stack, Text, getStylesRef, createStyles } from "@mantine/core";
import { MoreVertical } from "lucide-react";
import { Button } from "../Button";
import { Colors, FontSizes, Layout } from "../../design-tokens";
import { Divider } from "../Divider";
import { Tabs } from "../Tabs";
import { Tags } from "../Tags";
import cn from "classnames";
var useStyles = createStyles(function () {
    var _a;
    return ({
        tabs: (_a = {
                overflowY: "auto",
                //20px is the padding
                width: "calc( 100% + 20px)",
                "&::-webkit-scrollbar": {
                    display: "none",
                }
            },
            _a["& .mantine-Tabs-tabsList"] = {
                flexWrap: "nowrap",
            },
            _a),
        tagsRoot: {
            overflowY: "auto",
            //20px is the padding
            width: "calc( 100% + 20px)",
            "&::-webkit-scrollbar": {
                display: "none",
            },
        },
    });
});
export var ChartCard = function (_a) {
    var _b;
    var disabled = _a.disabled, primaryText = _a.primaryText, secondaryText = _a.secondaryText, onClick = _a.onClick, sx = _a.sx, tabsItems = _a.tabsItems, tabsValue = _a.tabsValue, tabsDefaultValue = _a.tabsDefaultValue, tags = _a.tags, _c = _a.buttonText, buttonText = _c === void 0 ? "Full report" : _c, children = _a.children, _classes = _a._classes, _d = _a.withFooter, withFooter = _d === void 0 ? true : _d, _e = _a.withActions, withActions = _e === void 0 ? false : _e, _f = _a.disableActions, disableActions = _f === void 0 ? false : _f, _g = _a.onClickActions, onClickActions = _g === void 0 ? function () { return null; } : _g, selector = _a.selector, id = _a.id;
    var classes = useStyles().classes;
    return (_jsxs(MantineCard, __assign({ radius: "xl", padding: 0, sx: __assign((_b = { height: "100%", minHeight: 245, boxShadow: "0px 0px 2px 0.5px #0A090B05, 0px 7px 14px 0px #0A090B12", border: "2px solid ".concat(Colors.Disabled.Gray), display: "flex", justifyContent: "space-between", flexDirection: "column", "&:hover": {
                    border: disabled === true ? undefined : Colors.Card.Hover.Border,
                }, "&:focus": {
                    boxShadow: disabled === true ? undefined : Colors.Card.Focus,
                } }, _b["&:hover .".concat(getStylesRef("primary-text-".concat(id)))] = {
            color: disabled === true ? undefined : Colors.Card.Hover.PrimaryTextColor,
        }, _b.cursor = disabled === true ? "not-allowed" : undefined, _b), sx), tabIndex: 0 }, selector, { children: [_jsxs(Stack, __assign({ style: {
                    color: disabled === true ? "gray" : "black",
                    flex: 1,
                    padding: Layout.TBR,
                    gap: Layout.xl,
                }, className: _classes === null || _classes === void 0 ? void 0 : _classes.body }, { children: [_jsxs(Group, __assign({ className: _classes === null || _classes === void 0 ? void 0 : _classes.header, position: "apart", noWrap: true, align: "flex-start" }, { children: [_jsx(Text, __assign({ sx: __assign({ ref: getStylesRef("primary-text-".concat(id)), fontFamily: "Ruda, sans-serif" }, FontSizes.Subtitle2) }, { children: primaryText })), (withActions || disableActions) && (_jsx(Button, { disabled: disableActions, type: "no-borders", icon: _jsx(MoreVertical, {}), onClick: onClickActions, sx: {
                                    padding: 7,
                                    height: "auto",
                                    marginTop: -7,
                                    marginRight: -7,
                                } }))] })), secondaryText && (_jsx(Text, __assign({ sx: __assign({ color: Colors.Card.Text.Default.Text, marginTop: -8 }, FontSizes.Body2) }, { children: secondaryText }))), tabsItems && (_jsx(Tabs, { className: cn(classes.tabs, _classes === null || _classes === void 0 ? void 0 : _classes.tabs), tabItems: tabsItems !== null && tabsItems !== void 0 ? tabsItems : [], defaultValue: tabsDefaultValue, value: tabsValue })), tags && (_jsx(Group, __assign({ className: cn(classes.tagsRoot, _classes === null || _classes === void 0 ? void 0 : _classes.tagsRoot) }, { children: _jsx(Group, __assign({ noWrap: true }, { children: tags === null || tags === void 0 ? void 0 : tags.map(function (_a) {
                                var icon = _a.icon, label = _a.label, rest = __rest(_a, ["icon", "label"]);
                                return (_jsx(Tags, __assign({ className: _classes === null || _classes === void 0 ? void 0 : _classes.tags, label: label !== null && label !== void 0 ? label : "", icons: icon }, rest), label));
                            }) })) }))), children] })), withFooter && (_jsxs(_Fragment, { children: [_jsx(Divider, { sx: { width: "100%" }, borderColor: Colors.DarkGrey.cf0 }), _jsx(Stack, __assign({ align: "flex-end", style: { maxHeight: 72, padding: "".concat(Layout.lg, " ").concat(Layout.xl) } }, { children: _jsx(Button, { disabled: disabled, type: "borders", label: buttonText, onClick: onClick }) }))] }))] })));
};
