var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Group, Menu, Stack, Text, Container, Flex } from "@mantine/core";
import { ChevronDown } from "lucide-react";
import { Avatar } from "../Avatar";
import { Button, ButtonType } from "../Button";
import { BoxShadows, Colors, FontSizes, Layout } from "../../design-tokens";
export var UserDropdownTypes = {
    Contained: "contained",
    NotContained: "not-contained",
};
export function UserProfile(_a) {
    var src = _a.src, handle = _a.handle, name = _a.name, _b = _a.type, type = _b === void 0 ? UserDropdownTypes.NotContained : _b, _c = _a.avatarSize, avatarSize = _c === void 0 ? 40 : _c, avatarType = _a.avatarType, width = _a.width, _d = _a.styles, styles = _d === void 0 ? {} : _d, _e = _a.items, items = _e === void 0 ? [] : _e, selector = _a.selector;
    return (_jsxs(Menu, __assign({ styles: styles, shadow: "md", width: width || "200px", radius: "xl" }, selector, { children: [_jsx(Menu.Target, { children: _jsxs(Flex, __assign({ justify: "space-between", align: "center", sx: {
                        padding: Layout.sm,
                        gap: Layout.md,
                        borderRadius: "30px",
                        boxShadow: type === UserDropdownTypes.Contained ? BoxShadows.UserProfile.MenuShadow : "none",
                        borderWidth: 2,
                        border: type === UserDropdownTypes.Contained
                            ? "1px solid transparent"
                            : "none",
                        "&:hover": {
                            cursor: "pointer",
                            borderColor: type === UserDropdownTypes.Contained
                                ? Colors.Badge.neutral.Border.filled
                                : "none",
                        },
                        "&:active": {
                            border: type === UserDropdownTypes.Contained
                                ? "1px solid ".concat(Colors.Hovered.Border)
                                : "none",
                            boxShadow: type === UserDropdownTypes.Contained ? BoxShadows.UserProfile.GroupActive : "none",
                        },
                    } }, { children: [_jsxs(Group, __assign({ noWrap: true, spacing: Layout.md }, { children: [_jsx(Avatar, { type: avatarType, src: src, size: avatarSize }), _jsxs(Stack, __assign({ spacing: 0 }, { children: [_jsx(Text, __assign({ style: __assign({ whiteSpace: "nowrap" }, FontSizes.Subtitle3) }, { children: name })), _jsx(Text, __assign({ style: __assign(__assign({ whiteSpace: "nowrap" }, FontSizes.Helper), { marginTop: '-4px' }) }, { children: handle }))] }))] })), _jsx(Button, { icon: _jsx(ChevronDown, {}), type: ButtonType.NoBorders })] })) }), _jsx(Menu.Dropdown, __assign({ sx: {
                    boxShadow: BoxShadows.UserProfile.DropdownShadow,
                    border: "1px solid ".concat(Colors.Badge.neutral.Border.filled),
                } }, { children: _jsx(Container, { children: items.map(function (_a) {
                        var icon = _a.icon, label = _a.label, rest = __rest(_a, ["icon", "label"]);
                        return (_jsx(Menu.Item, __assign({ icon: icon }, rest, { children: label })));
                    }) }) }))] })));
}
