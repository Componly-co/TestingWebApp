var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Group } from "@mantine/core";
import { Search } from "lucide-react";
import { Button, ButtonSizes } from "../Button";
import { Colors } from "../../design-tokens";
import { TextInput } from "../TextInput";
export var ActionContainerType = {
    Primary: "primary",
    Secondary: "secondary",
};
export function ActionContainer(_a) {
    var type = _a.type, buttons = _a.buttons, _b = _a.placeholder, placeholder = _b === void 0 ? "Search" : _b, sx = _a.sx, _c = _a.disabledInput, disabledInput = _c === void 0 ? false : _c, inputSelector = _a.inputSelector;
    return (_jsx(Group, __assign({ sx: sx }, { children: type === ActionContainerType.Secondary ? (_jsxs(_Fragment, { children: [_jsx(TextInput, __assign({ label: "", disabled: disabledInput, placeholder: placeholder, type: "search", showHelpIcon: false, icon: _jsx(Search, { color: Colors.Button.borders.Default.Text }), sx: {
                        width: "max-content",
                        borderColor: Colors.Button.borders.Default.Border
                    } }, inputSelector)), buttons.map(function (_a) {
                    var label = _a.label, rest = __rest(_a, ["label"]);
                    return (_jsx(Button, __assign({ label: label, size: ButtonSizes.Small }, rest), label));
                })] })) : (buttons.map(function (_a) {
            var label = _a.label, rest = __rest(_a, ["label"]);
            return (_jsx(Button, __assign({ label: label, size: ButtonSizes.Normal }, rest), label));
        })) })));
}
