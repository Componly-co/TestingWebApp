var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { getStylesRef, Group, Image, Stack, Text, Modal, Card as MantineCard, } from "@mantine/core";
import { Checkbox } from "../Checkbox";
import { Colors } from "../../design-tokens";
import { Button } from "../Button";
import close from "../../assets/closeIcon.svg";
import { useState } from "react";
import { Tags } from "../Tags";
import { Divider } from "../Divider";
export function FilterModal(_a) {
    var _b;
    var sections = _a.sections, onValidate = _a.onValidate, isOpened = _a.isOpened, _c = _a.onClose, onClose = _c === void 0 ? function () { return null; } : _c, title = _a.title, styles = _a.styles, sx = _a.sx, _d = _a.size, size = _d === void 0 ? 500 : _d, selector = _a.selector;
    var _e = useState({}), selectedFilters = _e[0], setSelectedFilters = _e[1];
    var handleCheckboxChange = function (sectionTitle, value) {
        setSelectedFilters(function (prevSelectedFilters) {
            var _a, _b;
            var sectionFilters = prevSelectedFilters[sectionTitle] || [];
            var checked = sectionFilters.find(function (filter) { return filter === value; });
            if (!checked) {
                return __assign(__assign({}, prevSelectedFilters), (_a = {}, _a[sectionTitle] = __spreadArray(__spreadArray([], sectionFilters, true), [value], false), _a));
            }
            else {
                return __assign(__assign({}, prevSelectedFilters), (_b = {}, _b[sectionTitle] = sectionFilters.filter(function (filter) { return filter !== value; }), _b));
            }
        });
    };
    var handleValidate = function () {
        onValidate(selectedFilters);
        onClose();
    };
    return (_jsx(Modal, __assign({ opened: isOpened, onClose: onClose, withCloseButton: false, overlayProps: {
            opacity: 0.55,
            blur: 3,
        }, centered: true, size: size, styles: __assign({ inner: {
                left: 0,
                "& section": {
                    background: "transparent",
                    boxShadow: "none",
                },
            }, body: {
                padding: 0,
            } }, styles) }, selector, { children: _jsx(MantineCard, __assign({ radius: "xl", padding: 0, sx: __assign((_b = { maxHeight: '90vh', height: "100%", minHeight: 245, boxShadow: "0px 0px 2px 0.5px #0A090B05, 0px 7px 14px 0px #0A090B12", border: "2px solid ".concat(Colors.Disabled.Gray), display: "flex", justifyContent: "space-between", flexDirection: "column", "&:hover": {
                        border: Colors.Card.Hover.Border,
                    }, "&:focus": {
                        boxShadow: Colors.Card.Focus,
                    } }, _b["&:hover .".concat(getStylesRef("primary-text"))] = {
                color: Colors.Card.Hover.PrimaryTextColor,
            }, _b.cursor = undefined, _b), sx), tabIndex: 0 }, { children: _jsxs(Stack, __assign({ style: {
                    flex: 1,
                    padding: 20,
                    overflow: 'hidden'
                } }, { children: [title && onClose && (_jsxs(Group, __assign({ position: "apart", noWrap: true, align: "flex-start" }, { children: [title && (_jsx(Text, __assign({ fw: 700, size: "24px", sx: {
                                    ref: getStylesRef("primary-text"),
                                    lineHeight: "24px",
                                    fontFamily: "Ruda, sans-serif",
                                } }, { children: title }))), onClose && (_jsx(Button, { type: "borders", onClick: onClose, icon: _jsx(Image, { width: "24px", alt: "close", src: close }), sx: {
                                    padding: 7,
                                    height: "auto",
                                    marginTop: -7,
                                    marginRight: -7,
                                } }))] }))), _jsxs(Stack, __assign({ align: "left", style: {
                            flex: 1,
                            width: "100%",
                            overflowX: 'hidden',
                            padding: '0 4px 3px'
                        } }, { children: [sections.map(function (section) { return (_jsx(FilterSection, { section: section, onCheckboxChange: handleCheckboxChange, selectedFilters: selectedFilters[section.title] || [] })); }), _jsxs(Stack, __assign({ sx: { marginTop: 8 } }, { children: [_jsx(Divider, { sx: { marginLeft: "-24px", marginRight: "-24px" } }), _jsxs(Group, __assign({ sx: { justifyContent: "space-between", padding: "0 0", margin: "0" } }, { children: [_jsx(Button, { type: "text-primary", label: "Clear all filters", size: "normal", onClick: function () { return setSelectedFilters({}); } }), _jsx(Button, { type: "primary", label: "Validate", size: "normal", onClick: function () { return handleValidate(); } })] }))] }))] }))] })) })) })));
}
function FilterSection(_a) {
    var section = _a.section, onCheckboxChange = _a.onCheckboxChange, selectedFilters = _a.selectedFilters;
    var type = section.type;
    return (_jsxs(Stack, __assign({ spacing: "24px" }, { children: [section.title ? (_jsx(Text, __assign({ fw: 700, size: "24px", sx: {
                    ref: getStylesRef("secondary-text"),
                    lineHeight: "24px",
                    fontFamily: "Ruda, sans-serif",
                } }, { children: section.title }))) : null, _jsx(Group, __assign({ spacing: "8px" }, { children: section.data.map(function (_a) {
                    var label = _a.label, value = _a.value;
                    var is = selectedFilters === null || selectedFilters === void 0 ? void 0 : selectedFilters.includes(value);
                    if (type === 'button') {
                        return _jsx(Tags, { sx: { padding: "12px" }, label: label, variant: is ? "accent" : "neutral", showClose: false, onClick: function () { return onCheckboxChange(section.title, value); }, style: {
                                border: 'none'
                            } });
                    }
                    return (_jsx(Tags, { size: "large", sx: {
                            padding: "12px",
                            height: 'auto',
                            boxShadow: '0px 5px 8px -5px #0A090B0A, 0px 1px 4px 1px #0A090B05'
                        }, label: [_jsx(Checkbox, { checked: is }), label], variant: "neutral", showClose: false, onClick: function () { return onCheckboxChange(section.title, value); } }));
                }) }))] })));
}
