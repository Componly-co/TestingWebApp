var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useState } from "react";
import { FilterModal } from "./index";
import { Button } from "../Button";
export default {
    title: "Filter Modal",
    component: FilterModal,
    args: {
        title: "Filters",
        size: 500,
        sections: [
            {
                type: 'button',
                data: [
                    {
                        label: "Design System",
                        value: "Design System",
                    },
                    {
                        label: "Custom",
                        value: "Custom",
                    },
                    {
                        label: "Override",
                        value: "Override",
                    },
                ],
            },
            {
                title: "Tag(s)",
                data: [
                    {
                        label: "Tag1",
                        value: "Tag1",
                    },
                    {
                        label: "Tag2",
                        value: "Tag2",
                    },
                    {
                        label: "Tag3",
                        value: "Tag3",
                    },
                    {
                        label: "Tagwith LongName 4",
                        value: "Tagwith LongName 4",
                    },
                    {
                        label: "Tag5",
                        value: "Tag5",
                    },
                    {
                        label: "Tag6",
                        value: "Tag6",
                    },
                    {
                        label: "Tag7",
                        value: "Tag7",
                    },
                    {
                        label: "Tag8",
                        value: "Tag8",
                    },
                    {
                        label: "Tagwith LongName 9",
                        value: "Tagwith LongName 9",
                    },
                ],
            },
            {
                title: "Design System(s)",
                data: [
                    {
                        label: "Berkoukes",
                        value: "Berkoukes",
                    },
                    {
                        label: "Material UI",
                        value: "Material UI",
                    },
                    {
                        label: "Ant Design",
                        value: "Ant Design",
                    },
                ],
            },
            {
                title: "3rd party libraries",
                data: [
                    {
                        label: "library/name",
                        value: "library/name1",
                    },
                    {
                        label: "library/name",
                        value: "library/name2",
                    },
                    {
                        label: "library/name",
                        value: "library/name3",
                    },
                    {
                        label: "library/name",
                        value: "library/name4",
                    }
                ],
            },
        ],
    },
};
export var Template = function (props) {
    var _a = useState(false), isOpened = _a[0], setOpen = _a[1];
    var _b = useState({}), selectedFilters = _b[0], setSelectedFilters = _b[1];
    var countFilters = useCallback(function () {
        var count = 0;
        Object.entries(selectedFilters !== null && selectedFilters !== void 0 ? selectedFilters : {}).forEach(function (entry) {
            count += entry[1].length;
        });
        return count;
    }, [selectedFilters]);
    return (_jsxs(_Fragment, { children: [_jsx(Button, { type: "primary", label: "Filters(".concat(countFilters(), ")"), onClick: function () { return setOpen(true); } }), _jsx(FilterModal, __assign({}, props, { isOpened: isOpened, onClose: function () { return setOpen(false); }, onValidate: function (s) {
                    setSelectedFilters(__assign({}, s));
                } }))] }));
};
export var Small = Template.bind({});
Small.args = {
    size: "sm",
};
