var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Tabs as MantineTabs } from "@mantine/core";
import { Colors, FontSizes, Layout } from "../../design-tokens";
export var TabType = {
    Primary: "primary",
    Underline: "underline",
};
export function Tabs(_a) {
    var _b = _a.type, type = _b === void 0 ? TabType.Primary : _b, tabItems = _a.tabItems, 
    // fullWidth,
    value = _a.value, sx = _a.sx, className = _a.className, defaultValue = _a.defaultValue, onTabChange = _a.onTabChange, selector = _a.selector;
    return (_jsx(MantineTabs, __assign({ className: className, sx: sx, variant: type === TabType.Primary ? "pills" : "default", radius: type === TabType.Primary ? "xl" : "xs", styles: {
            tab: {
                "&[data-active]": {
                    background: Colors.Tabs.Background,
                    color: Colors.Tabs.Text,
                },
                "&:hover[data-active]": {
                    background: Colors.Tabs.Background,
                    color: Colors.Tabs.Text,
                },
            },
            tabsList: {
                gap: Layout.sm
            }
        }, onTabChange: onTabChange, value: value, defaultValue: defaultValue }, selector, { children: _jsx(MantineTabs.List, { children: tabItems.map(function (item) { return (_jsx(MantineTabs.Tab, __assign({ value: item.text, style: __assign({ 
                    // width: fullWidth === true ? "320px" : undefined,
                    flex: 1, height: "40px", padding: "0px ".concat(Layout.md) }, FontSizes.Button) }, item === null || item === void 0 ? void 0 : item.selector, { children: item.text }), item.text)); }) }) })));
}
