var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card as MantineCard, Stack, Text, getStylesRef } from "@mantine/core";
import { Button } from "../Button";
import { Colors, FontSizes, Layout } from "../../design-tokens";
export var Card = function (_a) {
    var _b;
    var _c = _a.variant, variant = _c === void 0 ? "simple" : _c, disabled = _a.disabled, primaryText = _a.primaryText, secondaryText = _a.secondaryText, onClick = _a.onClick, onCardClick = _a.onCardClick, sx = _a.sx, sxBody = _a.sxBody, children = _a.children, className = _a.className, cardProps = _a.cardProps, bodyProps = _a.bodyProps, selector = _a.selector;
    return (_jsx(MantineCard, __assign({ onClick: onCardClick, radius: "xl", padding: Layout.TBR, sx: __assign((_b = { height: "100%", border: "2px solid ".concat(Colors.Disabled.Gray), "&:hover": {
                    border: disabled === true ? undefined : Colors.Card.Hover.Border,
                }, "&:focus": {
                    boxShadow: disabled === true ? undefined : Colors.Card.Focus,
                } }, _b["&:hover .".concat(getStylesRef("primary-text"))] = {
            color: disabled === true ? undefined : Colors.Card.Hover.PrimaryTextColor,
        }, _b.cursor = disabled === true ? "not-allowed" : undefined, _b), sx), className: className, tabIndex: 0 }, cardProps, selector, { children: _jsxs(Stack, __assign({ align: "flex-start", sx: __assign({ color: disabled === true ? "gray" : "black" }, sxBody) }, bodyProps, { children: [primaryText && _jsx(Text, __assign({ sx: __assign({ ref: getStylesRef("primary-text") }, FontSizes.Subtitle2) }, { children: primaryText })), secondaryText && (_jsx(Text, __assign({ sx: __assign({}, FontSizes.Body2) }, { children: secondaryText }))), variant === "super-charge" ? (_jsx(Button, { disabled: disabled, type: "borders", label: "Design Tokens", onClick: onClick })) : null, children] })) })));
};
