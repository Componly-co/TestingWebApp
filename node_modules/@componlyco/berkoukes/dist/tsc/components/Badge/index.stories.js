var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Group } from "@mantine/core";
import { Badge, Types, Variants } from "./index";
export default {
    title: "Badge",
    component: Badge,
    args: {
        label: "Label",
        type: Types.Outline,
        variant: Variants.Neutral,
    },
};
var Template = function (args) {
    return (_jsxs(Group, { children: [_jsx(Badge, __assign({}, args, { closeable: false })), _jsx(Badge, __assign({}, args, { closeable: true }))] }));
};
export var Default = Template.bind({});
export var NeutralOutline = Template.bind({});
NeutralOutline.args = {
    type: Types.Outline,
    variant: Variants.Neutral,
};
export var NeutralFilled = Template.bind({});
NeutralFilled.args = {
    type: Types.Filled,
    variant: Variants.Neutral,
};
export var AccentOutline = Template.bind({});
AccentOutline.args = {
    type: Types.Outline,
    variant: Variants.Accent,
};
export var AccentFilled = Template.bind({});
AccentFilled.args = {
    type: Types.Filled,
    variant: Variants.Accent,
};
export var WarningOutline = Template.bind({});
WarningOutline.args = {
    type: Types.Outline,
    variant: Variants.Warning,
};
export var WarningFilled = Template.bind({});
WarningFilled.args = {
    type: Types.Filled,
    variant: Variants.Warning,
};
export var ErrorOutline = Template.bind({});
ErrorOutline.args = {
    type: Types.Outline,
    variant: Variants.Error,
};
export var ErrorFilled = Template.bind({});
ErrorFilled.args = {
    type: Types.Filled,
    variant: Variants.Error,
};
export var SuccessOutline = Template.bind({});
SuccessOutline.args = {
    type: Types.Outline,
    variant: Variants.Success,
};
export var SuccessFilled = Template.bind({});
SuccessFilled.args = {
    type: Types.Filled,
    variant: Variants.Success,
};
