var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Badge as MantineBadge, Text } from "@mantine/core";
import { Colors, FontSizes, Layout } from "../../design-tokens";
export var Variants = {
    Neutral: "neutral",
    Accent: "accent",
    Error: "error",
    Warning: "warning",
    Success: "success",
};
export var Types = {
    Filled: "filled",
    Outline: "outline",
};
export function Badge(_a) {
    var label = _a.label, _b = _a.type, type = _b === void 0 ? Types.Outline : _b, _c = _a.variant, variant = _c === void 0 ? Variants.Neutral : _c, closeable = _a.closeable, sx = _a.sx, onClose = _a.onClose, selector = _a.selector;
    return (_jsx(MantineBadge, __assign({ variant: type.toLowerCase(), style: {
            height: "48px",
            textTransform: "none",
            background: Colors.Badge[variant].Background[type],
            color: Colors.Badge[variant].Label,
            border: "1px solid ".concat(Colors.Badge[variant].Border[type]),
            padding: "0px  ".concat(Layout.md)
        }, sx: sx, radius: "xl", rightSection: closeable === true ? (_jsx(CloseBtn, { onClick: onClose, fill: Colors.Badge[variant].Label })) : undefined }, selector, { children: _jsx(Text, __assign({ style: __assign({}, FontSizes.Body2) }, { children: label })) })));
}
var CloseBtn = function (_a) {
    var onClick = _a.onClick, fill = _a.fill;
    return (_jsx("svg", __assign({ onClick: onClick, style: { verticalAlign: 'middle' }, width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, { children: _jsx("path", { d: "M13.3346 6.66797L6.66797 13.3346M13.3346 13.3346L6.66797 6.66797", stroke: fill || "black", strokeWidth: "1.66667", strokeLinecap: "round" }) })));
};
