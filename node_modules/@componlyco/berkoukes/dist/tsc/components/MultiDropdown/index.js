var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useCallback } from "react";
import { Accordion, Group, Popover, Stack, Text } from "@mantine/core";
import { Search } from "lucide-react";
import { Button } from "../Button";
import { Colors, FontSizes, Layout } from "../../design-tokens";
import { Divider } from "../Divider";
import { TextInput } from "../TextInput";
export function MultiDropdown(_a) {
    var children = _a.children, items = _a.items, width = _a.width, onConfirm = _a.onConfirm, searchValue = _a.searchValue, onSearch = _a.onSearch;
    var _b = useState(false), isOpened = _b[0], setPopoverOpened = _b[1];
    var _c = useState([]), selectedTab = _c[0], setMenu = _c[1];
    var _d = useState([]), selectedItems = _d[0], setSelectedItems = _d[1];
    var recursive = function (arr) {
        return arr.reduce(function (acc, current) {
            var is = current.value;
            if (current.items)
                return __spreadArray(__spreadArray([], acc, true), recursive(current.items), true);
            else
                return __spreadArray(__spreadArray([], acc, true), [is], false);
        }, []);
    };
    var handleSelectItem = function (i) {
        if (Array.isArray(i)) {
            var ancestors_1 = recursive(i);
            setSelectedItems(function (old) {
                if ((old === null || old === void 0 ? void 0 : old.length) && (old === null || old === void 0 ? void 0 : old.some(function (o) { return ancestors_1.includes(o); }))) {
                    return old.filter(function (o) { return !ancestors_1.includes(o); });
                }
                return __spreadArray(__spreadArray([], old, true), ancestors_1, true);
            });
            return;
        }
        setSelectedItems(function (old) {
            if ((old === null || old === void 0 ? void 0 : old.length) && (old === null || old === void 0 ? void 0 : old.includes(i)))
                return old.filter(function (o) { return o !== i; });
            return __spreadArray(__spreadArray([], old, true), [i], false);
        });
    };
    var getCount = useCallback(function (value) {
        var _a, _b;
        return (_b = (_a = selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.map(function (i) { return i === null || i === void 0 ? void 0 : i.includes(value); })) === null || _a === void 0 ? void 0 : _a.filter(Boolean)) === null || _b === void 0 ? void 0 : _b.length;
    }, [selectedItems]);
    return (_jsxs(Popover, __assign({ width: width, position: "bottom", shadow: "md", opened: isOpened, onClose: function () { return setPopoverOpened(false); }, offset: -50, styles: {
            dropdown: {
                background: 'white',
                maxHeight: 400,
                display: 'flex',
                flexDirection: 'column',
                borderRadius: 30,
                padding: Layout.md,
                gap: Layout.sm,
                boxShadow: '0px 26px 41px -23px #0A090B1F, 0px 18px 36px -5px #0A090B29',
                border: "1px solid ".concat(Colors.Border.filled),
                '& div[data-accordion]': {
                    overflowY: 'auto',
                    overflowX: 'hidden',
                }
            }
        }, transitionProps: { duration: 150, transition: 'slide-up', timingFunction: 'ease-out' } }, { children: [_jsx(Popover.Target, { children: _jsx("div", __assign({ onClick: function () { return setPopoverOpened(true); } }, { children: children })) }), _jsxs(Popover.Dropdown, { children: [_jsx(TextInput, { label: "", showHelpIcon: false, placeholder: "Search", type: "search", value: searchValue, onChange: function (val) { return onSearch && onSearch(val); }, icon: _jsx(Search, { color: Colors.Button.borders.Default.Text }), sx: { width: "100%", borderColor: Colors.Button.borders.Default.Border } }), _jsx(Accordion, __assign({ multiple: true, chevron: _jsx(Chevron, {}), value: selectedTab, onChange: function (i) { return setMenu(i); }, styles: {
                            control: {
                                width: 'fit-content',
                                padding: '14px 10px',
                                '& ~ .border': {
                                    position: 'absolute',
                                    pointerEvents: 'none',
                                    left: 0,
                                    borderRadius: 30,
                                    width: '100%',
                                    height: '100%',
                                    border: "3px solid transparent",
                                },
                                '&[data-active] ~ .border': {
                                    borderColor: Colors.Focused.Fade,
                                },
                                "&:hover": {
                                    backgroundColor: "transparent"
                                }
                            },
                            content: {
                                paddingBottom: 0,
                                paddingRight: 0,
                                paddingTop: 0,
                                paddingLeft: Layout['2xl']
                            },
                            label: {
                                padding: 0,
                                fontSize: 14,
                                lineHeight: '24px'
                            },
                            icon: {},
                            item: {
                                border: 'none'
                            },
                            panel: {},
                            chevron: {
                                margin: 0
                            }
                        } }, { children: items.map(function (i, index) {
                            return (_jsx(AccordionRoot, __assign({}, i, { handleSelectItem: handleSelectItem, getCount: function (val) { return getCount(val); }, isSelected: function (id) { return selectedItems.includes(id); } }), i.title + index));
                        }) })), _jsxs(Stack, __assign({ sx: { marginTop: -8, gap: 0 } }, { children: [_jsx(Divider, { sx: { marginLeft: "-12px", marginRight: "-12px", marginBottom: '12px' } }), _jsxs(Group, __assign({ sx: { justifyContent: "space-between", padding: Layout.xs, margin: "0" } }, { children: [_jsx(Button, { type: "text-primary", label: "Cancel", size: "normal", onClick: function () {
                                            setPopoverOpened(false);
                                            setSelectedItems([]);
                                            onConfirm && onConfirm([]);
                                        } }), _jsx(Button, { type: "primary", label: "Confirm (".concat(selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length, ")"), size: "normal", onClick: function () {
                                            if (!onConfirm)
                                                return;
                                            setPopoverOpened(false);
                                            onConfirm(selectedItems);
                                        } })] }))] }))] })] })));
}
var AccordionRoot = function (props) {
    var _a = props || {}, ref = _a.ref, title = _a.title, value = _a.value, _b = _a.items, items = _b === void 0 ? null : _b, handleSelectItem = _a.handleSelectItem, isSelected = _a.isSelected, getCount = _a.getCount;
    var isVersion = items && (items === null || items === void 0 ? void 0 : items.length);
    if (!isVersion) {
        var is = isSelected(value || title);
        return (_jsxs(Text, __assign({ sx: __assign(__assign({ display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderRadius: 30, cursor: "pointer", padding: Layout.sm, marginBottom: Layout.sm }, FontSizes.Body3), { "&:hover": {
                    backgroundColor: is ? Colors.Primary.blue : "#f8f9fa"
                }, background: is ? Colors.Primary.blue : "white", color: is ? "white" : "black" }), onClick: function () { return handleSelectItem(value || title); }, color: is ? "blue" : "black" }, { children: [title, is ? _jsx(SelectedIcon, {}) : null] })));
    }
    return (_jsxs(Accordion.Item, __assign({ value: title, onClick: function (e) { return e.stopPropagation(); }, ref: ref }, { children: [_jsx(AccordionControl, __assign({ handleSelectItem: function () { return handleSelectItem(items); }, getCount: function () { return getCount(title); } }, { children: _jsx(Text, __assign({ sx: __assign({ display: 'flex', justifyContent: 'space-between', alignItems: 'center', color: "black" }, FontSizes.Body3), color: "black" }, { children: title })) })), _jsx(Accordion.Panel, { children: items && (items === null || items === void 0 ? void 0 : items.map(function (i, index) {
                    return (_jsx(AccordionRoot, __assign({}, i, { isSelected: isSelected, handleSelectItem: handleSelectItem, getCount: function (val) { return getCount(val); } }), i.title + index));
                })) })] })));
};
var AccordionControl = function (_a) {
    var children = _a.children, handleSelectItem = _a.handleSelectItem, getCount = _a.getCount;
    var count = getCount();
    return _jsxs(Group, __assign({ onClick: handleSelectItem, noWrap: true, align: "center", sx: {
            position: 'relative',
            overflow: 'hidden',
            height: 40,
            padding: '0px 0px 0px 6px',
            borderRadius: 30,
            cursor: "pointer",
            marginBottom: Layout.sm,
            justifyContent: 'space-between',
            "&:hover": {
                backgroundColor: "#f8f9fa"
            }
        } }, { children: [_jsxs(Group, __assign({ noWrap: true, align: "center", sx: { gap: Layout.sm } }, { children: [children, _jsx(Counter, { count: count })] })), _jsx(Accordion.Control, { onClick: function (e) { return e.stopPropagation(); } }), _jsx("div", { className: "border" })] }));
};
var Counter = function (_a) {
    var count = _a.count;
    if (!count)
        return null;
    return _jsx("div", __assign({ style: {
            width: 16,
            height: 16,
            borderRadius: 16,
            border: '1px solid #007BFF',
            color: "#000"
        } }, { children: _jsx(Text, __assign({ fz: "10px", sx: {
                display: 'flex',
                alignItems: 'center',
                textAlign: 'center',
                justifyContent: 'center'
            }, color: "#007BFF" }, { children: count })) }));
};
var Chevron = function () {
    return _jsx("svg", __assign({ width: "10", height: "6", viewBox: "0 0 10 6", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, { children: _jsx("path", { d: "M5.35668 0.953529C5.16142 0.758267 4.84483 0.758267 4.64957 0.953529L1.05668 4.54642C0.741696 4.8614 0.964779 5.39998 1.41023 5.39998H8.59602C9.04147 5.39998 9.26455 4.8614 8.94957 4.54642L5.35668 0.953529Z", fill: "#007BFF" }) }));
};
var SelectedIcon = function () {
    return (_jsx("svg", __assign({ width: "16", height: "15", viewBox: "0 0 16 15", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, { children: _jsx("path", { d: "M2.61978 7.86578C2.85049 7.81723 3.09172 7.8508 3.29729 7.96624C4.04168 8.38423 4.60035 8.77523 5.20349 9.35377C5.34122 9.48588 5.56631 9.46557 5.67269 9.30712C7.66677 6.3371 10.0482 3.07869 12.814 0.733755C12.8911 0.668392 12.9794 0.618054 13.0745 0.583915C13.1678 0.55044 13.2662 0.533325 13.3653 0.533325H14.0436C14.9265 0.533325 15.387 1.60438 14.8044 2.26763C11.6287 5.88264 8.9671 9.9222 6.43688 14.0814C6.05053 14.7165 5.13241 14.7278 4.72428 14.1065C3.65126 12.473 2.68421 11.1654 1.35166 9.92837C0.715537 9.33785 0.963219 8.21432 1.81259 8.03561L2.61978 7.86578Z", fill: "white" }) })));
};
