var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createElement as _createElement } from "react";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Header as MantineHeader, Flex } from "@mantine/core";
import { LogOut } from "lucide-react";
import { Button, ButtonType } from "../Button";
import { getLogo, HeaderType } from "../Header";
export function SecondaryHeader(_a) {
    var tabs = _a.tabs, pageName = _a.pageName, onLogout = _a.onLogout, sx = _a.sx, selector = _a.selector;
    return (_jsxs(MantineHeader, __assign({ sx: __assign({ display: "flex", flexDirection: "row", justifyContent: "center" }, sx), height: "72px" }, selector, { children: [_jsx(Flex, __assign({ sx: { flexBasis: "20%" } }, { children: getLogo(HeaderType.Secondary, pageName) })), _jsx(Flex, __assign({ sx: {
                    flexBasis: "60%",
                    overflow: "auto",
                    scrollbarWidth: "none",
                    "&::-webkit-scrollbar": { width: 0 }, // For 'Edge', 'Chorme' and 'Safari'
                } }, { children: tabs.map(function (_a) {
                    var label = _a.label, rest = __rest(_a, ["label"]);
                    return (_createElement(Button, __assign({}, rest, { label: label, key: label })));
                }) })), _jsx(Flex, __assign({ sx: { flexBasis: "20%", justifyContent: "flex-end" } }, { children: _jsx(Button, { type: ButtonType.Borders, onClick: onLogout, label: "Logout", icon: _jsx(LogOut, {}) }) }))] })));
}
