var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Stepper } from "@mantine/core";
import { Colors } from "../../design-tokens";
export function ProgressIndicator(_a) {
    var length = _a.length, steps = _a.steps, setActive = _a.setActive, active = _a.active, sx = _a.sx, styles = _a.styles, _b = _a.orientation, orientation = _b === void 0 ? "vertical" : _b, selector = _a.selector;
    return (_jsx(Stepper, __assign({ active: active !== null && active !== void 0 ? active : 0, onStepClick: setActive, orientation: orientation, radius: "xl", sx: sx, styles: __assign({ step: {
                padding: "3px", // Box shadow of active step was getting hidden a little bit.
            }, stepIcon: {
                backgroundColor: Colors.ProgressIndicator.Step.Default.Background,
                fontSize: "16px",
                color: Colors.ProgressIndicator.Step.Default.Text,
                "&[data-progress='true']": {
                    backgroundColor: Colors.ProgressIndicator.Step.Active.Background,
                    color: Colors.ProgressIndicator.Step.Active.Text,
                    boxShadow: "0px 0px 0px 3px rgba(36, 100, 241, 0.15)",
                },
                "&[data-completed='true']": {
                    backgroundColor: Colors.ProgressIndicator.Step.Completed.Background,
                    color: Colors.ProgressIndicator.Step.Completed.Text,
                }, // Completed state
            }, verticalSeparator: {
                borderColor: Colors.ProgressIndicator.VerticalSeparator.Default.Border,
            }, verticalSeparatorActive: {
                borderColor: Colors.ProgressIndicator.VerticalSeparator.Active.Border,
            } }, styles) }, selector, { children: length
            ? new Array(length).fill(0).map(function (_, idx) { return (
            // eslint-disable-next-line react/no-array-index-key
            _jsx(Stepper.Step, {}, idx)); })
            : steps === null || steps === void 0 ? void 0 : steps.map(function (_, i) { return (_jsx(Stepper.Step, {}, i) // label={label} description={description}
            ); }) })));
}
