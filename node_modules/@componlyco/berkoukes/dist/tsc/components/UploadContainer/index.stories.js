var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { UploadContainer } from "./index";
export default {
    title: "UploadContainer",
    component: UploadContainer,
    args: { maxSize: 10 },
};
var Template = function (_a) {
    var disabled = _a.disabled, loading = _a.loading, maxSize = _a.maxSize;
    var _b = useState([]), files = _b[0], setFiles = _b[1];
    var handleFileDelete = function () {
        setFiles([]);
    };
    useEffect(function () {
        console.log(files);
    }, [files]);
    return (_jsx("div", __assign({ style: { width: "90vw" } }, { children: _jsx(UploadContainer, { onDrop: setFiles, file: files[0], disabled: disabled, loading: loading, maxSize: maxSize, onDelete: handleFileDelete }) })));
};
export var Default = Template.bind({});
export var Loading = Template.bind({});
Loading.args = {
    loading: true,
};
export var Disabled = Template.bind({});
Disabled.args = {
    disabled: true,
};
