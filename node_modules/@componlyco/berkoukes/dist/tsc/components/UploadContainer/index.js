var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Group, Stack, Text, ThemeIcon, Image } from "@mantine/core";
import { Dropzone } from "@mantine/dropzone";
import { Upload, User } from "lucide-react";
import { useEffect, useRef, useState } from "react";
import { Avatar } from "../Avatar";
import { Button, ButtonType } from "../Button";
import { Colors, FontSizes, Layout, Sizes } from "../../design-tokens";
export function UploadContainer(_a) {
    var disabled = _a.disabled, onDrop = _a.onDrop, onDelete = _a.onDelete, maxSize = _a.maxSize, loading = _a.loading, file = _a.file, _b = _a.onChange, onChange = _b === void 0 ? undefined : _b, _c = _a.onBlur, onBlur = _c === void 0 ? undefined : _c, _d = _a.name, name = _d === void 0 ? "" : _d, sx = _a.sx, _e = _a.type, type = _e === void 0 ? null : _e, selector = _a.selector;
    var openRef = useRef(null);
    var _f = useState(), image = _f[0], setImage = _f[1];
    var handleFileDelete = function () {
        onDelete === null || onDelete === void 0 ? void 0 : onDelete(file);
        URL.revokeObjectURL(image !== null && image !== void 0 ? image : "");
    };
    var handleButtonOpen = function () {
        var _a;
        (_a = openRef.current) === null || _a === void 0 ? void 0 : _a.call(openRef);
    };
    useEffect(function () {
        // 'type' contains mime type of the file
        if (typeof file === 'string')
            return setImage(file);
        else if (file !== undefined && (file === null || file === void 0 ? void 0 : file.type.startsWith("image"))) {
            var imageUrl = URL.createObjectURL(file);
            setImage(imageUrl);
        }
        else {
            setImage(undefined);
        }
    }, [file]);
    var userIcon = _jsx(ThemeIcon, __assign({ variant: "light", color: Colors.UploadContainer.Icon.Background, size: Sizes.Avatar.xxl, radius: "xl" }, { children: _jsx(User, { color: Colors.UploadContainer.Icon.Text }) }));
    var imageComponent = type === 'avatar' ?
        _jsx(Avatar, { type: "image", size: "xxl", src: image }) :
        _jsx(Image, { src: image, width: "160px", height: "72px", fit: "contain" }, image);
    var fileComponent = image !== undefined ? imageComponent : (file === null || file === void 0 ? void 0 : file.name) ? (_jsx(Text, __assign({ align: "center" }, { children: file === null || file === void 0 ? void 0 : file.name }))) : userIcon;
    return (_jsx(Dropzone, __assign({ sx: sx, openRef: openRef, loading: loading, onDrop: onDrop, onBlur: onBlur, onChange: onChange, name: name, multiple: false, maxSize: (maxSize !== null && maxSize !== void 0 ? maxSize : 10) * 1024 * 1024, disabled: disabled, activateOnClick: false, styles: {
            inner: { pointerEvents: "all" },
            root: {
                borderRadius: 30,
                padding: "".concat(Layout.xl, " ").concat(Layout.lg),
                opacity: disabled ? 0.5 : 1,
                cursor: disabled ? 'not-allowed' : 'pointer',
                border: "1px solid ".concat(disabled === true
                    ? Colors.UploadContainer.Disabled.Border
                    : Colors.UploadContainer.Default.Border),
                "&:hover": {
                    background: disabled === true
                        ? Colors.UploadContainer.Disabled.Background
                        : Colors.UploadContainer.Hover.Background,
                    borderColor: disabled === true
                        ? Colors.UploadContainer.Disabled.Border
                        : Colors.UploadContainer.Hover.Border,
                },
            },
        } }, selector, { children: _jsxs(Stack, __assign({ align: "center", spacing: Layout.md }, { children: [file !== undefined ? (fileComponent) : userIcon, _jsxs(Text, __assign({ onClick: handleButtonOpen, color: Colors.UploadContainer.Text, sx: __assign({}, FontSizes.Body2) }, { children: ["Drag and drop your files here or", " ", _jsx(Text, __assign({ span: true, color: Colors.Default.Background, sx: {
                                fontWeight: 700,
                            } }, { children: "browse" }))] })), _jsxs(Text, __assign({ color: Colors.UploadContainer.Text, sx: __assign({}, FontSizes.Body2) }, { children: [maxSize !== null && maxSize !== void 0 ? maxSize : 10, " MB max file size"] })), _jsxs(Group, { children: [_jsx(Button, { icon: _jsx(Upload, {}), type: ButtonType.Borders, disabled: disabled, label: "Upload a File", onClick: handleButtonOpen }), file ? (_jsx(Button, { icon: _jsx(Upload, {}), type: ButtonType.Destructive, disabled: disabled, label: "Delete the File", onClick: handleFileDelete })) : undefined] })] })) })));
}
