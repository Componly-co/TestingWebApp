var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { getStylesRef, Group, Image, List, Modal, Stack, Text, Card as MantineCard } from "@mantine/core";
import { useState } from "react";
import close from "../../assets/closeIcon.svg";
import { Button } from "../Button";
import { Colors, FontSizes, Layout } from "../../design-tokens";
import { UploadContainer } from "../UploadContainer";
import { UploadItem } from "../UploadItem";
export function UploadModal(_a) {
    var _b;
    var opened = _a.opened, onClose = _a.onClose, onDrop = _a.onDrop, maxSize = _a.maxSize, selector = _a.selector, styles = _a.styles, sx = _a.sx;
    var _c = useState([]), files = _c[0], setFiles = _c[1];
    var handleDrop = function (filesWithName) {
        setFiles(function (prev) { return __spreadArray(__spreadArray([], prev, true), filesWithName, true); });
        onDrop(filesWithName);
    };
    return (_jsx(Modal, __assign({ opened: opened, onClose: onClose, withCloseButton: false, overlayProps: {
            opacity: 0.55,
            blur: 3,
        }, centered: true, size: "lg", styles: __assign({ inner: {
                left: 0,
                "& section": {
                    background: "transparent",
                    boxShadow: "none",
                },
            }, body: {
                padding: 0,
            } }, styles) }, selector, { children: _jsx(MantineCard, __assign({ radius: "xl", padding: 0, sx: __assign((_b = { height: "100%", minHeight: 245, boxShadow: "0px 0px 2px 0.5px #0A090B05, 0px 7px 14px 0px #0A090B12", border: "2px solid ".concat(Colors.Disabled.Gray), display: "flex", justifyContent: "space-between", flexDirection: "column", "&:hover": {
                        border: Colors.Card.Hover.Border,
                    }, "&:focus": {
                        boxShadow: Colors.Card.Focus,
                    } }, _b["&:hover .".concat(getStylesRef("primary-text"))] = {
                color: Colors.Card.Hover.PrimaryTextColor,
            }, _b.cursor = undefined, _b), sx), tabIndex: 0 }, { children: _jsxs(Stack, __assign({ style: {
                    flex: 1,
                    padding: Layout.TBR,
                    gap: Layout.xl,
                } }, { children: [_jsxs(Group, __assign({ position: "apart", noWrap: true, align: "flex-start" }, { children: [_jsx(Text, __assign({ sx: __assign({ ref: getStylesRef("primary-text"), fontFamily: "Ruda, sans-serif" }, FontSizes.Subtitle2) }, { children: "Upload" })), onClose && (_jsx(Button, { type: "borders", onClick: onClose, icon: _jsx(Image, { width: "24px", alt: "close", src: close }), sx: {
                                    padding: 7,
                                    height: "auto",
                                    marginTop: -7,
                                    marginRight: -7,
                                } }))] })), _jsxs(Stack, __assign({ align: "center", justify: "center", style: {
                            flex: 1,
                            width: '100%'
                        } }, { children: [_jsx(UploadContainer, { onDrop: handleDrop, maxSize: (maxSize !== null && maxSize !== void 0 ? maxSize : 10) * 1024 * 1024, sx: { width: '100%' } }), files.length > 0 ? (_jsxs(_Fragment, { children: [_jsx(Text, __assign({ fs: "14px" }, { children: "Uploading files" })), _jsx(List, __assign({ styles: {
                                            itemWrapper: {
                                                width: "100%",
                                                "&>span:nth-child(2)": {
                                                    width: "100%",
                                                },
                                            },
                                        } }, { children: files.map(function (_a, idx) {
                                            var name = _a.name;
                                            return (_jsx(UploadItem, { "data-index": idx, fileName: name, status: "pending" }, name));
                                        }) }))] })) : undefined] }))] })) })) })));
}
