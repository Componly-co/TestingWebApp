var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useDisclosure } from "@mantine/hooks";
import { useState, useEffect } from "react";
import { Button, ButtonType } from "../Button";
import { UploadModal } from "./index";
export default {
    title: "UploadModal",
    component: UploadModal,
    parameters: { layout: "padded" }, // Otherwise, modal is not showing properly
};
var Template = function (args) {
    var _a = useDisclosure(false), opened = _a[0], _b = _a[1], open = _b.open, close = _b.close;
    var _c = useState([]), files = _c[0], setFiles = _c[1];
    useEffect(function () {
        console.log(files);
    }, [files]);
    return (_jsxs(_Fragment, { children: [_jsx(Button, { type: ButtonType.Primary, onClick: open, label: "Upload" }), _jsx(UploadModal, __assign({}, args, { opened: opened, onClose: close, onDrop: setFiles }))] }));
};
export var Default = Template.bind({});
