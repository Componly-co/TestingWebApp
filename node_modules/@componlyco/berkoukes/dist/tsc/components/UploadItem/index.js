var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { List, Text, ThemeIcon, Progress, CloseButton, Group, ActionIcon, Stack, Flex, } from "@mantine/core";
import { DownloadCloud, File, FileCheck2, FileClock, FileX2 } from "lucide-react";
import { Colors } from "../../design-tokens";
function getFileIcon(input) {
    var output = _jsx(File, {});
    switch (input) {
        case "failed":
            output = _jsx(FileX2, {});
            break;
        case "in-progress":
            output = _jsx(FileClock, {});
            break;
        case "ready":
            output = _jsx(FileCheck2, {});
            break;
        case "pending":
        default:
            break;
    }
    return output;
}
export function UploadItem(_a) {
    var fileName = _a.fileName, status = _a.status, message = _a.message, progress = _a.progress, sx = _a.sx, onCloseClick = _a.onCloseClick, onSaveClick = _a.onSaveClick, selector = _a.selector;
    return (_jsx(List.Item, __assign({ sx: sx, icon: _jsx(ThemeIcon, __assign({ variant: "outline", radius: "xl", size: "xl", style: { borderWidth: "0px", color: Colors.Disabled.Text } }, { children: getFileIcon(status) })) }, selector, { children: _jsxs(Stack, __assign({ spacing: "2px" }, { children: [_jsxs(Flex, __assign({ justify: "space-between" }, { children: [_jsx(Text, __assign({ size: "14px", style: {
                                color: status === "failed" ? Colors.Badge.error.Label : Colors.Badge.neutral.Label,
                            } }, { children: fileName })), _jsxs(Group, __assign({ spacing: 10 }, { children: [status === "ready" ? (_jsx(ActionIcon, __assign({ size: "xs", variant: "transparent", onClick: onSaveClick, style: {
                                        color: Colors.UploadItem.Save,
                                    } }, { children: _jsx(DownloadCloud, {}) }))) : null, _jsx(CloseButton, { size: "xs", variant: "filled", radius: "xl", onClick: onCloseClick, style: {
                                        background: Colors.UploadItem.Close,
                                    } })] }))] })), _jsx(Text, __assign({ size: "14px", style: {
                        color: status === "failed" ? Colors.Badge.error.Label : Colors.Disabled.Text,
                    } }, { children: message })), status === "in-progress" ? _jsx(Progress, { value: progress !== null && progress !== void 0 ? progress : 0 }) : null] })) })));
}
