var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createElement as _createElement } from "react";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Group, Header as MantineHeader, Stack, Flex, Burger, Drawer, createStyles, } from "@mantine/core";
import { useDisclosure } from "@mantine/hooks";
import { Button, ButtonSizes } from "../Button";
import { Divider } from "../Divider";
import { getLogo, HeaderType } from "../Header";
import { UserProfile } from "../UserProfile";
import cn from "classnames";
var useStyles = createStyles(function () { return ({
    tabsRoot: {
        overflowY: "auto",
        //20px is the padding
        width: "calc( 100% + 20px)",
        "&::-webkit-scrollbar": {
            display: "none",
        },
    },
}); });
export function MobileHeader(_a) {
    var tabs = _a.tabs, profile = _a.profile, type = _a.type, pageName = _a.pageName, endButtons = _a.endButtons, startButtons = _a.startButtons, _b = _a.height, height = _b === void 0 ? "64px" : _b, sx = _a.sx, selector = _a.selector;
    var classes = useStyles().classes;
    var _c = useDisclosure(false), drawerOpened = _c[0], _d = _c[1], toggleDrawer = _d.toggle, closeDrawer = _d.close;
    var body;
    if (type === HeaderType.Webapp) {
        body = (_jsxs(Flex, __assign({ direction: "column", justify: "space-between", style: { width: "100%" } }, { children: [_jsxs(Flex, __assign({ direction: "row", justify: "space-between", style: { width: "100%", padding: 20 } }, { children: [_jsx(Group, { children: getLogo(type, pageName) }), profile && _jsx(UserProfile, __assign({}, profile))] })), _jsx(Divider, { orientation: "horizontal" }), _jsx(Group, __assign({ className: cn(classes.tabsRoot, "tabs-button"), style: { padding: "16px 20px" } }, { children: _jsx(Group, __assign({ noWrap: true }, { children: tabs.map(function (_a) {
                            var label = _a.label, rest = __rest(_a, ["label"]);
                            return (_jsx(Button, __assign({ size: ButtonSizes.Small, sx: { fontSize: 14 }, label: label }, rest), label));
                        }) })) })), _jsx(Divider, { orientation: "horizontal" })] })));
    }
    else {
        body = (_jsxs(_Fragment, { children: [_jsxs(Flex, __assign({ direction: "row", justify: "space-between", style: { width: "100%" } }, { children: [_jsxs(Group, { children: [getLogo(type, pageName), _jsx(Divider, { orientation: "vertical" })] }), type === HeaderType.App ? (endButtons &&
                            endButtons.map(function (_a) {
                                var label = _a.label, rest = __rest(_a, ["label"]);
                                return (_createElement(Button, __assign({}, rest, { label: label, key: label, onClick: toggleDrawer })));
                            })) : (_jsx(Burger, { opened: drawerOpened, onClick: toggleDrawer }))] })), _jsxs(Drawer, __assign({ opened: drawerOpened, onClose: closeDrawer, withCloseButton: false, size: "100%", position: "top", style: { position: "absolute", left: "0px" } }, { children: [_jsxs(Stack, __assign({ align: "center" }, { children: [_jsxs(Flex, __assign({ direction: "row", justify: "space-between", style: { width: "100%" } }, { children: [_jsxs(Group, { children: [getLogo(type, pageName), _jsx(Divider, { orientation: "vertical" })] }), type === HeaderType.Action ? (_jsx(Burger, { opened: drawerOpened, onClick: toggleDrawer })) : (endButtons &&
                                            endButtons.map(function (_a) {
                                                var label = _a.label, rest = __rest(_a, ["label"]);
                                                return (_createElement(Button, __assign({}, rest, { label: label, key: label, onClick: toggleDrawer })));
                                            }))] })), _jsx(Group, { children: type === HeaderType.Action
                                        ? startButtons &&
                                            startButtons.map(function (_a) {
                                                var label = _a.label, rest = __rest(_a, ["label"]);
                                                return (_createElement(Button, __assign({}, rest, { label: label, key: label })));
                                            })
                                        : null }), tabs.map(function (_a) {
                                    var label = _a.label, rest = __rest(_a, ["label"]);
                                    return (_createElement(Button, __assign({}, rest, { label: label, key: label })));
                                })] })), type === HeaderType.Action
                            ? endButtons && (_jsx(Group, __assign({ position: "center" }, { children: endButtons.map(function (_a) {
                                    var label = _a.label, rest = __rest(_a, ["label"]);
                                    return (_createElement(Button, __assign({}, rest, { label: label, key: label })));
                                }) })))
                            : null, type === HeaderType.App && profile ? _jsx(UserProfile, __assign({}, profile)) : undefined] }))] }));
    }
    return (_jsx(MantineHeader, __assign({ sx: __assign({ borderBottom: 0, display: "flex", alignItems: "center" }, sx), height: height }, selector, { children: body })));
}
