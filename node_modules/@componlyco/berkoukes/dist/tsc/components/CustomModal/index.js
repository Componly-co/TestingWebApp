var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { getStylesRef, Card as MantineCard, Text, Group, Image, Stack, Modal } from "@mantine/core";
import { Button } from "../Button";
import { Colors, FontSizes, Layout } from "../../design-tokens";
import { Divider } from "../Divider";
export function CustomModal(_a) {
    var _b;
    var isOpened = _a.isOpened, maxWidth = _a.maxWidth, _c = _a.onClose, onClose = _c === void 0 ? function () { return null; } : _c, title = _a.title, styles = _a.styles, sxCard = _a.sxCard, sxBody = _a.sxBody, sxFooter = _a.sxFooter, description = _a.description, image = _a.image, onClick = _a.onClick, _classes = _a._classes, _d = _a.withClose, withClose = _d === void 0 ? true : _d, _e = _a.keepMounted, keepMounted = _e === void 0 ? false : _e, _f = _a.buttonProps, buttonProps = _f === void 0 ? null : _f, _g = _a.children, children = _g === void 0 ? null : _g, _h = _a.footerButtons, footerButtons = _h === void 0 ? null : _h, selector = _a.selector, _j = _a.closeOnClickOutside, closeOnClickOutside = _j === void 0 ? true : _j;
    return (_jsx(Modal, __assign({ opened: isOpened, onClose: onClose, withCloseButton: false, overlayProps: {
            opacity: 0.55,
            blur: 3,
        }, centered: true, styles: __assign({ inner: {
                left: 0,
                "& section": {
                    background: "transparent",
                    boxShadow: "none",
                },
            }, body: {
                padding: 0,
            }, content: {
                flex: 1
            } }, styles), size: maxWidth, className: _classes === null || _classes === void 0 ? void 0 : _classes.modal, closeOnClickOutside: closeOnClickOutside, keepMounted: keepMounted }, selector, { children: _jsxs(MantineCard, __assign({ radius: "xl", padding: 0, sx: __assign((_b = { height: "100%", minHeight: 245, maxWidth: maxWidth || 375, margin: '0 auto', boxShadow: "0px 0px 2px 0.5px #0A090B05, 0px 7px 14px 0px #0A090B12", border: "2px solid ".concat(Colors.Disabled.Gray), display: "flex", justifyContent: "space-between", flexDirection: "column", "&:hover": {
                        border: Colors.Card.Hover.Border,
                    }, "&:focus": {
                        boxShadow: Colors.Card.Focus,
                    } }, _b["&:hover .".concat(getStylesRef("primary-text"))] = {
                color: Colors.Card.Hover.PrimaryTextColor,
            }, _b.cursor = undefined, _b), sxCard), tabIndex: 0, className: _classes === null || _classes === void 0 ? void 0 : _classes.card }, { children: [_jsxs(Stack, __assign({ sx: __assign({ flex: 1, padding: Layout.TBR, gap: Layout.xl }, sxBody), className: _classes === null || _classes === void 0 ? void 0 : _classes.body }, { children: [_jsxs(Group, __assign({ className: _classes === null || _classes === void 0 ? void 0 : _classes.header, position: "apart", noWrap: true, align: "flex-start" }, { children: [_jsx(Text, __assign({ sx: __assign({ ref: getStylesRef("primary-text"), fontFamily: "Ruda, sans-serif" }, FontSizes.Subtitle2) }, { children: title })), withClose && (_jsx(Button, { type: "borders", onClick: onClose, icon: _jsx(CloseIcon, {}), sx: {
                                        padding: 7,
                                        height: "auto",
                                        marginTop: -7,
                                        marginRight: -7,
                                    } }))] })), image && (_jsx(Image, { width: "100%", height: 250, alt: "close", src: image, sx: { borderRadius: "30px", background: "#E6F2FF", overflow: "hidden" } })), description && _jsx(Text, __assign({ sx: __assign(__assign({}, FontSizes.Body2), { color: "#475467", fontFamily: "Ruda, sans-serif" }) }, { children: description })), children] })), _jsx(Divider, { sx: { width: "100%" }, borderColor: "#EAECF0" }), _jsx(Stack, __assign({ className: _classes === null || _classes === void 0 ? void 0 : _classes.footer, justify: "space-between", sx: __assign({ padding: Layout.lg, flexDirection: "row" }, sxFooter) }, { children: footerButtons || _jsxs(_Fragment, { children: [_jsx(Button, { type: "borders", label: "Cancel", size: "normal", onClick: onClose }), buttonProps && _jsx(Button, __assign({ size: "normal", onClick: onClick }, buttonProps))] }) }))] })) })));
}
var CloseIcon = function () {
    return _jsx("svg", __assign({ width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, { children: _jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M5.93934 5.93934C6.52513 5.35355 7.47487 5.35355 8.06066 5.93934L12 9.87868L15.9393 5.93934C16.5251 5.35356 17.4749 5.35356 18.0607 5.93934C18.6464 6.52513 18.6464 7.47488 18.0607 8.06066L14.1213 12L18.0607 15.9393C18.6464 16.5251 18.6464 17.4749 18.0607 18.0607C17.4749 18.6464 16.5251 18.6464 15.9393 18.0607L12 14.1213L8.06066 18.0607C7.47487 18.6464 6.52513 18.6464 5.93934 18.0607C5.35355 17.4749 5.35355 16.5251 5.93934 15.9393L9.87868 12L5.93934 8.06066C5.35355 7.47487 5.35355 6.52513 5.93934 5.93934Z", fill: "black" }) }));
};
