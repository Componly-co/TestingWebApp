var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Checkbox as MantineCheckbox } from "@mantine/core";
import { Colors } from "../../design-tokens";
function getBorderColor(checked, disabled) {
    var output = "transparent";
    if (checked !== true && disabled !== true) {
        output = Colors.Default.Border;
    }
    return output;
}
export function Checkbox(_a) {
    var size = _a.size, checked = _a.checked, onChange = _a.onChange, disabled = _a.disabled, sx = _a.sx, selector = _a.selector;
    return (_jsx(MantineCheckbox, __assign({ size: typeof size === 'number' ? size : size === "small" ? 24 : 32, radius: "xl", checked: checked, onChange: onChange, disabled: disabled, sx: sx, styles: {
            input: {
                background: "transparent",
                borderWidth: "2px",
                borderStyle: "solid",
                borderColor: getBorderColor(checked, disabled),
                "&:checked": {
                    background: Colors.Default.Background,
                    border: Colors.Default.Border,
                    "&:hover": {
                        background: Colors.Hovered.Background,
                    },
                },
                "&:hover": {
                    borderColor: Colors.Hovered.Border,
                    background: Colors.Focused.Fade,
                },
                "&:focus": {
                    boxShadow: "0px 0px 2px 4px ".concat(Colors.Focused.Fade),
                },
                "&:disabled": {
                    borderColor: "transparent",
                    background: Colors.Disabled.Background,
                    "&:hover": {
                        borderColor: "transparent",
                        background: Colors.Disabled.Background,
                    },
                },
            },
        } }, selector)));
}
