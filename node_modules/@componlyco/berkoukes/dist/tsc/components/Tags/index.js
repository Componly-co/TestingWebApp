var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Badge, CloseButton, Group, Text } from "@mantine/core";
import { Variants } from "../Badge";
import { Colors, FontSizes, Layout } from "../../design-tokens";
export var TagsSize = {
    Normal: "normal",
    Large: "large",
};
export function Tags(_a) {
    var label = _a.label, _b = _a.variant, variant = _b === void 0 ? Variants.Neutral : _b, icons = _a.icons, _c = _a.size, size = _c === void 0 ? TagsSize.Normal : _c, sx = _a.sx, onClose = _a.onClose, _d = _a.onClick, onClick = _d === void 0 ? function () { return null; } : _d, className = _a.className, showClose = _a.showClose, selector = _a.selector, style = _a.style;
    return (_jsx(Badge, __assign({ variant: "filled", className: className, sx: sx, onClick: onClick, style: __assign({ textTransform: "none", background: Colors.Badge[variant].Background.filled, color: Colors.Badge[variant].Label, border: "1px solid ".concat(Colors.Badge[variant].Border.filled), height: size === TagsSize.Normal ? "40px" : "48px", cursor: "pointer", padding: "0 ".concat(Layout.md) }, style), styles: {
            leftSection: {
                marginRight: icons ? Layout.sm : 0
            },
            rightSection: {
                marginLeft: showClose ? Layout.sm : 0
            }
        }, leftSection: _jsx(Group, __assign({ noWrap: true, spacing: Layout.sm }, { children: icons })), radius: "xl", rightSection: showClose !== false ? (_jsx(CloseButton, { size: Layout.lg, style: { color: Colors.Badge[variant].Label }, radius: "xl", onMouseDown: onClose })) : null }, selector, { children: _jsx(Text, __assign({ style: __assign(__assign({}, FontSizes.Body3), { display: 'flex', flexDirection: 'row', flexWrap: 'nowrap', alignItems: 'center', gap: Layout.sm }) }, { children: label })) })));
}
