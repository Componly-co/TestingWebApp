var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { getStylesRef, Group, Image, Stack, Text, Modal, Card as MantineCard, createStyles } from "@mantine/core";
import cn from "classnames";
import close from "../../assets/closeIcon.svg";
import { Card } from "../Card";
import { ChartCard } from "../ChartCard";
import { Colors, FontSizes, Layout } from "../../design-tokens";
import { Badge } from '../Badge';
import { Tabs } from "../Tabs";
import { Button } from "../Button";
import { Tags } from "../Tags";
import ReactEcharts from 'echarts-for-react';
var getBadgeVariant = function (name) {
    if (name.toLowerCase() === 'core')
        return 'accent';
    if (name.toLowerCase() === 'legacy')
        return 'warning';
    if (name.toLowerCase() === 'deprecated')
        return 'error';
    return 'neutral';
};
var useStyles = createStyles(function () {
    var _a;
    return ({
        tabs: (_a = {
                overflowY: "auto",
                //20px is the padding
                width: "calc( 100% + 20px)",
                "&::-webkit-scrollbar": {
                    display: "none",
                }
            },
            _a["& .mantine-Tabs-tabsList"] = {
                flexWrap: "nowrap",
            },
            _a),
        tagsRoot: {
            overflowY: "auto",
            //20px is the padding
            width: "calc( 100% + 20px)",
            "&::-webkit-scrollbar": {
                display: "none",
            },
        },
        legend: {
            zIndex: 5,
            // marginBottom: 14,
            display: 'flex',
            flexDirection: 'column',
            gap: Layout.xs
        },
        legendBox: {
            cursor: 'pointer',
            gap: Layout.sm,
            alignItems: 'center'
        },
        legendBoxCircle: {
            height: 8,
            width: 8,
            borderRadius: 8,
            // '&:not(:last-child)': {
            //   marginBottom: 4
            // },
        },
        legendName: {
            fontSize: 14,
            fontFamily: 'Ruda',
            color: '#475467',
            lineHeight: '20px'
        },
        card: {
            background: "#ffffff",
            borderRadius: "30px",
            padding: Layout["2xl"],
            width: "100%",
            gap: Layout.xl,
            display: "flex",
            flexDirection: "column",
            "&:hover .title": { color: Colors.Primary.blue },
        },
        cardTitle: __assign({ textAlign: 'left', color: Colors.DarkGrey.black }, FontSizes.Subtitle2),
        copyToBox: {
            background: Colors.Neutral["50"],
            borderRadius: "30px",
            padding: "".concat(Layout.sm, " ").concat(Layout.md),
            cursor: "pointer",
            flexDirection: "row"
        },
        copyTo: __assign({ display: "flex", alignItems: "center", color: Colors.Neutral["500"] }, FontSizes.Body2)
    });
});
export function MetricItem(_a) {
    var _b;
    var _c, _d, _e;
    var loading = _a.loading, sxLoading = _a.sxLoading, isOpened = _a.isOpened, modalStyles = _a.modalStyles, maxWidth = _a.maxWidth, sx = _a.sx, title = _a.title, onClose = _a.onClose, tags = _a.tags, library = _a.library, tabsItems = _a.tabsItems, tabsValue = _a.tabsValue, tabsDefaultValue = _a.tabsDefaultValue, pieChartLegend = _a.pieChartLegend, pieChart = _a.pieChart, metricsCards = _a.metricsCards, location = _a.location, brands = _a.brands, projects = _a.projects, overrides = _a.overrides, overridedBy = _a.overridedBy, selector = _a.selector;
    var classes = useStyles().classes;
    return (_jsx(Modal, __assign({ opened: isOpened, onClose: onClose, withCloseButton: false, overlayProps: {
            opacity: 0.55,
            blur: 3,
        }, centered: true, styles: __assign({ inner: {
                left: 0,
                "& section": {
                    background: "transparent",
                    boxShadow: "none",
                    overflowX: 'hidden',
                    // padding: '0 5px'
                },
            }, body: {
                padding: 0,
            }, content: {
                flex: 1
            } }, modalStyles), size: maxWidth }, selector, { children: _jsx(MantineCard, __assign({ radius: "xl", padding: 0, sx: __assign((_b = { width: maxWidth, height: "100%", minHeight: 245, boxShadow: "0px 0px 2px 0.5px #0A090B05, 0px 7px 14px 0px #0A090B12", border: "2px solid ".concat(Colors.Disabled.Gray), display: "flex", justifyContent: "space-between", flexDirection: "column", backgroundColor: Colors.Neutral[25], "&:hover": {
                        border: Colors.Card.Hover.Border,
                    }, "&:focus": {
                        boxShadow: Colors.Card.Focus,
                    } }, _b["&:hover .".concat(getStylesRef("primary-text"))] = {
                color: Colors.Card.Hover.PrimaryTextColor,
            }, _b.cursor = undefined, _b), sx), tabIndex: 0 }, { children: loading ? (_jsx(Stack, __assign({ align: "center", justify: "center", style: __assign({ flex: 1, minHeight: '70vh' }, sxLoading) }, { children: _jsx(Image, { width: "110px", alt: "close", src: "https://gcdnb.pbrd.co/images/OkIEx0VbsgVk.gif?o=1" }) }))) : (_jsxs(Stack, __assign({ style: {
                    flex: 1,
                    padding: Layout.TBR,
                    gap: Layout.xl,
                } }, { children: [title ? (_jsxs(Group, __assign({ position: "apart", noWrap: true, align: "center" }, { children: [_jsxs(Stack, __assign({ sx: { flexDirection: 'row' }, align: "center" }, { children: [title && (_jsx(Text, __assign({ sx: __assign({ ref: getStylesRef("primary-text"), fontFamily: "Ruda, sans-serif" }, FontSizes.Subtitle2) }, { children: title }))), Array.isArray(tags) && (tags === null || tags === void 0 ? void 0 : tags.length) > 0 ? (_jsx(Stack, __assign({ sx: { gap: Layout.lg, flexDirection: "row" } }, { children: tags.map(function (tag) { return (_jsx(Badge, { label: tag, type: "outline", variant: getBadgeVariant(tag) }, tag)); }) }))) : null] })), onClose && (_jsx(Button, { type: "borders", onClick: onClose, icon: _jsx(Image, { width: "24px", alt: "close", src: close }), sx: {
                                    padding: 7,
                                    height: "auto",
                                } }))] }))) : null, (library === null || library === void 0 ? void 0 : library.title) ?
                        (_jsxs(Text, __assign({ color: Colors.DarkGrey[200], sx: __assign({ display: 'flex', alignItems: 'center', flexDirection: 'row', gap: Layout.xs }, FontSizes.Body3) }, { children: ["Component from", _jsx(Text, __assign({ color: Colors.DarkGrey.black, sx: __assign({}, FontSizes.Link) }, { children: library.title })), (library === null || library === void 0 ? void 0 : library.logo) && (_jsx("img", { style: { width: 36, height: 36, borderRadius: "50$" }, src: library === null || library === void 0 ? void 0 : library.logo }))] }))) : null, tabsItems && (tabsItems === null || tabsItems === void 0 ? void 0 : tabsItems.length) ? (_jsx(Tabs, { className: cn(classes.tabs), tabItems: tabsItems !== null && tabsItems !== void 0 ? tabsItems : [], defaultValue: tabsDefaultValue, value: tabsValue })) : null, pieChartLegend && pieChart ? (_jsxs(Card, { children: [_jsx(ChartLegend, { options: pieChartLegend }), _jsx(ReactEcharts, { option: pieChart, style: { height: 300, width: "100%" } })] })) : null, metricsCards && (metricsCards === null || metricsCards === void 0 ? void 0 : metricsCards.length) ? _jsx(CardWrapper, __assign({ title: "Usage" }, { children: _jsx(Group, __assign({ noWrap: true, sx: { gap: Layout.lg } }, { children: metricsCards.map(function (_a, i) {
                                var value = _a.value, primaryText = _a.primaryText, onClick = _a.onClick;
                                return _jsx(ChartCard, __assign({ id: i, primaryText: primaryText, buttonText: "Full report", onClick: onClick, sx: { flex: 1 } }, { children: _jsx(Text, __assign({ color: Colors.DarkGrey.black, sx: __assign({ marginTop: 'auto' }, FontSizes.Subtitle) }, { children: value })) }), i);
                            }) })) })) : null, (location === null || location === void 0 ? void 0 : location.path) ?
                        _jsx(CardWrapper, __assign({ title: "Location" }, { children: _jsxs(Group, __assign({ noWrap: true, sx: { flexDirection: "column", flexWrap: "wrap", gap: Layout.xl } }, { children: [_jsx(CopyTo, { withIcon: true, title: location.path, sx: { width: "100%" } }), _jsxs(Stack, __assign({ sx: { flexDirection: "row", flexWrap: "nowrap", gap: Layout.sm, width: "100%" } }, { children: [(location === null || location === void 0 ? void 0 : location.column) && _jsx(CopyTo, { title: "Column: ".concat(location.column) }), (location === null || location === void 0 ? void 0 : location.line) && _jsx(CopyTo, { title: "Line: ".concat(location.line) })] }))] })) })) : null, (Array.isArray(brands) && brands.length) || (Array.isArray(projects) && projects.length) ? (_jsxs(CardWrapper, __assign({ title: "Used by" }, { children: [Array.isArray(brands) && brands.length ? (_jsxs(_Fragment, { children: [_jsx(Text, __assign({ sx: __assign({}, FontSizes.Subtitle3) }, { children: "Brands" })), _jsx(Stack, __assign({ sx: { gap: Layout.sm, flexDirection: 'row' } }, { children: brands.map(function (_a) {
                                            var logo = _a.logo, alias = _a.alias;
                                            return (_jsx(Tags, { showClose: false, icons: logo ? [_jsx("img", { src: logo, alt: "logo" })] : [], label: alias }));
                                        }) }))] })) : null, Array.isArray(projects) && projects.length ? (_jsxs(_Fragment, { children: [_jsx(Text, __assign({ sx: __assign({}, FontSizes.Subtitle3) }, { children: "Projects" })), _jsx(Stack, __assign({ sx: { gap: Layout.sm, flexDirection: 'row' } }, { children: projects.map(function (_a) {
                                            var name = _a.name;
                                            return (_jsx(Tags, { showClose: false, label: name }));
                                        }) }))] })) : null] }))) : null, (overrides === null || overrides === void 0 ? void 0 : overrides.data) && (overrides === null || overrides === void 0 ? void 0 : overrides.data.length) ?
                        _jsxs(CardWrapper, __assign({ title: "Overriding (".concat((_c = overrides === null || overrides === void 0 ? void 0 : overrides.totalOccurrence) !== null && _c !== void 0 ? _c : 0, ")") }, { children: [_jsx(Stack, __assign({ sx: {
                                        display: "flex",
                                        flexDirection: "row",
                                        flexWrap: "wrap",
                                        columnGap: Layout.sm,
                                        rowGap: Layout.xl
                                    } }, { children: overrides.data.map(function (data, i) {
                                        var occurence = data.occurence, name = data.name;
                                        return (_jsx(Tags, { showClose: false, label: name + " (".concat(occurence, ")") }, i));
                                    }) })), _jsx(Button, { size: "normal", type: "no-borders", label: "View more", disabled: !(overrides === null || overrides === void 0 ? void 0 : overrides.hasNextPage), onClick: function () { return overrides === null || overrides === void 0 ? void 0 : overrides.setPage(); }, sx: {
                                        backgroundColor: Colors.DarkGrey[50],
                                        marginTop: Layout.xl,
                                        width: "100%"
                                    } })] })) : null, (overridedBy === null || overridedBy === void 0 ? void 0 : overridedBy.data) && (overridedBy === null || overridedBy === void 0 ? void 0 : overridedBy.data.length) ? _jsxs(CardWrapper, __assign({ title: "Overrided by (".concat((_d = overridedBy === null || overridedBy === void 0 ? void 0 : overridedBy.totalOccurrence) !== null && _d !== void 0 ? _d : 0, ")") }, { children: [_jsx(Stack, __assign({ sx: {
                                    display: "flex",
                                    flexDirection: "row",
                                    flexWrap: "wrap",
                                    columnGap: Layout.sm,
                                    rowGap: Layout.xl
                                } }, { children: (_e = overridedBy.data) === null || _e === void 0 ? void 0 : _e.map(function (data, i) {
                                    var occurence = data.occurence, name = data.name;
                                    return (_jsx(Tags, { showClose: false, label: name.split("/").at(-1) + " (".concat(occurence, ")") }, i));
                                }) })), _jsx(Button, { size: "normal", type: "no-borders", label: "View more", disabled: !(overridedBy === null || overridedBy === void 0 ? void 0 : overridedBy.hasNextPage), onClick: function () { return overridedBy === null || overridedBy === void 0 ? void 0 : overridedBy.setPage(); }, sx: {
                                    backgroundColor: Colors.DarkGrey[50],
                                    marginTop: Layout.xl,
                                    width: "100%"
                                } })] })) : null] }))) })) })));
}
var firstCharToUpperCase = function (str) { var _a; return ((_a = str === null || str === void 0 ? void 0 : str.charAt(0)) === null || _a === void 0 ? void 0 : _a.toUpperCase()) + (str === null || str === void 0 ? void 0 : str.slice(1)); };
var ChartLegend = function (_a) {
    var options = _a.options, className = _a.className, style = _a.style;
    var classes = useStyles().classes;
    return (_jsx("div", __assign({ className: cn(classes.legend, className), style: style }, { children: options === null || options === void 0 ? void 0 : options.map(function (_a) {
            var name = _a.name, color = _a.color;
            return (_jsxs(Group, __assign({ className: classes.legendBox }, { children: [_jsx("div", { className: classes.legendBoxCircle, style: { backgroundColor: color } }), _jsx(Text, __assign({ className: classes.legendName, sx: __assign({}, FontSizes.Body2) }, { children: firstCharToUpperCase(name) }))] })));
        }) })));
};
var CardWrapper = function (_a) {
    var title = _a.title, className = _a.className, id = _a.id, children = _a.children, headerSx = _a.headerSx;
    var classes = useStyles().classes;
    return (_jsx(Card, __assign({ sx: {
            padding: '0px !important',
            height: 'auto'
        } }, { children: _jsxs("div", __assign({ className: cn(className, classes.card), id: id }, { children: [_jsx(Stack, __assign({ sx: __assign({ gap: Layout.sm, flexWrap: "nowrap" }, headerSx) }, { children: _jsx(Text, __assign({ className: "".concat(classes.cardTitle, " title") }, { children: title })) })), children] })) })));
};
var CopyTo = function (_a) {
    var sx = _a.sx, title = _a.title, _b = _a.withIcon, withIcon = _b === void 0 ? false : _b;
    var classes = useStyles().classes;
    return (_jsxs(Stack, __assign({ className: classes.copyToBox, onClick: function (e) {
            var _a;
            // @ts-ignore
            navigator.clipboard.writeText((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.innerText);
        }, sx: __assign({ flex: 1, width: '100%', maxHeight: 40, direction: "row", gap: Layout.sm, justifyContent: "space-between" }, sx) }, { children: [_jsx(Text, __assign({ className: classes.copyTo }, { children: title })), withIcon && _jsx(CopyToIcon, {})] })));
};
var CopyToIcon = function () {
    return (_jsx("svg", __assign({ width: "20", height: "20", viewBox: "0 0 20 20", fill: "none" }, { children: _jsx("path", { d: "M14.6875 8.125H16.5625C17.0803 8.125 17.5 8.54473 17.5 9.0625L17.5 15.5C17.5 16.6046 16.6046 17.5 15.5 17.5L9.0625 17.5C8.54473 17.5 8.125 17.0803 8.125 16.5625V14.6875M10 2.5L4.375 2.5C3.33947 2.5 2.5 3.33947 2.5 4.375L2.5 10C2.5 11.0355 3.33947 11.875 4.375 11.875L10 11.875C11.0355 11.875 11.875 11.0355 11.875 10L11.875 4.375C11.875 3.33947 11.0355 2.5 10 2.5Z", stroke: "#ADACB0", strokeWidth: "2", strokeLinecap: "round" }) })));
};
