var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createElement as _createElement } from "react";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Group, Header as MantineHeader, Stack, Flex, Burger, Drawer } from "@mantine/core";
import { useDisclosure } from "@mantine/hooks";
import { LogOut } from "lucide-react";
import { Button, ButtonType } from "../Button";
import { getLogo, HeaderType } from "../Header";
export function SecondaryMobileHeader(_a) {
    var tabs = _a.tabs, pageName = _a.pageName, endButtons = _a.endButtons, onLogout = _a.onLogout, sx = _a.sx, selector = _a.selector;
    var _b = useDisclosure(false), drawerOpened = _b[0], _c = _b[1], toggleDrawer = _c.toggle, closeDrawer = _c.close;
    return (_jsxs(MantineHeader, __assign({ sx: __assign({ borderBottom: 0, display: "flex", alignItems: "center" }, sx), height: "64px" }, selector, { children: [_jsxs(Flex, __assign({ direction: "row", justify: "space-between", style: { width: "100%" } }, { children: [_jsx(Group, { children: getLogo(HeaderType.Secondary, pageName) }), _jsx(Burger, { opened: drawerOpened, onClick: toggleDrawer })] })), _jsx(Drawer, __assign({ opened: drawerOpened, onClose: closeDrawer, withCloseButton: false, size: "100%", position: "top", style: { position: "absolute", left: "0px" } }, { children: _jsxs(Stack, __assign({ align: "center" }, { children: [_jsxs(Flex, __assign({ direction: "row", justify: "space-between", style: { width: "100%" } }, { children: [_jsx(Group, { children: getLogo(HeaderType.Secondary, pageName) }), endButtons &&
                                    endButtons.map(function (_a) {
                                        var label = _a.label, rest = __rest(_a, ["label"]);
                                        return (_createElement(Button, __assign({}, rest, { label: label, key: label, onClick: toggleDrawer })));
                                    })] })), tabs.map(function (_a) {
                            var label = _a.label, rest = __rest(_a, ["label"]);
                            return (_createElement(Button, __assign({}, rest, { label: label, key: label })));
                        }), _jsx(Button, { type: ButtonType.Borders, onClick: onLogout, label: "Logout", icon: _jsx(LogOut, {}) })] })) }))] })));
}
