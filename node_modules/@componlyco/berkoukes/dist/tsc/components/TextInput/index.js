var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ActionIcon, Flex, Group, TextInput as MantineTextInput, Stack, Text } from "@mantine/core";
import { HelpCircle } from "lucide-react";
import { BoxShadows, Colors, FontSizes, Layout } from "../../design-tokens";
import { Tooltip } from "../Tooltip";
export function TextInput(_a) {
    var label = _a.label, type = _a.type, showHelpIcon = _a.showHelpIcon, onHelpIconClick = _a.onHelpIconClick, optionalText = _a.optionalText, error = _a.error, helperText = _a.helperText, _b = _a.onChange, onChange = _b === void 0 ? undefined : _b, _c = _a.onBlur, onBlur = _c === void 0 ? undefined : _c, _d = _a.name, name = _d === void 0 ? "" : _d, placeholder = _a.placeholder, disabled = _a.disabled, icon = _a.icon, sx = _a.sx, value = _a.value, _e = _a.helpTooltipProps, helpTooltipProps = _e === void 0 ? {
        children: null,
        label: null,
        position: "top",
        title: "Header",
        description: "In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content.",
    } : _e, selector = _a.selector;
    return (_jsxs(Stack, __assign({ spacing: Layout.sm, sx: sx }, { children: [_jsxs(Flex, __assign({ direction: "row", align: "center", justify: "space-between" }, { children: [_jsxs(Group, __assign({ spacing: Layout.xs, align: "center", noWrap: true }, { children: [typeof label === "string" ? (_jsx(Text, __assign({ sx: __assign({}, FontSizes.Subtitle2) }, { children: label }))) : null, showHelpIcon !== false ? (_jsx(Tooltip, __assign({}, helpTooltipProps, { children: _jsx(ActionIcon, __assign({ size: Layout.TBR, variant: "subtle", onClick: onHelpIconClick, color: "gray", radius: "xl" }, { children: _jsx(HelpCircle, { size: "19px", style: {
                                            fill: Colors.Neutral[500],
                                            stroke: "white",
                                        } }) })) }))) : null] })), typeof optionalText === "string" ? (_jsx(Text, __assign({ color: Colors.DarkGrey[600], sx: __assign({}, FontSizes.Helper) }, { children: optionalText }))) : undefined] })), _jsx(MantineTextInput, __assign({ radius: "lg", type: type, error: error, placeholder: placeholder, disabled: disabled, value: value, onChange: onChange, onBlur: onBlur, name: name, icon: icon, styles: {
                    label: __assign({}, FontSizes.Subtitle2),
                    error: __assign(__assign({}, FontSizes.Helper), { color: Colors.Badge.error.Label }),
                    input: __assign(__assign({}, FontSizes.Body2), { "&[aria-invalid='false']:focus": {
                            boxShadow: BoxShadows.Input,
                            border: "1.5px solid ".concat(Colors.Default.Background),
                        }, "&[aria-invalid='true']:focus": {
                            border: "1.5px solid ".concat(Colors.Button.destructive.Hover.Text),
                        } }),
                } }, selector)), typeof error !== "string" ? (_jsx(Text, __assign({ color: Colors.DarkGrey[600], sx: __assign({}, FontSizes.Helper) }, { children: helperText }))) : undefined] })));
}
