var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createElement as _createElement } from "react";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Group, Header as MantineHeader, Text, Image } from "@mantine/core";
import logo from "../../assets/logo.svg";
import { Button } from "../Button";
import { Divider } from "../Divider";
import { UserProfile } from "../UserProfile";
export var HeaderType = {
    App: "app",
    Secondary: "secondary",
    Action: "action",
    Webapp: "webapp",
};
export function getLogo(type, pageName) {
    var output;
    switch (type) {
        case HeaderType.Secondary:
            output = (_jsx(Text, __assign({ size: "24px", fw: 700 }, { children: pageName })));
            break;
        case HeaderType.App:
        default:
            output = _jsx(Image, { width: "193px", height: "40px", fit: "contain", alt: "Componly logo", src: logo });
    }
    return output;
}
export function Header(_a) {
    var tabs = _a.tabs, profile = _a.profile, type = _a.type, pageName = _a.pageName, endButtons = _a.endButtons, startButtons = _a.startButtons, sx = _a.sx, _b = _a.height, height = _b === void 0 ? "72px" : _b, _c = _a.withDivider, withDivider = _c === void 0 ? true : _c, selector = _a.selector;
    return (_jsx(MantineHeader, __assign({ sx: __assign({ display: "flex", alignItems: "center" }, sx), height: height }, selector, { children: _jsxs(Group, __assign({ noWrap: true }, { children: [getLogo(type, pageName), type === HeaderType.Action && startButtons ? (_jsxs(_Fragment, { children: [startButtons.map(function (_a) {
                            var label = _a.label, rest = __rest(_a, ["label"]);
                            return (_createElement(Button, __assign({}, rest, { label: label, key: label })));
                        }), withDivider && _jsx(Divider, { orientation: "vertical" })] })) : null, _jsx(Group, __assign({ className: "tabs-button" }, { children: tabs.map(function (_a) {
                        var label = _a.label, rest = __rest(_a, ["label"]);
                        return (_createElement(Button, __assign({}, rest, { label: label, key: label })));
                    }) })), withDivider && _jsx(Divider, { orientation: "vertical" }), type === HeaderType.App && profile ? _jsx(UserProfile, __assign({}, profile)) : undefined, endButtons && (_jsx(Group, __assign({ className: "endButtons" }, { children: endButtons.map(function (_a) {
                        var label = _a.label, rest = __rest(_a, ["label"]);
                        return (_createElement(Button, __assign({}, rest, { label: label, key: label })));
                    }) })))] })) })));
}
