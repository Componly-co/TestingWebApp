var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Grid, Text, Flex, Group, Box, Container, Stack, useMantineTheme, } from "@mantine/core";
import { useMediaQuery } from "@mantine/hooks";
import { Search } from "lucide-react";
import { Avatar } from "../Avatar";
import { Breadcrumbs } from "../Breadcrumbs";
import { Button } from "../Button";
import { Colors } from "../../design-tokens";
import { TextInput } from "../TextInput";
export function PageHeader(_a) {
    var breadcrumbProps = _a.breadcrumbProps, buttons = _a.buttons, backgroundImage = _a.backgroundImage, avatarImage = _a.avatarImage, title = _a.title, subtitle = _a.subtitle, sx = _a.sx, selector = _a.selector;
    var theme = useMantineTheme();
    var isMobile = useMediaQuery("(max-width: ".concat(theme.breakpoints.sm, ")"));
    if (isMobile === true)
        return _jsx(Container, __assign({ sx: sx }, selector, { children: _jsxs(Stack, { children: [_jsx(TextInput, { label: "", showHelpIcon: false, placeholder: "Search", type: "search", icon: _jsx(Search, { color: Colors.Button.borders.Default.Text }), sx: { width: "max-content", borderColor: Colors.Button.borders.Default.Border } }), breadcrumbProps && _jsx(Breadcrumbs, __assign({}, breadcrumbProps)), _jsx(Box, { bg: backgroundImage !== null && backgroundImage !== void 0 ? backgroundImage : "", style: { height: "83px" } }), _jsxs(Stack, __assign({ align: "center", pos: "relative", top: -80 }, { children: [_jsx(Avatar, { type: "image", border: "4px solid white", size: "profile", src: avatarImage, shape: "circle" }), _jsx(Group, __assign({ spacing: "xs" }, { children: Array.isArray(buttons) && buttons.length > 0
                                    ? buttons.map(function (_a) {
                                        var label = _a.label, rest = __rest(_a, ["label"]);
                                        return _jsx(Button, __assign({ label: label }, rest), label);
                                    })
                                    : undefined })), _jsx(Text, __assign({ size: "40px", fw: 700, align: "center" }, { children: title })), _jsx(Text, __assign({ align: "center" }, { children: subtitle }))] }))] }) }));
    return _jsxs(Container, __assign({}, selector, { children: [_jsx(Grid, __assign({ bg: backgroundImage, px: "80px", pt: "40px", style: { height: "320px" } }, { children: _jsx(Grid.Col, { children: _jsxs(Flex, __assign({ justify: "space-between" }, { children: [breadcrumbProps && _jsx(Breadcrumbs, __assign({}, breadcrumbProps)), _jsx(TextInput, { label: "", showHelpIcon: false, placeholder: "Search", type: "search", icon: _jsx(Search, { color: Colors.Button.borders.Default.Text }), sx: { width: "max-content", borderColor: Colors.Button.borders.Default.Border } })] })) }) })), _jsxs(Grid, __assign({ mt: 10 }, { children: [_jsx(Grid.Col, __assign({ span: 6 }, { children: _jsxs(Stack, __assign({ pos: "relative", top: -80, left: 50 }, { children: [_jsx(Avatar, { type: "image", border: "4px solid white", size: "profile", src: avatarImage, shape: "circle" }), _jsx(Text, __assign({ size: "40px", fw: 700 }, { children: title })), _jsx(Text, { children: subtitle })] })) })), _jsx(Grid.Col, __assign({ span: 6 }, { children: _jsx(Group, { children: Array.isArray(buttons) && buttons.length > 0
                                ? buttons.map(function (_a) {
                                    var label = _a.label, rest = __rest(_a, ["label"]);
                                    return _jsx(Button, __assign({ label: label }, rest), label);
                                })
                                : undefined }) }))] }))] }));
}
