var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Group, Stack } from "@mantine/core";
import { Hexagon } from "lucide-react";
import { Button, ButtonSizes, ButtonType } from "./index";
export default {
    title: "Button",
    component: Button,
    args: {
        type: ButtonType.Primary,
    },
};
var x = { 'data-ci': 124 };
var Template = function (args) {
    return (_jsxs(Stack, { children: [_jsxs(Group, { children: [_jsx(Button, __assign({}, args, { selector: x, size: ButtonSizes.Normal, label: "Button" })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, label: "Button" })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, label: "Button", icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, label: "Button", icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, label: "Button", tailIcon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, label: "Button", tailIcon: _jsx(Hexagon, {}) }))] }), _jsxs(Group, { children: [_jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, label: "Button", disabled: true })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, label: "Button", disabled: true })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, label: "Button", disabled: true, icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, label: "Button", disabled: true, icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, label: "Button", disabled: true, icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, disabled: true, icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, disabled: true, label: "Button", tailIcon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, disabled: true, label: "Button", tailIcon: _jsx(Hexagon, {}) }))] }), _jsxs(Group, { children: [_jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, loading: true, label: "Button" })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, loading: true, label: "Button" })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, loading: true, label: "Button", icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, loading: true, label: "Button", icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, loading: true, icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, loading: true, icon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Small, loading: true, label: "Button", tailIcon: _jsx(Hexagon, {}) })), _jsx(Button, __assign({}, args, { size: ButtonSizes.Normal, loading: true, label: "Button", tailIcon: _jsx(Hexagon, {}) }))] })] }));
};
export var Primary = Template.bind({});
export var Secondary = Template.bind({});
Secondary.args = {
    type: ButtonType.Secondary,
};
export var Tab = Template.bind({});
Tab.args = {
    type: ButtonType.Tab,
};
export var Borders = Template.bind({});
Borders.args = {
    type: ButtonType.Borders,
};
export var NoBorders = Template.bind({});
NoBorders.args = {
    type: ButtonType.NoBorders,
};
export var Destructive = Template.bind({});
Destructive.args = {
    type: ButtonType.Destructive,
};
export var Success = Template.bind({});
Success.args = {
    type: ButtonType.Success,
};
export var TextPrimary = Template.bind({});
TextPrimary.args = {
    type: ButtonType.TextPrimary,
};
export var TextSecondary = Template.bind({});
TextSecondary.args = {
    type: ButtonType.TextSecondary,
};
export var TextDestructive = Template.bind({});
TextDestructive.args = {
    type: ButtonType.TextDestructive,
};
