var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Button as MantineButton, ActionIcon } from "@mantine/core";
import { BoxShadows, Colors, FontSizes, Layout, Sizes, Spacing } from "../../design-tokens";
// eslint-disable-next-line @typescript-eslint/no-redeclare
export var ButtonType = {
    Primary: "primary",
    Secondary: "secondary",
    Tab: "tab",
    Borders: "borders",
    NoBorders: "no-borders",
    Destructive: "destructive",
    Success: "success",
    TextPrimary: "text-primary",
    TextSecondary: "text-secondary",
    TextDestructive: "text-destructive",
};
export var ButtonSizes = {
    Normal: "normal",
    Small: "small",
};
export function Button(_a) {
    var label = _a.label, onClick = _a.onClick, type = _a.type, size = _a.size, icon = _a.icon, disabled = _a.disabled, loading = _a.loading, tailIcon = _a.tailIcon, sx = _a.sx, _b = _a.buttonType, buttonType = _b === void 0 ? "button" : _b, selector = _a.selector;
    return icon !== undefined && label === undefined ? (_jsx(ActionIcon, __assign({ variant: "filled", radius: "xl", size: size === ButtonSizes.Normal ? "48px" : "40px", onClick: onClick, disabled: disabled, loading: loading, loaderProps: {
            color: Colors.Button[type].Default.Text,
        }, sx: __assign(__assign(__assign({}, FontSizes.Button), { padding: "0px ".concat(size === ButtonSizes.Normal ? Layout.md : Layout.sm), color: Colors.Button[type].Default.Text, background: Colors.Button[type].Default.Background, borderColor: Colors.Button[type].Default.Border, "&:not([data-disabled]):hover": {
                color: Colors.Button[type].Hover.Text,
                background: Colors.Button[type].Hover.Background,
                borderColor: Colors.Button[type].Hover.Border,
            }, "&:focus": {
                boxShadow: BoxShadows.Button.Focus[type],
            }, "&[disabled]": {
                color: Colors.Button[type].Disabled.Text,
                background: Colors.Button[type].Disabled.Background,
                borderColor: Colors.Button[type].Disabled.Border,
                cursor: "not-allowed",
                pointerEvents: "auto",
            } }), sx) }, selector, { children: icon }))) : (_jsx(MantineButton, __assign({ radius: "xl", onClick: onClick, disabled: disabled, leftIcon: icon, rightIcon: tailIcon, loading: loading, loaderPosition: "right", type: buttonType, loaderProps: {
            color: Colors.Button[type].Default.Text,
        }, sx: sx, styles: {
            root: __assign(__assign({}, FontSizes.Button), { padding: size === ButtonSizes.Normal ? Spacing.Button[type].Default : Spacing.Button[type].Small, color: Colors.Button[type].Default.Text, background: Colors.Button[type].Default.Background, borderColor: Colors.Button[type].Default.Border, borderWidth: Sizes.Button.Border[type].Default, height: size === ButtonSizes.Normal && !type.includes("text-") ? "48px" : "auto", "&:not([data-disabled]):hover": {
                    color: Colors.Button[type].Hover.Text,
                    background: Colors.Button[type].Hover.Background,
                    borderColor: Colors.Button[type].Hover.Border,
                }, "&:focus": {
                    boxShadow: BoxShadows.Button.Focus[type],
                    borderWidth: Sizes.Button.Border[type].Focus,
                    borderColor: Colors.Button[type].Focus.Border,
                    color: Colors.Button[type].Focus.Text,
                }, "&[disabled]": {
                    color: Colors.Button[type].Disabled.Text,
                    background: Colors.Button[type].Disabled.Background,
                    borderColor: Colors.Button[type].Disabled.Border,
                    cursor: "not-allowed",
                    pointerEvents: "auto",
                } }),
        } }, selector, { children: label })));
}
