var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Flex, Textarea, Group, Text, ActionIcon, Stack } from "@mantine/core";
import { HelpCircle } from "lucide-react";
import { BoxShadows, Colors, FontSizes, Layout } from "../../design-tokens";
import { Tooltip } from "../Tooltip";
export function InputParagraph(_a) {
    var label = _a.label, error = _a.error, helperText = _a.helperText, placeholder = _a.placeholder, _b = _a.disabled, disabled = _b === void 0 ? false : _b, optionalText = _a.optionalText, onHelpIconClick = _a.onHelpIconClick, _c = _a.onChange, onChange = _c === void 0 ? undefined : _c, _d = _a.onBlur, onBlur = _d === void 0 ? undefined : _d, _e = _a.name, name = _e === void 0 ? "" : _e, sx = _a.sx, value = _a.value, _f = _a.showHelpIcon, showHelpIcon = _f === void 0 ? true : _f, _g = _a.helpTooltipProps, helpTooltipProps = _g === void 0 ? {
        children: null,
        label: null,
        position: "top",
        title: "Header",
        description: "In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document or a typeface without relying on meaningful content.",
    } : _g, selector = _a.selector;
    return (_jsxs(Stack, __assign({ spacing: Layout.sm, sx: sx }, { children: [_jsxs(Flex, __assign({ direction: "row", align: "center", justify: "space-between" }, { children: [_jsxs(Group, __assign({ spacing: Layout.xs, align: "center" }, { children: [_jsx(Text, __assign({ sx: __assign({}, FontSizes.Subtitle2) }, { children: label })), showHelpIcon && (_jsx(Tooltip, __assign({}, helpTooltipProps, { children: _jsx(ActionIcon, __assign({ variant: "subtle", onClick: onHelpIconClick, color: "gray", radius: "xl", size: Layout.TBR }, { children: _jsx(HelpCircle, { size: "19px", style: {
                                            fill: Colors.Neutral[500],
                                            stroke: "white"
                                        } }) })) })))] })), typeof optionalText === "string" ? (_jsx(Text, __assign({ color: Colors.DarkGrey[600], sx: __assign({}, FontSizes.Helper) }, { children: optionalText }))) : undefined] })), _jsx(Textarea, __assign({ radius: "lg", error: error, placeholder: placeholder, disabled: disabled, minRows: 4, value: value, onChange: onChange, onBlur: onBlur, name: name, styles: {
                    label: __assign({}, FontSizes.Subtitle2),
                    error: __assign(__assign({}, FontSizes.Helper), { color: Colors.Badge.error.Label }),
                    input: __assign(__assign({}, FontSizes.Body2), { "&:focus": {
                            boxShadow: BoxShadows.Input,
                        }, "&[data-invalid]": {
                            color: "black",
                            borderColor: Colors.Badge.error.Label,
                        }, "&[data-invalid]:focus": {
                            boxShadow: BoxShadows.InputParagraph.Error,
                        } }),
                } }, selector)), typeof error !== "string" ? (_jsx(Text, __assign({ color: Colors.DarkGrey[600], sx: __assign({}, FontSizes.Helper) }, { children: helperText }))) : undefined] })));
}
