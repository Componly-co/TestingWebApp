var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Stack } from "@mantine/core";
import { Variants } from "../Badge";
import { Toast } from "./index";
export default {
    title: "Toast",
    component: Toast,
};
var Template = function (_a) {
    var message = _a.message, args = __rest(_a, ["message"]);
    return (_jsxs(Stack, __assign({ style: { width: "40vw" } }, { children: [_jsx(Toast, __assign({}, args)), _jsx(Toast, __assign({ message: message }, args))] })));
};
export var Neutral = Template.bind({});
Neutral.args = {
    title: "Your toast meh",
    type: Variants.Neutral,
    message: "In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form.",
};
export var Success = Template.bind({});
Success.args = {
    title: "Your toast succeeded",
    type: Variants.Success,
    message: "In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form.",
};
export var Warning = Template.bind({});
Warning.args = {
    title: "Issue with your toast",
    type: Variants.Warning,
    message: "In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form.",
};
export var Error = Template.bind({});
Error.args = {
    title: "Your toast is burnt",
    type: Variants.Error,
    message: "In publishing and graphic design, Lorem ipsum is a placeholder text commonly used to demonstrate the visual form.",
};
