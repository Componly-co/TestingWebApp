var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Alert, Text, Flex, Group, ActionIcon } from "@mantine/core";
import { X } from "lucide-react";
import { Variants } from "../Badge";
import { Button } from "../Button";
import { Colors, FontSizes, Layout } from "../../design-tokens";
var ButtonTypeMap = {
    neutral: "text-primary",
    success: "success",
    error: "destructive",
    warning: "warning",
    accent: "success",
};
var InfoIcon = function (_a) {
    var color = _a.color;
    return _jsx("svg", __assign({ width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, { children: _jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M9.99844 19.5984C15.3004 19.5984 19.5984 15.3004 19.5984 9.99844C19.5984 4.6965 15.3004 0.398438 9.99844 0.398438C4.6965 0.398438 0.398438 4.6965 0.398438 9.99844C0.398438 15.3004 4.6965 19.5984 9.99844 19.5984ZM11.1984 5.19844C11.1984 4.5357 10.6612 3.99844 9.99844 3.99844C9.3357 3.99844 8.79844 4.5357 8.79844 5.19844C8.79844 5.86118 9.3357 6.39844 9.99844 6.39844C10.6612 6.39844 11.1984 5.86118 11.1984 5.19844ZM11.1984 9.39844C11.1984 8.7357 10.6612 8.19844 9.99844 8.19844C9.3357 8.19844 8.79844 8.7357 8.79844 9.39844V14.1984C8.79844 14.8612 9.3357 15.3984 9.99844 15.3984C10.6612 15.3984 11.1984 14.8612 11.1984 14.1984V9.39844Z", fill: color || "#000000" }) }));
};
export function Toast(_a) {
    var _b, _c, _d, _e, _f, _g, _h;
    var title = _a.title, buttonTitle = _a.buttonTitle, onClick = _a.onClick, message = _a.message, sx = _a.sx, _j = _a.type, type = _j === void 0 ? Variants.Neutral : _j, onClose = _a.onClose, _k = _a.withButton, withButton = _k === void 0 ? true : _k, selector = _a.selector;
    return (_jsxs(Alert, __assign({ sx: __assign({}, sx), radius: typeof message === "string" ? "16px" : "30px", style: {
            background: (_b = Colors.Badge[type]) === null || _b === void 0 ? void 0 : _b.Background.filled,
            color: (_c = Colors.Badge[type]) === null || _c === void 0 ? void 0 : _c.Label,
            borderColor: (_d = Colors.Badge[type]) === null || _d === void 0 ? void 0 : _d.Border.filled,
            padding: typeof message === "string" ? Layout.lg : Layout.md,
            gap: Layout.lg
        } }, selector, { children: [_jsxs(Flex, __assign({ direction: "row", align: "center", justify: "space-between", gap: Layout.sm }, { children: [_jsxs(Group, __assign({ spacing: Layout.sm, align: "center", sx: {
                            flex: 1,
                            justifyContent: 'space-between',
                            "@media only screen and (max-width: 500px)": {
                                flexDirection: "column",
                            },
                        } }, { children: [_jsxs(Group, __assign({ spacing: Layout.sm, align: "center", noWrap: true, sx: { flex: 1 } }, { children: [_jsx(InfoIcon, { color: (_e = Colors.Badge[type]) === null || _e === void 0 ? void 0 : _e.Label }), _jsx(Text, __assign({ color: (_f = Colors.Badge[type]) === null || _f === void 0 ? void 0 : _f.Label, sx: __assign({ maxWidth: '80%' }, (typeof message === "string" ? FontSizes.Subtitle2 : FontSizes.Body2)) }, { children: title }))] })), typeof message === "string" ? null : withButton ? (_jsx(Button, { label: buttonTitle !== null && buttonTitle !== void 0 ? buttonTitle : "Button", type: ButtonTypeMap[type], onClick: onClick, sx: type === 'neutral' ? { color: '#000' } : {} })) : null] })), _jsx(ActionIcon, __assign({ variant: "subtle", size: '40px', onClick: onClose, color: "gray", radius: "xl", sx: { padding: Layout.sm, margin: "2px 0" } }, { children: _jsx(X, { size: "16x", color: (_g = Colors.Badge[type]) === null || _g === void 0 ? void 0 : _g.Label }) }))] })), _jsxs(Group, __assign({ sx: { padding: '0 40px 2px 28px' } }, { children: [typeof message === "string" ? (_jsx(Text, __assign({ color: (_h = Colors.Badge[type]) === null || _h === void 0 ? void 0 : _h.Label, sx: __assign({}, FontSizes.Body3) }, { children: message }))) : undefined, typeof message === "string" && withButton ? (_jsx(Button, { label: buttonTitle !== null && buttonTitle !== void 0 ? buttonTitle : "Button", type: ButtonTypeMap[type], onClick: onClick, sx: __assign({ margin: "2px" }, (type === 'neutral' ? { color: '#000' } : {})) })) : undefined] }))] })));
}
