var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Drawer, Group, Text, Stack, Image, Flex, createStyles } from "@mantine/core";
import { ChevronRight, ChevronLeft } from "lucide-react";
import { useState } from "react";
import logo from "../../assets/logo.svg";
import { Button, ButtonType } from "../Button";
import { Colors, FontSizes, Layout } from "../../design-tokens";
import { UserProfile } from "../UserProfile";
var useStyles = createStyles(function () { return ({
    body: {
        padding: Layout.lg,
        gap: Layout.md,
        display: "flex",
        flexDirection: "column",
        height: "calc( 100% - 2rem )",
    },
}); });
export function SideBarNav(_a) {
    var title = _a.title, collapse = _a.collapse, menuItems = _a.menuItems, sx = _a.sx, userProfile = _a.userProfile, selector = _a.selector;
    var _b = useState(!collapse), open = _b[0], setOpen = _b[1];
    var classes = useStyles().classes;
    var toggleDrawer = function () {
        setOpen(function (prev) { return !prev; });
    };
    var handleDrawerClose = function () {
        setOpen(false);
    };
    return (_jsxs(Group, __assign({ sx: sx }, { children: [_jsxs(Drawer, __assign({ style: { position: "absolute", left: "0px" }, opened: open, onClose: handleDrawerClose, withCloseButton: false, classNames: {
                    body: classes.body,
                } }, selector, { children: [_jsxs(Flex, __assign({ justify: "space-between" }, { children: [_jsx(Image, { width: "120px", height: "30px", fit: "contain", alt: "Componly logo", src: logo }), _jsx(Button, { type: ButtonType.NoBorders, icon: _jsx(ChevronLeft, { color: "black" }), onClick: toggleDrawer })] })), _jsxs(Stack, __assign({ sx: { flex: 1, gap: Layout.lg } }, { children: [_jsx(UserProfile, __assign({}, userProfile)), _jsxs(Stack, __assign({ sx: { flex: 1, gap: '5px' } }, { children: [title && _jsx(Text, __assign({ pl: Layout.md, align: "start", color: Colors.Neutral[800], sx: __assign(__assign({}, FontSizes.Helper), { padding: '5px 0' }) }, { children: title })), menuItems.map(function (_a) {
                                        var label = _a.label, current = _a.current, menuItemSx = _a.sx, rest = __rest(_a, ["label", "current", "sx"]);
                                        return (_jsx(Button, __assign({ label: label, sx: __assign(__assign(__assign({ color: Colors.Neutral[800], padding: Layout.sm, display: "flex", justifyContent: "flex-start" }, FontSizes.Subtitle3), (current
                                                ? {
                                                    background: Colors.Focused.Fade,
                                                    color: Colors.Focused.Background,
                                                }
                                                : {})), menuItemSx) }, rest), label));
                                    })] }))] }))] })), _jsxs(Stack, { children: [_jsx(Button, { type: ButtonType.NoBorders, icon: _jsx(ChevronRight, {}), onClick: toggleDrawer }), menuItems.map(function (_a) {
                        var icon = _a.icon, current = _a.current, label = _a.label, menuItemSx = _a.sx, rest = __rest(_a, ["icon", "current", "label", "sx"]);
                        return (_jsx(Button, __assign({ icon: icon, sx: __assign(__assign(__assign({}, (current
                                ? {
                                    background: Colors.Focused.Fade,
                                    color: Colors.Focused.Background,
                                }
                                : {})), { display: "flex" }), menuItemSx) }, rest), label));
                    })] })] })));
}
