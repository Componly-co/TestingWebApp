var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { getStylesRef, Card as MantineCard, Flex, createStyles, Text, } from "@mantine/core";
import { TrendingUp, TrendingDown, TagIcon } from "lucide-react";
import { Colors } from "../../design-tokens";
import { Pagination } from "../Pagination";
var useStyles = createStyles(function () { return ({
    cardHead: {
        padding: 24,
        "& svg": {
            fontSize: 20,
            marginRight: 8,
            stroke: "red",
        },
    },
    title: {
        fontSize: 18,
        fontWeight: 500,
        lineHeight: "28px",
        color: Colors.DarkGrey[900],
        "& svg": {
            fontSize: 24,
            marginRight: 8,
        },
    },
    tableHeader: {
        padding: "13px 24px",
        backgroundColor: Colors.DarkGrey[50],
        borderTop: "1px solid ".concat(Colors.DarkGrey.cf0),
        borderBottom: "1px solid ".concat(Colors.DarkGrey.cf0),
    },
    headText: {
        fontSize: 12,
        fontWeight: 500,
        lineHeight: "18px",
        color: Colors.DarkGrey[600],
    },
    itemsList: {
        // height: 460,
        overflowY: "auto",
    },
    itemRoot: {
        padding: "20px 26px 20px 24px",
        borderBottom: "1px solid ".concat(Colors.DarkGrey.cf0),
        "&:nth-of-type(even)": {
            background: Colors.DarkGrey[50],
        },
    },
    contentText: {
        display: "flex",
        alignItems: "center",
        fontSize: 14,
        lineHeight: "20px",
        color: Colors.DarkGrey[600],
        "&:first-of-type svg": {
            marginRight: 16,
            color: "#0F1729",
            width: 26,
            height: 26,
        },
        "&:last-of-type svg": {
            marginLeft: 8,
            width: 20,
            height: 20,
        },
    },
    pagination: {
        padding: "32px",
    },
}); });
export var TagsUsageCard = function (_a) {
    var _b;
    var sx = _a.sx, _c = _a.maxHeight, maxHeight = _c === void 0 ? 460 : _c, disabled = _a.disabled, type = _a.type, trend = _a.trend, title = _a.title, items = _a.items, paginationProps = _a.paginationProps, selector = _a.selector;
    var classes = useStyles().classes;
    var isUsage = type === "usage";
    var Icon = function (_a) {
        var trend = _a.trend;
        if (!trend)
            return null;
        if (trend === "up")
            return _jsx(TrendingUp, { style: { stroke: Colors.Primary.green } });
        return _jsx(TrendingDown, { style: { stroke: Colors.Primary.red } });
    };
    return (_jsxs(MantineCard, __assign({ radius: "xl", padding: 0, sx: __assign((_b = { height: "100%", minHeight: 245, boxShadow: "0px 0px 2px 0.5px #0A090B05, 0px 7px 14px 0px #0A090B12", border: "2px solid ".concat(Colors.Disabled.Gray), display: "flex", flexDirection: "column", gap: 0, "&:hover": {
                    border: disabled === true ? undefined : Colors.Card.Hover.Border,
                }, "&:focus": {
                    boxShadow: disabled === true ? undefined : Colors.Card.Focus,
                } }, _b["&:hover .".concat(getStylesRef("primary-text"))] = {
            color: disabled === true ? undefined : Colors.Card.Hover.PrimaryTextColor,
        }, _b.cursor = disabled === true ? "not-allowed" : undefined, _b), sx), tabIndex: 0 }, selector, { children: [_jsxs(Flex, __assign({ className: classes.cardHead, direction: "row", align: "center" }, { children: [_jsx(Icon, { trend: trend }), _jsx(Text, __assign({ className: classes.title }, { children: title }))] })), _jsxs(Flex, __assign({ className: classes.tableHeader, direction: "row", justify: "space-between" }, { children: [_jsx(Text, __assign({ className: classes.headText }, { children: "Words" })), _jsx(Text, __assign({ className: classes.headText }, { children: isUsage ? "Usage" : "Visibility" }))] })), _jsx("div", __assign({ className: classes.itemsList, style: { maxHeight: maxHeight } }, { children: items.map(function (_a, i) {
                    var title = _a.title, count = _a.count;
                    return (_jsxs(Flex, __assign({ className: classes.itemRoot, direction: "row", justify: "space-between" }, { children: [_jsxs(Text, __assign({ className: classes.contentText }, { children: [_jsx(TagIcon, {}), title] })), _jsxs(Text, __assign({ className: classes.contentText }, { children: [!isUsage && (trend === "up" ? "+" : "-"), count, !isUsage && "%", _jsx(Icon, { trend: trend })] }))] }), i));
                }) })), _jsx(Flex, __assign({ className: classes.pagination, justify: "center" }, { children: _jsx(Pagination, __assign({ position: "center" }, paginationProps)) }))] })));
};
export default TagsUsageCard;
