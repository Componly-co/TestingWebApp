var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Tooltip as MantineTooltip, Box, Stack, Text, createStyles } from "@mantine/core";
import { useState } from "react";
import { Colors, FontSizes, Layout } from "../../design-tokens";
import { Button } from "../Button";
var useStyles = createStyles(function () { return ({
    labelRoot: {
        gap: Layout.md,
    },
    title: __assign({ color: Colors.DarkGrey[75] }, FontSizes.Subtitle2),
    description: __assign({}, FontSizes.Body3),
}); });
export var Tooltip = function (_a) {
    var title = _a.title, description = _a.description, children = _a.children, _b = _a.position, position = _b === void 0 ? "top" : _b, _c = _a.withArrow, withArrow = _c === void 0 ? true : _c, buttonLabel = _a.buttonLabel, label = _a.label, onClickButton = _a.onClickButton, _d = _a.withButton, withButton = _d === void 0 ? false : _d, _e = _a.isControlled, isControlled = _e === void 0 ? false : _e, styles = _a.styles, selector = _a.selector, rest = __rest(_a, ["title", "description", "children", "position", "withArrow", "buttonLabel", "label", "onClickButton", "withButton", "isControlled", "styles", "selector"]);
    var classes = useStyles().classes;
    var _f = useState(false), opened = _f[0], setOpened = _f[1];
    var Label = function () {
        return (_jsxs(Stack, __assign({ className: classes.labelRoot }, { children: [title && (_jsx(Text, __assign({ className: classes.title }, { children: title }))), description && (_jsx(Text, __assign({ className: classes.description }, { children: description }))), withButton && isControlled && (_jsx(Button, { type: "no-borders", label: buttonLabel || "Button", onClick: onClickButton, sx: {
                        width: "fit-content",
                    } }))] })));
    };
    return (_jsx(MantineTooltip, __assign({ multiline: true, width: 260, withArrow: withArrow, arrowSize: 10, arrowRadius: 2, transitionProps: { duration: 200 }, label: label || _jsx(Label, {}), position: position, color: Colors.Button.secondary.Hover.Background, styles: __assign(__assign({}, (isControlled
            ? {
                tooltip: {
                    pointerEvents: "all",
                    padding: "".concat(Layout.xs, " ").concat(Layout.md),
                },
            }
            : {
                tooltip: {
                    padding: "".concat(Layout.xs, " ").concat(Layout.md),
                }
            })), styles) }, (isControlled ? { opened: opened } : {}), rest, selector, { children: _jsx(Box, __assign({ onClick: function () { return isControlled && setOpened(function (o) { return !o; }); } }, { children: children })) })));
};
