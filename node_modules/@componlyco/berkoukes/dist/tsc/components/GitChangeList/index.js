var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { createStyles, Flex, useMantineTheme, Text, Image } from "@mantine/core";
import { useMediaQuery } from "@mantine/hooks";
import { GitBranch } from "lucide-react";
import { Scrollbar, Colors } from "../../design-tokens";
import cn from "classnames";
import { Checkbox } from "../Checkbox";
import { Avatar } from "../Avatar";
import githubIcon from "../../assets/github.svg";
import figmaIcon from "../../assets/figma.svg";
var useStyles = createStyles(function (theme, _a) {
    var _b, _c, _d, _e, _f, _g, _h;
    var _j = _a.height, height = _j === void 0 ? 500 : _j, background = _a.background;
    return ({
        changeList: __assign({ gap: 8, marginTop: 8, paddingRight: 4, overflowX: "hidden", overflowY: "auto", maxHeight: height }, Scrollbar()),
        changeListItem: (_b = {
                padding: "16px 24px",
                borderRadius: 12,
                backgroundColor: background || Colors.Neutral[25]
            },
            _b[theme.fn.smallerThan("md")] = {
                padding: "10px 18px",
            },
            _b[theme.fn.smallerThan("sm")] = {
                padding: "10px 13px",
            },
            _b),
        body: (_c = {
                marginLeft: 12
            },
            _c[theme.fn.smallerThan("sm")] = {
                marginLeft: 8,
            },
            _c),
        messageRoot: (_d = {},
            _d[theme.fn.smallerThan("md")] = {
                flexDirection: "column",
                alignItems: "flex-start",
                "& svg": {
                    width: 30,
                    height: 30,
                },
            },
            _d),
        gitMessage: (_e = {
                fontSize: 24,
                fontWeight: 700,
                lineHeight: "24px",
                color: Colors.DarkGrey[1300]
            },
            _e[theme.fn.smallerThan("md")] = {
                fontSize: 16,
            },
            _e),
        branchRoot: (_f = {
                "& svg": {
                    width: 22,
                    height: 22,
                }
            },
            _f[theme.fn.smallerThan("md")] = {
                "& svg": {
                    width: 15,
                    height: 15,
                },
            },
            _f),
        gitBranch: (_g = {
                fontSize: 14,
                fontWeight: 700,
                lineHeight: "24px",
                color: Colors.Primary.blue
            },
            _g[theme.fn.smallerThan("md")] = {
                fontSize: 12,
            },
            _g),
        role: (_h = {
                fontSize: 16,
                marginLeft: 12,
                marginRight: 20
            },
            _h[theme.fn.smallerThan("md")] = {
                fontSize: 12,
                marginLeft: 35,
                lineHeight: "12px",
            },
            _h),
        disabled: {
            opacity: 0.5,
            pointerEvents: "none",
        },
    });
});
export function GitChangeList(_a) {
    var height = _a.height, background = _a.background, changeList = _a.changeList, sx = _a.sx;
    var classes = useStyles({ height: height, background: background }).classes;
    var theme = useMantineTheme();
    var breakpointsDownSm = useMediaQuery(theme.fn.smallerThan("sm"));
    var breakpointsDownMd = useMediaQuery(theme.fn.smallerThan("md"));
    var Icon = function (_a) {
        var type = _a.type;
        var img = githubIcon;
        if (type === "figma")
            img = figmaIcon;
        if (type === "github")
            img = githubIcon;
        return _jsx(Image, { height: "40px", fit: "contain", width: "40px", alt: "".concat(type, " logo"), src: img });
    };
    return (_jsx(Flex, __assign({ className: classes.changeList, direction: "column" }, { children: changeList.map(function (_a, i) {
            var _b;
            var selector = _a.selector, type = _a.type, title = _a.title, branch = _a.branch, user_profile = _a.user_profile, role = _a.role, disabled = _a.disabled;
            return (_jsxs(Flex, __assign({ className: cn(classes.changeListItem, (_b = {},
                    _b[classes.disabled] = disabled,
                    _b)), sx: sx, direction: "row", align: "center" }, selector, { children: [_jsx(Checkbox, { size: breakpointsDownSm ? 20 : breakpointsDownMd ? 25 : 32 }), _jsxs(Flex, __assign({ align: "flex-start", direction: "column", gap: "4px", className: classes.body }, { children: [_jsxs(Flex, __assign({ align: breakpointsDownMd ? "flex-start" : "center", direction: breakpointsDownMd ? "column" : "row", gap: "4px", className: classes.messageRoot }, { children: [_jsxs(Flex, __assign({ align: "center", direction: "row", gap: "4px" }, { children: [_jsx(Icon, { type: type }), _jsx(Text, __assign({ className: classes.gitMessage }, { children: title }))] })), _jsx(Text, __assign({ className: classes.role }, { children: role }))] })), _jsxs(Flex, __assign({ align: "center", direction: "row", gap: "8px", style: { paddingLeft: "5px" }, className: classes.branchRoot }, { children: [_jsx(GitBranch, {}), _jsx(Text, __assign({ className: classes.gitBranch }, { children: branch }))] }))] })), _jsx(Avatar, { size: "s", type: "image", src: user_profile, sx: {
                            marginLeft: "auto",
                        } })] }), i));
        }) })));
}
