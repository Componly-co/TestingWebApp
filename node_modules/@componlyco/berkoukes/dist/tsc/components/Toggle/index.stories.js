var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { useState } from "react";
import { Toggle } from "./index";
export default {
    title: "Toggle",
    component: Toggle,
};
var Template = function (_a) {
    var checked = _a.checked, rest = __rest(_a, ["checked"]);
    var _b = useState(checked), checkedState = _b[0], setCheckedState = _b[1];
    return (_jsx(Toggle, __assign({}, rest, { checked: checkedState, onChange: function (event) { return setCheckedState(event.currentTarget.checked); } })));
};
export var Default = Template.bind({});
export var DefaultChecked = Template.bind({});
DefaultChecked.args = {
    checked: true,
};
export var Disabled = Template.bind({});
Disabled.args = {
    disabled: true,
};
export var DisabledChecked = Template.bind({});
DisabledChecked.args = {
    disabled: true,
    checked: true,
};
