var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Divider as MantineDivider, Group, Text, ThemeIcon } from "@mantine/core";
import { FontSizes } from "../../design-tokens";
export function Divider(_a) {
    var message = _a.message, icon = _a.icon, borderColor = _a.borderColor, orientation = _a.orientation, sx = _a.sx, selector = _a.selector;
    var output = (_jsx(MantineDivider, __assign({ labelPosition: "center", sx: sx, label: typeof message === "string" ? _jsx(Text, __assign({ size: FontSizes.Upload.Body }, { children: message })) : null, orientation: orientation !== null && orientation !== void 0 ? orientation : "horizontal", style: {
            borderColor: borderColor,
        } }, selector)));
    if (icon !== undefined) {
        output = (_jsx(MantineDivider, __assign({ labelPosition: "center", label: typeof message === "string" ? (_jsxs(Group, { children: [_jsx(ThemeIcon, __assign({ size: FontSizes.Upload.Body, variant: "default", style: { border: "none" } }, { children: icon })), _jsx(Text, __assign({ size: FontSizes.Upload.Body }, { children: message })), _jsx(ThemeIcon, __assign({ size: FontSizes.Upload.Body, variant: "default", style: { border: "none" } }, { children: icon }))] })) : null, style: {
                borderColor: borderColor,
            } }, selector)));
    }
    return output;
}
