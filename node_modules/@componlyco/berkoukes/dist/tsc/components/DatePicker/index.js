var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Stack, Text, Flex, Paper, Group, createStyles, Image } from "@mantine/core";
import { DatePicker as MantineDatePicker } from "@mantine/dates";
import { GitBranch } from "lucide-react";
import { memo, useEffect, useState } from "react";
import checkboxIcon from "../../assets/checkboxIcon.svg";
import { Button, ButtonType, ButtonSizes } from "../Button";
import { Colors, FontSizes, Layout } from "../../design-tokens";
import { Divider } from "../Divider";
import { SelectedItem } from "../MultiSelect";
import { Select } from "../Select";
import { Tabs } from "../Tabs";
var renderDay = function (date, scans) {
    var day = date.getDate();
    return (_jsxs(Stack, __assign({ spacing: 0 }, { children: [_jsx(Text, __assign({ size: "12px", align: "center" }, { children: day })), scans && _jsxs(Text, __assign({ size: "10px", c: "dimmed", align: "center" }, { children: [scans, " scan", scans > 1 ? "s" : ""] }))] })));
};
var tabs = [
    {
        text: "Select a date",
    },
    {
        text: "Select a scan",
    },
];
var useStyles = createStyles(function (theme) { return ({
    chip: {
        gap: '8px',
        border: "1px solid #C3C5C8",
        borderRadius: 30,
        position: "relative",
        padding: "".concat(Layout.sm, " ").concat(Layout.md),
        height: "auto",
        display: "flex",
        cursor: 'pointer',
        alignItems: 'center',
        justifyContent: 'space-between',
        '&:hover': {
            backgroundColor: '#F5F6F8'
        },
        "& input": {
            position: "absolute",
        },
        "& svg.lucide-circle": {
            width: 4,
            fill: "#000",
        },
        "& label": {
            border: "1px solid #C3C5C8",
            borderRadius: 30,
            width: "100%",
            position: "relative",
            padding: "8px 12px",
            height: "auto",
            display: "flex",
            "& svg.lucide-circle": {
                width: 4,
                fill: "#000",
            },
            "&[data-checked]": {
                backgroundColor: '#F5F6F8'
            }
        },
    },
    chipSelected: {
        backgroundColor: Colors.Primary.blue,
        color: '#FFF',
        '&:hover': {
            backgroundColor: "".concat(theme.fn.lighten(Colors.Primary.blue, 0.1), "!important")
        },
        '& svg.lucide-circle': {
            fill: '#FFF!important'
        }
    },
    chipFailed: {
        color: "#9E9E9E",
        cursor: 'not-allowed',
        '&:hover': {
            backgroundColor: '#FFF!important'
        },
    },
    scansRoot: {
        height: 335,
        overflowY: "auto",
        gap: 4,
        display: 'flex',
        flexDirection: 'column',
        "&::-webkit-scrollbar": {
            width: 0,
            height: 0
        },
        /* Track */
        "&::-webkit-scrollbar-track": {
            background: "transparent",
        },
        /* Handle */
        "&::-webkit-scrollbar-thumb": {
            background: "transparent",
        },
        /* Handle on hover */
        "&::-webkit-scrollbar-thumb:hover": {
            background: "transparent",
        },
    },
    label: __assign(__assign({ borderRadius: 50, border: '1px solid #D0D5DD', background: '#fff', color: '#000', padding: "".concat(Layout.xs, " ").concat(Layout.md) }, FontSizes.Body3), { boxShadow: '0px 5px 8px -5px rgba(10, 9, 11, 0.04), 0px 1px 4px 1px rgba(10, 9, 11, 0.02)' }),
    failedLabel: {
        color: Colors.Badge.error.Label,
        background: Colors.Badge.error.Background.filled,
        borderColor: Colors.Badge.error.Background.filled,
    }
}); });
export function DatePicker(_a) {
    var _b, _c;
    var type = _a.type, onChange = _a.onChange, onCancelClick = _a.onCancelClick, onSaveClick = _a.onSaveClick, sx = _a.sx, _d = _a.withScans, withScans = _d === void 0 ? true : _d, scanItems = _a.scanItems, _e = _a.codeBaseItems, codeBaseItems = _e === void 0 ? [] : _e, _f = _a.selectedCodeBase, selectedCodeBase = _f === void 0 ? null : _f, _g = _a.selectedScans, selectedScans = _g === void 0 ? [] : _g, _h = _a.onChangeCodeBase, onChangeCodeBase = _h === void 0 ? function () { return null; } : _h, _j = _a.onDateChange, onDateChange = _j === void 0 ? function () { return null; } : _j, _k = _a.onChangeTab, onChangeTab = _k === void 0 ? function () { return null; } : _k, _l = _a.getScanNumber, getScanNumber = _l === void 0 ? function () { return null; } : _l, rest = __rest(_a, ["type", "onChange", "onCancelClick", "onSaveClick", "sx", "withScans", "scanItems", "codeBaseItems", "selectedCodeBase", "selectedScans", "onChangeCodeBase", "onDateChange", "onChangeTab", "getScanNumber"]);
    var _m = useState(null), startDate = _m[0], setStartDate = _m[1];
    var _o = useState(null), endDate = _o[0], setEndDate = _o[1];
    var onChangeHandler = function (value) {
        if (value !== null) {
            if (value instanceof Date) {
                setStartDate(value);
            }
            else if (type === "range") {
                setStartDate(value[0]);
                setEndDate(value[1]);
            }
            else if (type === "multiple") {
                setStartDate(value[value.length - 1]); // To show the last chosen date for multiple type
            }
        }
        onChange === null || onChange === void 0 ? void 0 : onChange(value);
    };
    var _p = useState(tabs[0].text), selectedTab = _p[0], setTab = _p[1];
    var _q = useState(selectedScans || []), selectedScan = _q[0], setScan = _q[1];
    var isScan = selectedTab === tabs[1].text;
    console.log('berkoukes selectedScan', selectedScan);
    useEffect(function () {
        if (selectedScans === null || selectedScans === void 0 ? void 0 : selectedScans.length)
            setScan(selectedScans);
    }, [selectedScans]);
    var onTabChange = function (arg) {
        setTab(arg);
        onChangeTab && onChangeTab(arg);
    };
    var handleSave = function () {
        if (isScan || !withScans)
            return onSaveClick && onSaveClick({ isScan: isScan, selectedScan: selectedScan, startDate: startDate, endDate: endDate });
        onSaveClick && onSaveClick({ isScan: isScan, startDate: startDate, endDate: endDate });
        return onTabChange(tabs[1].text);
    };
    var handleClose = function (e) {
        if (isScan)
            return onTabChange(tabs[0].text);
        return onCancelClick && onCancelClick(e);
    };
    return (_jsx(Paper, __assign({ sx: __assign({ padding: "".concat(Layout.lg, " ").concat(Layout.lg) }, sx), shadow: "xs", radius: "xl" }, { children: _jsxs(Stack, __assign({ sx: { width: 390 }, className: "DatePicker-root" }, { children: [_jsx(Tabs, { tabItems: withScans ? tabs : [tabs[0]], value: selectedTab, onTabChange: onTabChange, sx: { marginLeft: 8 } }), _jsxs(Flex, __assign({ justify: "space-between", align: "center", gap: "12px" }, { children: [_jsx(Text, __assign({ truncate: "end", style: __assign({}, FontSizes.Body1) }, { children: isScan
                                ? selectedScan && (selectedScan === null || selectedScan === void 0 ? void 0 : selectedScan.length)
                                    //@ts-ignore
                                    ? "Scan #".concat(scanItems === null || scanItems === void 0 ? void 0 : scanItems.filter(function (i) { var _a; return selectedScan === null || selectedScan === void 0 ? void 0 : selectedScan.includes((_a = i.value) === null || _a === void 0 ? void 0 : _a.toString()); }).map(function (i) { return i.commitMessage; }))
                                    : ""
                                : "".concat((_b = startDate === null || startDate === void 0 ? void 0 : startDate.toLocaleDateString(undefined, {
                                    weekday: "short",
                                    month: "short",
                                    day: "2-digit",
                                })) !== null && _b !== void 0 ? _b : "", " ").concat(endDate !== null ? "-" : "", " ").concat((_c = endDate === null || endDate === void 0 ? void 0 : endDate.toLocaleDateString(undefined, {
                                    weekday: "short",
                                    month: "short",
                                    day: "2-digit",
                                })) !== null && _c !== void 0 ? _c : "") })), isScan && (codeBaseItems === null || codeBaseItems === void 0 ? void 0 : codeBaseItems.length) ? _jsx(Select, { showHelpIcon: false, placeholder: "Select a codebase", 
                            //@ts-ignore
                            allowDeselect: true, itemComponent: function (props) { return _jsx(SelectedItem, __assign({}, props, { truncate: true })); }, sx: {
                                flex: 1,
                                minWidth: 180,
                                maxWidth: 180,
                                "& .mantine-MultiSelect-values": {
                                    flexWrap: "nowrap",
                                    overflow: "hidden",
                                    "&  .mantine-Badge-root": {
                                        height: "30px!important"
                                    }
                                }
                            }, value: selectedCodeBase, onChange: onChangeCodeBase, data: codeBaseItems }) : null] })), _jsx(Divider, { borderColor: Colors.Badge.neutral.Label, sx: { width: "calc(100% + 32px)", left: -16, position: 'relative' } }), isScan ? (_jsx(Scan, { selectedScan: selectedScan, scanItems: scanItems, setScan: setScan })) : (_jsx(MantineDatePicker, __assign({}, rest, { type: type, onChange: onChangeHandler, size: "lg", hideOutsideDates // Make extra dates not from current month disapppear
                    : true, renderDay: function (date) { return renderDay(date, getScanNumber && getScanNumber(date)); }, styles: {
                        pickerControl: {
                            borderRadius: "100px",
                            "&[data-selected]": {
                                background: Colors.Default.Background,
                            },
                            "&[data-selected]:hover": {
                                background: Colors.Button.primary.Hover.Background,
                                border: "2px solid ".concat(Colors.Default.Background),
                            },
                        },
                        day: __assign(__assign({}, FontSizes.Helper), { borderRadius: "50%", "&[data-weekend]:not([data-selected])": {
                                color: Colors.Badge.neutral.Label,
                            }, "&[data-selected]": {
                                background: Colors.Default.Background,
                                borderRadius: "50%",
                            }, "&[data-selected] *": {
                                color: "white",
                            }, "&[data-selected]:hover": {
                                background: Colors.Button.primary.Hover.Background,
                                border: "2px solid ".concat(Colors.Default.Background),
                            }, "&[data-in-range]": {
                                borderRadius: "50%",
                            } }),
                        weekday: __assign({ color: Colors.DatePicker.WeekLabel }, FontSizes.Helper),
                        calendarHeader: {
                            width: '100%',
                            maxWidth: '100%',
                            '& button': __assign({}, FontSizes.Button)
                        },
                        monthLevel: {
                            width: '100%',
                        },
                        monthsList: {
                            width: '100%',
                        },
                        month: {
                            width: '100%',
                        },
                        yearLevel: {
                            width: '100%',
                        },
                        calendarHeaderLevel: {
                            color: Colors.DatePicker.HeaderLabel,
                            fontSize: "16px",
                        },
                        calendarHeaderControlIcon: {
                            color: Colors.DatePicker.HeaderLabel,
                        }, // Prev and Next Icon
                    }, onDateChange: onDateChange }))), _jsx(Divider, { sx: { width: "calc(100% + 32px)", left: -16, position: 'relative' }, borderColor: Colors.DarkGrey.cf0 }), _jsxs(Group, __assign({ spacing: "xs", position: "right", sx: { justifyContent: "space-between" } }, { children: [_jsx(Button, { type: ButtonType.Borders, size: ButtonSizes.Normal, label: !isScan ? "Close" : "Previous", onClick: handleClose }), _jsx(Button, { type: ButtonType.Primary, size: ButtonSizes.Normal, label: withScans ? "Next" : 'Save', onClick: handleSave })] }))] })) })));
}
var Scan = memo(function (_a) {
    var selectedScan = _a.selectedScan, scanItems = _a.scanItems, setScan = _a.setScan;
    var classes = useStyles().classes;
    var toggleScan = function (val) {
        if (selectedScan.includes(val)) {
            setScan(selectedScan.filter(function (i) { return i !== val; }));
        }
        else
            setScan(function (prev) { return __spreadArray(__spreadArray([], prev, true), [val], false); });
    };
    return (_jsx("div", __assign({ className: classes.scansRoot }, { children: scanItems && (scanItems === null || scanItems === void 0 ? void 0 : scanItems.length) ?
            scanItems === null || scanItems === void 0 ? void 0 : scanItems.map(function (item) {
                var value = item.value;
                return _jsx(ScanItem, { item: item, isSelected: selectedScan.includes(value), onClick: function () { return toggleScan(value); } }, value);
            }) : _jsx(Text, __assign({ size: "18px", fw: 500 }, { children: "No scans detected" })) })));
});
var ScanItem = function (_a) {
    var _b;
    var isSelected = _a.isSelected, onClick = _a.onClick, item = _a.item;
    var classes = useStyles().classes;
    var _c = item || {}, branch = _c.branch, project = _c.project, failed = _c.failed, commitMessage = _c.commitMessage, createdAtDate = _c.createdAtDate, createdAtTime = _c.createdAtTime, commitHash = _c.commitHash, components = _c.components, coverage = _c.coverage, excludedComponents = _c.excludedComponents;
    var excluded = excludedComponents === null || excludedComponents === void 0 ? void 0 : excludedComponents.join('\xa0\xa0 • \xa0\xa0');
    return _jsxs("div", __assign({ className: "".concat(classes.chip, " ").concat(isSelected && !failed ? classes.chipSelected : '', " ").concat(failed ? classes.chipFailed : ''), onClick: !failed ? onClick : null }, { children: [_jsxs(Group, __assign({ align: "flex-start", style: { flexDirection: "column", gap: 0, overflow: 'hidden', flex: 1, width: '100%' } }, { children: [_jsxs(Group, __assign({ noWrap: true, sx: { gap: "4px", justifyContent: 'space-between' }, w: "100%" }, { children: [_jsx(Text, __assign({ truncate: true, style: __assign({}, FontSizes.Subtitle3) }, { children: commitMessage })), failed && _jsx(Text, __assign({ className: "".concat(classes.label, " ").concat(classes.failedLabel) }, { children: "Failed" }))] })), _jsxs(Group, __assign({ noWrap: true, sx: { gap: Layout.sm }, w: "100%" }, { children: [_jsx(Text, __assign({ style: __assign({}, FontSizes.Body2), sx: { whiteSpace: 'nowrap' } }, { children: createdAtDate })), _jsx(Text, __assign({ size: "16px" }, { children: " \u2022 " })), _jsx(Text, __assign({ style: __assign({}, FontSizes.Body2), sx: { whiteSpace: 'nowrap' } }, { children: createdAtTime })), _jsx(Text, __assign({ size: "16px" }, { children: " \u2022 " })), _jsx(Text, __assign({ style: __assign({}, FontSizes.Body2), truncate: true }, { children: commitHash }))] })), _jsxs(Group, __assign({ noWrap: true, sx: { gap: Layout.sm } }, { children: [project && _jsx(Text, __assign({ className: classes.label }, { children: project })), _jsx(GitBranch, {}), _jsx(Text, __assign({ style: __assign({}, FontSizes.Subtitle3) }, { children: branch }))] })), _jsxs(Group, __assign({ noWrap: true, sx: { gap: Layout.sm } }, { children: [_jsx(Text, __assign({ style: __assign({}, FontSizes.Body2) }, { children: "Components" })), _jsx(Text, __assign({ style: __assign({}, FontSizes.Body2) }, { children: components })), _jsx(Text, __assign({ size: "16px" }, { children: " \u2022 " })), _jsx(Text, __assign({ style: __assign({}, FontSizes.Body2) }, { children: "Coverage" })), _jsxs(Text, __assign({ style: __assign({}, FontSizes.Body2) }, { children: [isNaN(coverage) ? coverage : (_b = Number(coverage)) === null || _b === void 0 ? void 0 : _b.toFixed(2), "%"] }))] })), excludedComponents && (excludedComponents === null || excludedComponents === void 0 ? void 0 : excludedComponents.length) > 0 ?
                        _jsxs(Group, __assign({ noWrap: true, sx: { gap: Layout.sm, alignItems: 'center' }, w: "100%" }, { children: [_jsx(Text, __assign({ style: __assign({}, FontSizes.Body2) }, { children: "Excluded" })), _jsx(Text, __assign({ style: __assign({}, FontSizes.Body2), truncate: true }, { children: excluded }))] }))
                        : null] })), isSelected && !failed && _jsx(Image, { width: "24px", alt: "checkboxIcon", src: checkboxIcon })] }));
};
