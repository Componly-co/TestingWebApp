/// <reference types="react" />
import { ModalProps } from "@mantine/core";
import { CardProps as MantineCardProps } from "@mantine/core/lib/Card/Card";
import { TabsProps } from "../Tabs";
export interface MetricItemProps {
    loading?: boolean;
    sxLoading?: any;
    isOpened: boolean;
    modalStyles?: ModalProps["styles"];
    sx?: MantineCardProps["sx"];
    maxWidth?: ModalProps["size"];
    title: string;
    onClose: () => void;
    tags?: string[];
    library?: {
        title: string;
        logo?: string | null | undefined;
    };
    tabsItems?: TabsProps["tabItems"];
    tabsValue?: TabsProps["value"];
    tabsDefaultValue?: TabsProps["defaultValue"];
    pieChartLegend?: any;
    pieChart?: any;
    metricsCards: {
        value: any;
        primaryText: string;
        onClick: () => void;
    }[];
    location?: {
        path: string;
        column: string | number;
        line: string | number;
    };
    brands?: {
        logo?: string | null | undefined;
        alias: string;
    }[];
    projects?: {
        name: string;
    }[];
    overrides?: {
        data: {
            occurence: string | number;
            name: string;
        }[];
        totalOccurrence: number;
        page_size: number;
        hasNextPage: boolean;
        setPage: () => void;
    };
    overridedBy?: {
        data: {
            occurence: string | number;
            name: string;
        }[];
        totalOccurrence: number;
        page_size: number;
        hasNextPage: boolean;
        setPage: () => void;
    };
    selector?: {
        [key: `data-${string}`]: string | number;
    };
}
export declare function MetricItem({ loading, sxLoading, isOpened, modalStyles, maxWidth, sx, title, onClose, tags, library, tabsItems, tabsValue, tabsDefaultValue, pieChartLegend, pieChart, metricsCards, location, brands, projects, overrides, overridedBy, selector }: MetricItemProps): JSX.Element;
//# sourceMappingURL=index.d.ts.map